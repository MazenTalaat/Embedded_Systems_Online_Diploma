
Unit7_L4_EXTI_Driver_STM32CubeProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cf0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000e20  08000e20  00010e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e34  08000e34  00010e3c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e34  08000e34  00010e3c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e34  08000e3c  00010e3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e34  08000e34  00010e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e38  08000e38  00010e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000000  08000e3c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08000e3c  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e3c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010e65  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011dc  00000000  00000000  00010ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005a1  00000000  00000000  00012084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000009d0  00000000  00000000  00012625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001b8  00000000  00000000  00012ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000160  00000000  00000000  000131b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000013dc  00000000  00000000  00013310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000d8c  00000000  00000000  000146ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000055a1  00000000  00000000  00015478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000053c  00000000  00000000  0001aa1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e08 	.word	0x08000e08

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e08 	.word	0x08000e08

08000170 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	uint8 i = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	71fb      	strb	r3, [r7, #7]
	GPIO_PinConfig LCD_outputPinsConfig = { LCD_RS_PIN, LCD_OUTPUT_PINS_MODE };
 800017a:	4b1a      	ldr	r3, [pc, #104]	; (80001e4 <LCD_init+0x74>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	603b      	str	r3, [r7, #0]
	MCAL_GPIO_init(LCD_RS_PORT, &LCD_outputPinsConfig);
 8000180:	463b      	mov	r3, r7
 8000182:	4619      	mov	r1, r3
 8000184:	4818      	ldr	r0, [pc, #96]	; (80001e8 <LCD_init+0x78>)
 8000186:	f000 fbb7 	bl	80008f8 <MCAL_GPIO_init>

	LCD_outputPinsConfig.GPIO_pinNumber = LCD_E_PIN;
 800018a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800018e:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_init(LCD_E_PORT, &LCD_outputPinsConfig);
 8000190:	463b      	mov	r3, r7
 8000192:	4619      	mov	r1, r3
 8000194:	4814      	ldr	r0, [pc, #80]	; (80001e8 <LCD_init+0x78>)
 8000196:	f000 fbaf 	bl	80008f8 <MCAL_GPIO_init>

	for (i = 0; i < LCD_BITS; i++) {
 800019a:	2300      	movs	r3, #0
 800019c:	71fb      	strb	r3, [r7, #7]
 800019e:	e00d      	b.n	80001bc <LCD_init+0x4c>
		LCD_outputPinsConfig.GPIO_pinNumber = (LCD_DATA_START_PIN << i);
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	2201      	movs	r2, #1
 80001a4:	fa02 f303 	lsl.w	r3, r2, r3
 80001a8:	b29b      	uxth	r3, r3
 80001aa:	803b      	strh	r3, [r7, #0]
		MCAL_GPIO_init(LCD_DATA_PORT, &LCD_outputPinsConfig);
 80001ac:	463b      	mov	r3, r7
 80001ae:	4619      	mov	r1, r3
 80001b0:	480d      	ldr	r0, [pc, #52]	; (80001e8 <LCD_init+0x78>)
 80001b2:	f000 fba1 	bl	80008f8 <MCAL_GPIO_init>
	for (i = 0; i < LCD_BITS; i++) {
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	3301      	adds	r3, #1
 80001ba:	71fb      	strb	r3, [r7, #7]
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b07      	cmp	r3, #7
 80001c0:	d9ee      	bls.n	80001a0 <LCD_init+0x30>
	}
	_delay_ms(20); /* LCD Power ON delay always > 15ms */
 80001c2:	2014      	movs	r0, #20
 80001c4:	f000 f8a9 	bl	800031a <_delay_ms>

#if LCD_BITS == 8
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_EIGHT_BIT_TWO_LINES_5x7);
 80001c8:	2038      	movs	r0, #56	; 0x38
 80001ca:	f000 f80f 	bl	80001ec <LCD_sendCommand>
#elif LCD_BITS == 4
	LCD_sendCommand(LCD_FOUR_BIT_TWO_LINES_INIT1);
	LCD_sendCommand(LCD_FOUR_BIT_TWO_LINES_INIT2);
	LCD_sendCommand(LCD_FOUR_BIT_TWO_LINES_5x7);
#endif
	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF); /* cursor off */
 80001ce:	200c      	movs	r0, #12
 80001d0:	f000 f80c 	bl	80001ec <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY); /* clear LCD at the beginning */
 80001d4:	2001      	movs	r0, #1
 80001d6:	f000 f809 	bl	80001ec <LCD_sendCommand>
}
 80001da:	bf00      	nop
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	08000e20 	.word	0x08000e20
 80001e8:	40010800 	.word	0x40010800

080001ec <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
 80001f6:	2200      	movs	r2, #0
 80001f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fc:	4817      	ldr	r0, [pc, #92]	; (800025c <LCD_sendCommand+0x70>)
 80001fe:	f000 fc77 	bl	8000af0 <MCAL_GPIO_writePin>
	_delay_ms(1);
 8000202:	2001      	movs	r0, #1
 8000204:	f000 f889 	bl	800031a <_delay_ms>

	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
 8000208:	2201      	movs	r2, #1
 800020a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800020e:	4813      	ldr	r0, [pc, #76]	; (800025c <LCD_sendCommand+0x70>)
 8000210:	f000 fc6e 	bl	8000af0 <MCAL_GPIO_writePin>
	_delay_ms(1);
 8000214:	2001      	movs	r0, #1
 8000216:	f000 f880 	bl	800031a <_delay_ms>
#if LCD_BITS == 8
	MCAL_GPIO_writePort(LCD_DATA_PORT, (MCAL_GPIO_readPort(LCD_DATA_PORT) & 0xFF00)| command);
 800021a:	4810      	ldr	r0, [pc, #64]	; (800025c <LCD_sendCommand+0x70>)
 800021c:	f000 fc5c 	bl	8000ad8 <MCAL_GPIO_readPort>
 8000220:	4603      	mov	r3, r0
 8000222:	b21b      	sxth	r3, r3
 8000224:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000228:	b21a      	sxth	r2, r3
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	b21b      	sxth	r3, r3
 800022e:	4313      	orrs	r3, r2
 8000230:	b21b      	sxth	r3, r3
 8000232:	b29b      	uxth	r3, r3
 8000234:	4619      	mov	r1, r3
 8000236:	4809      	ldr	r0, [pc, #36]	; (800025c <LCD_sendCommand+0x70>)
 8000238:	f000 fc78 	bl	8000b2c <MCAL_GPIO_writePort>
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 2,
			GET_BIT(command, 2));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 3,
			GET_BIT(command, 3));
#endif
	_delay_ms(1);
 800023c:	2001      	movs	r0, #1
 800023e:	f000 f86c 	bl	800031a <_delay_ms>
	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <LCD_sendCommand+0x70>)
 800024a:	f000 fc51 	bl	8000af0 <MCAL_GPIO_writePin>
	_delay_ms(1);
 800024e:	2001      	movs	r0, #1
 8000250:	f000 f863 	bl	800031a <_delay_ms>
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40010800 	.word	0x40010800

08000260 <LCD_displayCharacter>:

/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);
 800026a:	2201      	movs	r2, #1
 800026c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000270:	4817      	ldr	r0, [pc, #92]	; (80002d0 <LCD_displayCharacter+0x70>)
 8000272:	f000 fc3d 	bl	8000af0 <MCAL_GPIO_writePin>
	_delay_ms(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f000 f84f 	bl	800031a <_delay_ms>

	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
 800027c:	2201      	movs	r2, #1
 800027e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000282:	4813      	ldr	r0, [pc, #76]	; (80002d0 <LCD_displayCharacter+0x70>)
 8000284:	f000 fc34 	bl	8000af0 <MCAL_GPIO_writePin>
	_delay_ms(1);
 8000288:	2001      	movs	r0, #1
 800028a:	f000 f846 	bl	800031a <_delay_ms>
#if LCD_BITS == 8
	MCAL_GPIO_writePort(LCD_DATA_PORT, (MCAL_GPIO_readPort(LCD_DATA_PORT) & 0xFF00)| data);
 800028e:	4810      	ldr	r0, [pc, #64]	; (80002d0 <LCD_displayCharacter+0x70>)
 8000290:	f000 fc22 	bl	8000ad8 <MCAL_GPIO_readPort>
 8000294:	4603      	mov	r3, r0
 8000296:	b21b      	sxth	r3, r3
 8000298:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800029c:	b21a      	sxth	r2, r3
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	b21b      	sxth	r3, r3
 80002a2:	4313      	orrs	r3, r2
 80002a4:	b21b      	sxth	r3, r3
 80002a6:	b29b      	uxth	r3, r3
 80002a8:	4619      	mov	r1, r3
 80002aa:	4809      	ldr	r0, [pc, #36]	; (80002d0 <LCD_displayCharacter+0x70>)
 80002ac:	f000 fc3e 	bl	8000b2c <MCAL_GPIO_writePort>
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 2,
			GET_BIT(data, 2));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 3,
			GET_BIT(data, 3));
#endif
	_delay_ms(1);
 80002b0:	2001      	movs	r0, #1
 80002b2:	f000 f832 	bl	800031a <_delay_ms>
	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <LCD_displayCharacter+0x70>)
 80002be:	f000 fc17 	bl	8000af0 <MCAL_GPIO_writePin>
	_delay_ms(1);
 80002c2:	2001      	movs	r0, #1
 80002c4:	f000 f829 	bl	800031a <_delay_ms>
}
 80002c8:	bf00      	nop
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40010800 	.word	0x40010800

080002d4 <LCD_displayString>:

/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	uint8 i = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	73fb      	strb	r3, [r7, #15]
	while (Str[i] != '\0') {
 80002e0:	e009      	b.n	80002f6 <LCD_displayString+0x22>
		LCD_displayCharacter(Str[i]);
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	4413      	add	r3, r2
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ffb8 	bl	8000260 <LCD_displayCharacter>
		i++;
 80002f0:	7bfb      	ldrb	r3, [r7, #15]
 80002f2:	3301      	adds	r3, #1
 80002f4:	73fb      	strb	r3, [r7, #15]
	while (Str[i] != '\0') {
 80002f6:	7bfb      	ldrb	r3, [r7, #15]
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	4413      	add	r3, r2
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d1ef      	bne.n	80002e2 <LCD_displayString+0xe>
	}
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	LCD_sendCommand(LCD_CLEAR_DISPLAY); /* Send clear display command */
 8000310:	2001      	movs	r0, #1
 8000312:	f7ff ff6b 	bl	80001ec <LCD_sendCommand>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}

0800031a <_delay_ms>:
 *      Author: Mazen Talaat
 */

#include "delay.h"

void _delay_ms(uint32 ms) {
 800031a:	b480      	push	{r7}
 800031c:	b085      	sub	sp, #20
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
	volatile int i = 0, j = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	2300      	movs	r3, #0
 8000328:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < ms; ++i) {
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	e00b      	b.n	8000348 <_delay_ms+0x2e>
		for (j = 0; j < 65; ++j) {
 8000330:	2300      	movs	r3, #0
 8000332:	60bb      	str	r3, [r7, #8]
 8000334:	e002      	b.n	800033c <_delay_ms+0x22>
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	3301      	adds	r3, #1
 800033a:	60bb      	str	r3, [r7, #8]
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	2b40      	cmp	r3, #64	; 0x40
 8000340:	ddf9      	ble.n	8000336 <_delay_ms+0x1c>
	for (i = 0; i < ms; ++i) {
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	3301      	adds	r3, #1
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	461a      	mov	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4293      	cmp	r3, r2
 8000350:	d8ee      	bhi.n	8000330 <_delay_ms+0x16>

		}
	}
}
 8000352:	bf00      	nop
 8000354:	bf00      	nop
 8000356:	3714      	adds	r7, #20
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr
	...

08000360 <NVIC_enableEXTI>:
//*****************************************************************************
// Global variables
//*****************************************************************************
void (*GP_IRQ_callBack[15])(void);

void NVIC_enableEXTI(uint16 IRQ) {
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	80fb      	strh	r3, [r7, #6]
	switch (IRQ) {
 800036a:	88fb      	ldrh	r3, [r7, #6]
 800036c:	2b0f      	cmp	r3, #15
 800036e:	d854      	bhi.n	800041a <NVIC_enableEXTI+0xba>
 8000370:	a201      	add	r2, pc, #4	; (adr r2, 8000378 <NVIC_enableEXTI+0x18>)
 8000372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000376:	bf00      	nop
 8000378:	080003b9 	.word	0x080003b9
 800037c:	080003c7 	.word	0x080003c7
 8000380:	080003d5 	.word	0x080003d5
 8000384:	080003e3 	.word	0x080003e3
 8000388:	080003f1 	.word	0x080003f1
 800038c:	080003ff 	.word	0x080003ff
 8000390:	080003ff 	.word	0x080003ff
 8000394:	080003ff 	.word	0x080003ff
 8000398:	080003ff 	.word	0x080003ff
 800039c:	080003ff 	.word	0x080003ff
 80003a0:	0800040d 	.word	0x0800040d
 80003a4:	0800040d 	.word	0x0800040d
 80003a8:	0800040d 	.word	0x0800040d
 80003ac:	0800040d 	.word	0x0800040d
 80003b0:	0800040d 	.word	0x0800040d
 80003b4:	0800040d 	.word	0x0800040d
	case 0:
		NVIC_IRQ6_EXTI0_ENABLE;
 80003b8:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <NVIC_enableEXTI+0xc4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a19      	ldr	r2, [pc, #100]	; (8000424 <NVIC_enableEXTI+0xc4>)
 80003be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c2:	6013      	str	r3, [r2, #0]
		break;
 80003c4:	e029      	b.n	800041a <NVIC_enableEXTI+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_ENABLE;
 80003c6:	4b17      	ldr	r3, [pc, #92]	; (8000424 <NVIC_enableEXTI+0xc4>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a16      	ldr	r2, [pc, #88]	; (8000424 <NVIC_enableEXTI+0xc4>)
 80003cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d0:	6013      	str	r3, [r2, #0]
		break;
 80003d2:	e022      	b.n	800041a <NVIC_enableEXTI+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_ENABLE;
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <NVIC_enableEXTI+0xc4>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a12      	ldr	r2, [pc, #72]	; (8000424 <NVIC_enableEXTI+0xc4>)
 80003da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003de:	6013      	str	r3, [r2, #0]
		break;
 80003e0:	e01b      	b.n	800041a <NVIC_enableEXTI+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_ENABLE;
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <NVIC_enableEXTI+0xc4>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a0f      	ldr	r2, [pc, #60]	; (8000424 <NVIC_enableEXTI+0xc4>)
 80003e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ec:	6013      	str	r3, [r2, #0]
		break;
 80003ee:	e014      	b.n	800041a <NVIC_enableEXTI+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_ENABLE;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <NVIC_enableEXTI+0xc4>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <NVIC_enableEXTI+0xc4>)
 80003f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003fa:	6013      	str	r3, [r2, #0]
		break;
 80003fc:	e00d      	b.n	800041a <NVIC_enableEXTI+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_ENABLE;
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <NVIC_enableEXTI+0xc4>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a08      	ldr	r2, [pc, #32]	; (8000424 <NVIC_enableEXTI+0xc4>)
 8000404:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000408:	6013      	str	r3, [r2, #0]
		break;
 800040a:	e006      	b.n	800041a <NVIC_enableEXTI+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_ENABLE;
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <NVIC_enableEXTI+0xc8>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a05      	ldr	r2, [pc, #20]	; (8000428 <NVIC_enableEXTI+0xc8>)
 8000412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000416:	6013      	str	r3, [r2, #0]
		break;
 8000418:	bf00      	nop
	}
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	e000e100 	.word	0xe000e100
 8000428:	e000e104 	.word	0xe000e104

0800042c <NVIC_disableEXTI>:

void NVIC_disableEXTI(uint16 IRQ) {
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	80fb      	strh	r3, [r7, #6]
	switch (IRQ) {
 8000436:	88fb      	ldrh	r3, [r7, #6]
 8000438:	2b0f      	cmp	r3, #15
 800043a:	d854      	bhi.n	80004e6 <NVIC_disableEXTI+0xba>
 800043c:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <NVIC_disableEXTI+0x18>)
 800043e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000442:	bf00      	nop
 8000444:	08000485 	.word	0x08000485
 8000448:	08000493 	.word	0x08000493
 800044c:	080004a1 	.word	0x080004a1
 8000450:	080004af 	.word	0x080004af
 8000454:	080004bd 	.word	0x080004bd
 8000458:	080004cb 	.word	0x080004cb
 800045c:	080004cb 	.word	0x080004cb
 8000460:	080004cb 	.word	0x080004cb
 8000464:	080004cb 	.word	0x080004cb
 8000468:	080004cb 	.word	0x080004cb
 800046c:	080004d9 	.word	0x080004d9
 8000470:	080004d9 	.word	0x080004d9
 8000474:	080004d9 	.word	0x080004d9
 8000478:	080004d9 	.word	0x080004d9
 800047c:	080004d9 	.word	0x080004d9
 8000480:	080004d9 	.word	0x080004d9
	case 0:
		NVIC_IRQ6_EXTI0_DISABLE;
 8000484:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <NVIC_disableEXTI+0xc4>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a19      	ldr	r2, [pc, #100]	; (80004f0 <NVIC_disableEXTI+0xc4>)
 800048a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800048e:	6013      	str	r3, [r2, #0]
		break;
 8000490:	e029      	b.n	80004e6 <NVIC_disableEXTI+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_DISABLE;
 8000492:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <NVIC_disableEXTI+0xc4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a16      	ldr	r2, [pc, #88]	; (80004f0 <NVIC_disableEXTI+0xc4>)
 8000498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800049c:	6013      	str	r3, [r2, #0]
		break;
 800049e:	e022      	b.n	80004e6 <NVIC_disableEXTI+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_DISABLE;
 80004a0:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <NVIC_disableEXTI+0xc4>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a12      	ldr	r2, [pc, #72]	; (80004f0 <NVIC_disableEXTI+0xc4>)
 80004a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004aa:	6013      	str	r3, [r2, #0]
		break;
 80004ac:	e01b      	b.n	80004e6 <NVIC_disableEXTI+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_DISABLE;
 80004ae:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <NVIC_disableEXTI+0xc4>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a0f      	ldr	r2, [pc, #60]	; (80004f0 <NVIC_disableEXTI+0xc4>)
 80004b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004b8:	6013      	str	r3, [r2, #0]
		break;
 80004ba:	e014      	b.n	80004e6 <NVIC_disableEXTI+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_DISABLE;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <NVIC_disableEXTI+0xc4>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0b      	ldr	r2, [pc, #44]	; (80004f0 <NVIC_disableEXTI+0xc4>)
 80004c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004c6:	6013      	str	r3, [r2, #0]
		break;
 80004c8:	e00d      	b.n	80004e6 <NVIC_disableEXTI+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_DISABLE;
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <NVIC_disableEXTI+0xc4>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <NVIC_disableEXTI+0xc4>)
 80004d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004d4:	6013      	str	r3, [r2, #0]
		break;
 80004d6:	e006      	b.n	80004e6 <NVIC_disableEXTI+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_DISABLE;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <NVIC_disableEXTI+0xc8>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a05      	ldr	r2, [pc, #20]	; (80004f4 <NVIC_disableEXTI+0xc8>)
 80004de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e2:	6013      	str	r3, [r2, #0]
		break;
 80004e4:	bf00      	nop
	}
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	e000e180 	.word	0xe000e180
 80004f4:	e000e184 	.word	0xe000e184

080004f8 <MCAL_EXTI_init>:

void MCAL_EXTI_init(EXTI_PinConfig *EXTI_config) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	// AFIO_EXTICRx register index
	uint8 EXTICR_index = EXTI_config->EXTI_pin.EXTI_inputLine / 4;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	089b      	lsrs	r3, r3, #2
 8000506:	b29b      	uxth	r3, r3
 8000508:	73fb      	strb	r3, [r7, #15]
	// Shift value for register AFIO_EXTICRx
	uint8 EXTICR_shift = (EXTI_config->EXTI_pin.EXTI_inputLine % 4) * 4;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	f003 0303 	and.w	r3, r3, #3
 8000514:	b2db      	uxtb	r3, r3
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	73bb      	strb	r3, [r7, #14]

	// Configure pin as input floating
	GPIO_PinConfig pinConfig = { GPIO_MODE_IN_FLOATING,
 800051a:	2300      	movs	r3, #0
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	2301      	movs	r3, #1
 8000520:	813b      	strh	r3, [r7, #8]
			EXTI_config->EXTI_pin.pinNumber };
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	891b      	ldrh	r3, [r3, #8]
	GPIO_PinConfig pinConfig = { GPIO_MODE_IN_FLOATING,
 8000526:	b2db      	uxtb	r3, r3
 8000528:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_init(EXTI_config->EXTI_pin.GPIO_port, &pinConfig);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	f107 0208 	add.w	r2, r7, #8
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f9df 	bl	80008f8 <MCAL_GPIO_init>

	// Clear and set value
	AFIO->EXTICR[EXTICR_index] &= ~(0xF << EXTICR_shift);
 800053a:	4a60      	ldr	r2, [pc, #384]	; (80006bc <MCAL_EXTI_init+0x1c4>)
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	3302      	adds	r3, #2
 8000540:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000544:	7bbb      	ldrb	r3, [r7, #14]
 8000546:	210f      	movs	r1, #15
 8000548:	fa01 f303 	lsl.w	r3, r1, r3
 800054c:	43db      	mvns	r3, r3
 800054e:	4618      	mov	r0, r3
 8000550:	495a      	ldr	r1, [pc, #360]	; (80006bc <MCAL_EXTI_init+0x1c4>)
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	4002      	ands	r2, r0
 8000556:	3302      	adds	r3, #2
 8000558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[EXTICR_index] |=
 800055c:	4a57      	ldr	r2, [pc, #348]	; (80006bc <MCAL_EXTI_init+0x1c4>)
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	3302      	adds	r3, #2
 8000562:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
			(AFIO_EXTI_MAPPING(EXTI_config->EXTI_pin.GPIO_port) << EXTICR_shift);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	4955      	ldr	r1, [pc, #340]	; (80006c0 <MCAL_EXTI_init+0x1c8>)
 800056c:	428b      	cmp	r3, r1
 800056e:	d016      	beq.n	800059e <MCAL_EXTI_init+0xa6>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	4953      	ldr	r1, [pc, #332]	; (80006c4 <MCAL_EXTI_init+0x1cc>)
 8000576:	428b      	cmp	r3, r1
 8000578:	d00f      	beq.n	800059a <MCAL_EXTI_init+0xa2>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	4952      	ldr	r1, [pc, #328]	; (80006c8 <MCAL_EXTI_init+0x1d0>)
 8000580:	428b      	cmp	r3, r1
 8000582:	d008      	beq.n	8000596 <MCAL_EXTI_init+0x9e>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	4950      	ldr	r1, [pc, #320]	; (80006cc <MCAL_EXTI_init+0x1d4>)
 800058a:	428b      	cmp	r3, r1
 800058c:	d101      	bne.n	8000592 <MCAL_EXTI_init+0x9a>
 800058e:	2303      	movs	r3, #3
 8000590:	e006      	b.n	80005a0 <MCAL_EXTI_init+0xa8>
 8000592:	2300      	movs	r3, #0
 8000594:	e004      	b.n	80005a0 <MCAL_EXTI_init+0xa8>
 8000596:	2302      	movs	r3, #2
 8000598:	e002      	b.n	80005a0 <MCAL_EXTI_init+0xa8>
 800059a:	2301      	movs	r3, #1
 800059c:	e000      	b.n	80005a0 <MCAL_EXTI_init+0xa8>
 800059e:	2300      	movs	r3, #0
 80005a0:	7bb9      	ldrb	r1, [r7, #14]
 80005a2:	408b      	lsls	r3, r1
 80005a4:	4618      	mov	r0, r3
	AFIO->EXTICR[EXTICR_index] |=
 80005a6:	4945      	ldr	r1, [pc, #276]	; (80006bc <MCAL_EXTI_init+0x1c4>)
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	4302      	orrs	r2, r0
 80005ac:	3302      	adds	r3, #2
 80005ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// Reset triggers
	EXTI->FTSR &= ~(0x1 << EXTI_config->EXTI_pin.EXTI_inputLine);
 80005b2:	4b47      	ldr	r3, [pc, #284]	; (80006d0 <MCAL_EXTI_init+0x1d8>)
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	8812      	ldrh	r2, [r2, #0]
 80005ba:	4611      	mov	r1, r2
 80005bc:	2201      	movs	r2, #1
 80005be:	408a      	lsls	r2, r1
 80005c0:	43d2      	mvns	r2, r2
 80005c2:	4611      	mov	r1, r2
 80005c4:	4a42      	ldr	r2, [pc, #264]	; (80006d0 <MCAL_EXTI_init+0x1d8>)
 80005c6:	400b      	ands	r3, r1
 80005c8:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(0x1 << EXTI_config->EXTI_pin.EXTI_inputLine);
 80005ca:	4b41      	ldr	r3, [pc, #260]	; (80006d0 <MCAL_EXTI_init+0x1d8>)
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	8812      	ldrh	r2, [r2, #0]
 80005d2:	4611      	mov	r1, r2
 80005d4:	2201      	movs	r2, #1
 80005d6:	408a      	lsls	r2, r1
 80005d8:	43d2      	mvns	r2, r2
 80005da:	4611      	mov	r1, r2
 80005dc:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <MCAL_EXTI_init+0x1d8>)
 80005de:	400b      	ands	r3, r1
 80005e0:	6093      	str	r3, [r2, #8]

	// Set triggers
	if (EXTI_config->triggerCase == EXTI_TRIGGER_RISING) {
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	7b1b      	ldrb	r3, [r3, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d10b      	bne.n	8000602 <MCAL_EXTI_init+0x10a>
		EXTI->RTSR |= (1 << EXTI_config->EXTI_pin.EXTI_inputLine);
 80005ea:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <MCAL_EXTI_init+0x1d8>)
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	8812      	ldrh	r2, [r2, #0]
 80005f2:	4611      	mov	r1, r2
 80005f4:	2201      	movs	r2, #1
 80005f6:	408a      	lsls	r2, r1
 80005f8:	4611      	mov	r1, r2
 80005fa:	4a35      	ldr	r2, [pc, #212]	; (80006d0 <MCAL_EXTI_init+0x1d8>)
 80005fc:	430b      	orrs	r3, r1
 80005fe:	6093      	str	r3, [r2, #8]
 8000600:	e029      	b.n	8000656 <MCAL_EXTI_init+0x15e>

	} else if (EXTI_config->triggerCase == EXTI_TRIGGER_FALLING) {
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	7b1b      	ldrb	r3, [r3, #12]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d10b      	bne.n	8000622 <MCAL_EXTI_init+0x12a>
		EXTI->FTSR |= (1 << EXTI_config->EXTI_pin.EXTI_inputLine);
 800060a:	4b31      	ldr	r3, [pc, #196]	; (80006d0 <MCAL_EXTI_init+0x1d8>)
 800060c:	68db      	ldr	r3, [r3, #12]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	8812      	ldrh	r2, [r2, #0]
 8000612:	4611      	mov	r1, r2
 8000614:	2201      	movs	r2, #1
 8000616:	408a      	lsls	r2, r1
 8000618:	4611      	mov	r1, r2
 800061a:	4a2d      	ldr	r2, [pc, #180]	; (80006d0 <MCAL_EXTI_init+0x1d8>)
 800061c:	430b      	orrs	r3, r1
 800061e:	60d3      	str	r3, [r2, #12]
 8000620:	e019      	b.n	8000656 <MCAL_EXTI_init+0x15e>

	} else if (EXTI_config->triggerCase == EXTI_TRIGGER_BOTH_EDGES) {
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	7b1b      	ldrb	r3, [r3, #12]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d115      	bne.n	8000656 <MCAL_EXTI_init+0x15e>
		EXTI->RTSR |= (1 << EXTI_config->EXTI_pin.EXTI_inputLine);
 800062a:	4b29      	ldr	r3, [pc, #164]	; (80006d0 <MCAL_EXTI_init+0x1d8>)
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	8812      	ldrh	r2, [r2, #0]
 8000632:	4611      	mov	r1, r2
 8000634:	2201      	movs	r2, #1
 8000636:	408a      	lsls	r2, r1
 8000638:	4611      	mov	r1, r2
 800063a:	4a25      	ldr	r2, [pc, #148]	; (80006d0 <MCAL_EXTI_init+0x1d8>)
 800063c:	430b      	orrs	r3, r1
 800063e:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_config->EXTI_pin.EXTI_inputLine);
 8000640:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <MCAL_EXTI_init+0x1d8>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	8812      	ldrh	r2, [r2, #0]
 8000648:	4611      	mov	r1, r2
 800064a:	2201      	movs	r2, #1
 800064c:	408a      	lsls	r2, r1
 800064e:	4611      	mov	r1, r2
 8000650:	4a1f      	ldr	r2, [pc, #124]	; (80006d0 <MCAL_EXTI_init+0x1d8>)
 8000652:	430b      	orrs	r3, r1
 8000654:	60d3      	str	r3, [r2, #12]
	}

	// Set callback
	GP_IRQ_callBack[EXTI_config->EXTI_pin.EXTI_inputLine] =
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	4619      	mov	r1, r3
			EXTI_config->P_IRQ_callBack;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	691b      	ldr	r3, [r3, #16]
	GP_IRQ_callBack[EXTI_config->EXTI_pin.EXTI_inputLine] =
 8000660:	4a1c      	ldr	r2, [pc, #112]	; (80006d4 <MCAL_EXTI_init+0x1dc>)
 8000662:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	// Enable or disable NVIC EXTI
	if (EXTI_config->IRQ_EN == EXTI_IRQ_ENABLE) {
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7b5b      	ldrb	r3, [r3, #13]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d110      	bne.n	8000690 <MCAL_EXTI_init+0x198>
		EXTI->IMR |= (1 << EXTI_config->EXTI_pin.EXTI_inputLine);
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <MCAL_EXTI_init+0x1d8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	8812      	ldrh	r2, [r2, #0]
 8000676:	4611      	mov	r1, r2
 8000678:	2201      	movs	r2, #1
 800067a:	408a      	lsls	r2, r1
 800067c:	4611      	mov	r1, r2
 800067e:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <MCAL_EXTI_init+0x1d8>)
 8000680:	430b      	orrs	r3, r1
 8000682:	6013      	str	r3, [r2, #0]
		NVIC_enableEXTI(EXTI_config->EXTI_pin.EXTI_inputLine);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fe69 	bl	8000360 <NVIC_enableEXTI>
	} else {
		EXTI->IMR &= ~(1 << EXTI_config->EXTI_pin.EXTI_inputLine);
		NVIC_disableEXTI(EXTI_config->EXTI_pin.EXTI_inputLine);
	}

}
 800068e:	e010      	b.n	80006b2 <MCAL_EXTI_init+0x1ba>
		EXTI->IMR &= ~(1 << EXTI_config->EXTI_pin.EXTI_inputLine);
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MCAL_EXTI_init+0x1d8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	8812      	ldrh	r2, [r2, #0]
 8000698:	4611      	mov	r1, r2
 800069a:	2201      	movs	r2, #1
 800069c:	408a      	lsls	r2, r1
 800069e:	43d2      	mvns	r2, r2
 80006a0:	4611      	mov	r1, r2
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <MCAL_EXTI_init+0x1d8>)
 80006a4:	400b      	ands	r3, r1
 80006a6:	6013      	str	r3, [r2, #0]
		NVIC_disableEXTI(EXTI_config->EXTI_pin.EXTI_inputLine);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff febd 	bl	800042c <NVIC_disableEXTI>
}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40010000 	.word	0x40010000
 80006c0:	40010800 	.word	0x40010800
 80006c4:	40010c00 	.word	0x40010c00
 80006c8:	40011000 	.word	0x40011000
 80006cc:	40011400 	.word	0x40011400
 80006d0:	40010400 	.word	0x40010400
 80006d4:	2000001c 	.word	0x2000001c

080006d8 <EXTI0_IRQHandler>:
	NVIC_IRQ10_EXTI4_DISABLE;
	NVIC_IRQ23_EXTI5_9_DISABLE;
	NVIC_IRQ40_EXTI10_15_DISABLE;
}

void EXTI0_IRQHandler(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1 << 0;
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <EXTI0_IRQHandler+0x1c>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <EXTI0_IRQHandler+0x1c>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_callBack[0]();
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <EXTI0_IRQHandler+0x20>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4798      	blx	r3
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40010400 	.word	0x40010400
 80006f8:	2000001c 	.word	0x2000001c

080006fc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <EXTI1_IRQHandler+0x1c>)
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <EXTI1_IRQHandler+0x1c>)
 8000706:	f043 0302 	orr.w	r3, r3, #2
 800070a:	6153      	str	r3, [r2, #20]

	GP_IRQ_callBack[1]();
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <EXTI1_IRQHandler+0x20>)
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	4798      	blx	r3
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40010400 	.word	0x40010400
 800071c:	2000001c 	.word	0x2000001c

08000720 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <EXTI2_IRQHandler+0x1c>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <EXTI2_IRQHandler+0x1c>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6153      	str	r3, [r2, #20]

	GP_IRQ_callBack[2]();
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <EXTI2_IRQHandler+0x20>)
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	4798      	blx	r3
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40010400 	.word	0x40010400
 8000740:	2000001c 	.word	0x2000001c

08000744 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <EXTI3_IRQHandler+0x1c>)
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	4a04      	ldr	r2, [pc, #16]	; (8000760 <EXTI3_IRQHandler+0x1c>)
 800074e:	f043 0308 	orr.w	r3, r3, #8
 8000752:	6153      	str	r3, [r2, #20]

	GP_IRQ_callBack[3]();
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <EXTI3_IRQHandler+0x20>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	4798      	blx	r3
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40010400 	.word	0x40010400
 8000764:	2000001c 	.word	0x2000001c

08000768 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <EXTI4_IRQHandler+0x1c>)
 800076e:	695b      	ldr	r3, [r3, #20]
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <EXTI4_IRQHandler+0x1c>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[4]();
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <EXTI4_IRQHandler+0x20>)
 800077a:	691b      	ldr	r3, [r3, #16]
 800077c:	4798      	blx	r3
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40010400 	.word	0x40010400
 8000788:	2000001c 	.word	0x2000001c

0800078c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1 << 5) {
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <EXTI9_5_IRQHandler+0xa0>)
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	f003 0320 	and.w	r3, r3, #32
 8000798:	2b00      	cmp	r3, #0
 800079a:	d008      	beq.n	80007ae <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= (1 << 5);
 800079c:	4b23      	ldr	r3, [pc, #140]	; (800082c <EXTI9_5_IRQHandler+0xa0>)
 800079e:	695b      	ldr	r3, [r3, #20]
 80007a0:	4a22      	ldr	r2, [pc, #136]	; (800082c <EXTI9_5_IRQHandler+0xa0>)
 80007a2:	f043 0320 	orr.w	r3, r3, #32
 80007a6:	6153      	str	r3, [r2, #20]
		GP_IRQ_callBack[5]();
 80007a8:	4b21      	ldr	r3, [pc, #132]	; (8000830 <EXTI9_5_IRQHandler+0xa4>)
 80007aa:	695b      	ldr	r3, [r3, #20]
 80007ac:	4798      	blx	r3
	}
	if (EXTI->PR & 1 << 6) {
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <EXTI9_5_IRQHandler+0xa0>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d008      	beq.n	80007cc <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (1 << 6);
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <EXTI9_5_IRQHandler+0xa0>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a1b      	ldr	r2, [pc, #108]	; (800082c <EXTI9_5_IRQHandler+0xa0>)
 80007c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c4:	6153      	str	r3, [r2, #20]
		GP_IRQ_callBack[6]();
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <EXTI9_5_IRQHandler+0xa4>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4798      	blx	r3
	}
	if (EXTI->PR & 1 << 7) {
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <EXTI9_5_IRQHandler+0xa0>)
 80007ce:	695b      	ldr	r3, [r3, #20]
 80007d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d008      	beq.n	80007ea <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (1 << 7);
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <EXTI9_5_IRQHandler+0xa0>)
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	4a13      	ldr	r2, [pc, #76]	; (800082c <EXTI9_5_IRQHandler+0xa0>)
 80007de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e2:	6153      	str	r3, [r2, #20]
		GP_IRQ_callBack[7]();
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <EXTI9_5_IRQHandler+0xa4>)
 80007e6:	69db      	ldr	r3, [r3, #28]
 80007e8:	4798      	blx	r3
	}
	if (EXTI->PR & 1 << 8) {
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <EXTI9_5_IRQHandler+0xa0>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d008      	beq.n	8000808 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (1 << 8);
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <EXTI9_5_IRQHandler+0xa0>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a0c      	ldr	r2, [pc, #48]	; (800082c <EXTI9_5_IRQHandler+0xa0>)
 80007fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000800:	6153      	str	r3, [r2, #20]
		GP_IRQ_callBack[8]();
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <EXTI9_5_IRQHandler+0xa4>)
 8000804:	6a1b      	ldr	r3, [r3, #32]
 8000806:	4798      	blx	r3
	}
	if (EXTI->PR & 1 << 9) {
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <EXTI9_5_IRQHandler+0xa0>)
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (1 << 9);
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <EXTI9_5_IRQHandler+0xa0>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <EXTI9_5_IRQHandler+0xa0>)
 800081a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081e:	6153      	str	r3, [r2, #20]
		GP_IRQ_callBack[9]();
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <EXTI9_5_IRQHandler+0xa4>)
 8000822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000824:	4798      	blx	r3
	}
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40010400 	.word	0x40010400
 8000830:	2000001c 	.word	0x2000001c

08000834 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1 << 10) {
 8000838:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000840:	2b00      	cmp	r3, #0
 8000842:	d008      	beq.n	8000856 <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= (1 << 10);
 8000844:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	4a29      	ldr	r2, [pc, #164]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 800084a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800084e:	6153      	str	r3, [r2, #20]
		GP_IRQ_callBack[10]();
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <EXTI15_10_IRQHandler+0xc0>)
 8000852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000854:	4798      	blx	r3
	}
	if (EXTI->PR & 1 << 11) {
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800085e:	2b00      	cmp	r3, #0
 8000860:	d008      	beq.n	8000874 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (1 << 11);
 8000862:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	4a22      	ldr	r2, [pc, #136]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 8000868:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800086c:	6153      	str	r3, [r2, #20]
		GP_IRQ_callBack[11]();
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <EXTI15_10_IRQHandler+0xc0>)
 8000870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000872:	4798      	blx	r3
	}
	if (EXTI->PR & 1 << 12) {
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 8000876:	695b      	ldr	r3, [r3, #20]
 8000878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800087c:	2b00      	cmp	r3, #0
 800087e:	d008      	beq.n	8000892 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (1 << 12);
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	4a1a      	ldr	r2, [pc, #104]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 8000886:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800088a:	6153      	str	r3, [r2, #20]
		GP_IRQ_callBack[12]();
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <EXTI15_10_IRQHandler+0xc0>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	4798      	blx	r3
	}
	if (EXTI->PR & 1 << 13) {
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800089a:	2b00      	cmp	r3, #0
 800089c:	d008      	beq.n	80008b0 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (1 << 13);
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a13      	ldr	r2, [pc, #76]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 80008a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008a8:	6153      	str	r3, [r2, #20]
		GP_IRQ_callBack[13]();
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <EXTI15_10_IRQHandler+0xc0>)
 80008ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ae:	4798      	blx	r3
	}
	if (EXTI->PR & 1 << 14) {
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d008      	beq.n	80008ce <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (1 << 14);
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 80008c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c6:	6153      	str	r3, [r2, #20]
		GP_IRQ_callBack[14]();
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <EXTI15_10_IRQHandler+0xc0>)
 80008ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008cc:	4798      	blx	r3
	}
	if (EXTI->PR & 1 << 15) {
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d008      	beq.n	80008ec <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (1 << 15);
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <EXTI15_10_IRQHandler+0xbc>)
 80008e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e4:	6153      	str	r3, [r2, #20]
		GP_IRQ_callBack[15]();
 80008e6:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <EXTI15_10_IRQHandler+0xc0>)
 80008e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ea:	4798      	blx	r3
	}
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40010400 	.word	0x40010400
 80008f4:	2000001c 	.word	0x2000001c

080008f8 <MCAL_GPIO_init>:
#include "stm32f103c6_gpio.h"

//*****************************************************************************
// Functions Definitions
//*****************************************************************************
void MCAL_GPIO_init(GPIO_TypeDef *GPIOx, GPIO_PinConfig *pinConfig) {
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
	uint32 portConfigValue = (uint32) 0;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
	uint8 pinConfigValue = (uint8) 0;
 8000906:	2300      	movs	r3, #0
 8000908:	72fb      	strb	r3, [r7, #11]
	uint8 i = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	72bb      	strb	r3, [r7, #10]
	// Configure port
	if (pinConfig->GPIO_pinNumber == GPIO_PIN_All) {
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000916:	4293      	cmp	r3, r2
 8000918:	d15a      	bne.n	80009d0 <MCAL_GPIO_init+0xd8>
		// Reset GPIO_ODR
		MCAL_GPIO_writePort(GPIOx, LOGIC_LOW);
 800091a:	2100      	movs	r1, #0
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f000 f905 	bl	8000b2c <MCAL_GPIO_writePort>
		// Setting the 32 Bits for CRH and CRL Registers
		for (i = 0; i < 32; i += 4) {
 8000922:	2300      	movs	r3, #0
 8000924:	72bb      	strb	r3, [r7, #10]
 8000926:	e036      	b.n	8000996 <MCAL_GPIO_init+0x9e>
			// OUTPUT MODE
			if (isOutput(pinConfig)) {
 8000928:	6838      	ldr	r0, [r7, #0]
 800092a:	f000 f90d 	bl	8000b48 <isOutput>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d010      	beq.n	8000956 <MCAL_GPIO_init+0x5e>
				portConfigValue |= (((((pinConfig->GPIO_pinMode
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	789b      	ldrb	r3, [r3, #2]
						- GPIO_MODE_OFFSET) << GPIO_CRLH_CNF_SHIFT)
 8000938:	3b04      	subs	r3, #4
 800093a:	009b      	lsls	r3, r3, #2
						| pinConfig->GPIO_pinOutputSpeed) & 0x0F) << i);
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	78d2      	ldrb	r2, [r2, #3]
 8000940:	4313      	orrs	r3, r2
 8000942:	f003 020f 	and.w	r2, r3, #15
 8000946:	7abb      	ldrb	r3, [r7, #10]
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	461a      	mov	r2, r3
				portConfigValue |= (((((pinConfig->GPIO_pinMode
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4313      	orrs	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	e01c      	b.n	8000990 <MCAL_GPIO_init+0x98>
			}
			// INPUT MODE
			else {
				if (pinConfig->GPIO_pinMode == GPIO_MODE_IN_ANALOG
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	789b      	ldrb	r3, [r3, #2]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d003      	beq.n	8000966 <MCAL_GPIO_init+0x6e>
						|| pinConfig->GPIO_pinMode == GPIO_MODE_IN_FLOATING) {
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	789b      	ldrb	r3, [r3, #2]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d10c      	bne.n	8000980 <MCAL_GPIO_init+0x88>
					portConfigValue |= ((((pinConfig->GPIO_pinMode
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	789b      	ldrb	r3, [r3, #2]
							<< GPIO_CRLH_CNF_SHIFT) | 0x00) & 0x0F) << i);
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	f003 020f 	and.w	r2, r3, #15
 8000970:	7abb      	ldrb	r3, [r7, #10]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	461a      	mov	r2, r3
					portConfigValue |= ((((pinConfig->GPIO_pinMode
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	4313      	orrs	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	e007      	b.n	8000990 <MCAL_GPIO_init+0x98>
				} else {
					portConfigValue |= ((((GPIO_MODE_IN_PULL_UP
							<< GPIO_CRLH_CNF_SHIFT) | 0x00) & 0x0F) << i);
 8000980:	7abb      	ldrb	r3, [r7, #10]
 8000982:	2208      	movs	r2, #8
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	461a      	mov	r2, r3
					portConfigValue |= ((((GPIO_MODE_IN_PULL_UP
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	4313      	orrs	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < 32; i += 4) {
 8000990:	7abb      	ldrb	r3, [r7, #10]
 8000992:	3304      	adds	r3, #4
 8000994:	72bb      	strb	r3, [r7, #10]
 8000996:	7abb      	ldrb	r3, [r7, #10]
 8000998:	2b1f      	cmp	r3, #31
 800099a:	d9c5      	bls.n	8000928 <MCAL_GPIO_init+0x30>
				}
			}
		}
		// Configure the whole port using CRL and CRH
		GPIOx->CRL = portConfigValue;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	601a      	str	r2, [r3, #0]
		GPIOx->CRH = portConfigValue;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	605a      	str	r2, [r3, #4]
		// Configure input pull-up or pull-down
		// Table 20. Port bit configuration table
		// PxODR register -> 1 for pull-up, 0 for pull-down
		if (pinConfig->GPIO_pinMode == GPIO_MODE_IN_PULL_UP) {
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	789b      	ldrb	r3, [r3, #2]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d105      	bne.n	80009bc <MCAL_GPIO_init+0xc4>
			MCAL_GPIO_writePort(GPIOx, 0xFFFF);
 80009b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f000 f8b9 	bl	8000b2c <MCAL_GPIO_writePort>
			GPIOx->CRH &= ~(0xF << getCRLH_Position(pinConfig->GPIO_pinNumber));
			GPIOx->CRH |= (pinConfigValue
					<< getCRLH_Position(pinConfig->GPIO_pinNumber));
		}
	}
}
 80009ba:	e089      	b.n	8000ad0 <MCAL_GPIO_init+0x1d8>
		} else if (pinConfig->GPIO_pinMode == GPIO_MODE_IN_PULL_DOWN) {
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	789b      	ldrb	r3, [r3, #2]
 80009c0:	2b03      	cmp	r3, #3
 80009c2:	f040 8085 	bne.w	8000ad0 <MCAL_GPIO_init+0x1d8>
			MCAL_GPIO_writePort(GPIOx, LOGIC_LOW);
 80009c6:	2100      	movs	r1, #0
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f000 f8af 	bl	8000b2c <MCAL_GPIO_writePort>
}
 80009ce:	e07f      	b.n	8000ad0 <MCAL_GPIO_init+0x1d8>
		MCAL_GPIO_writePin(GPIOx, pinConfig->GPIO_pinNumber,
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	2200      	movs	r2, #0
 80009d6:	4619      	mov	r1, r3
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f889 	bl	8000af0 <MCAL_GPIO_writePin>
		if (isOutput(pinConfig)) {
 80009de:	6838      	ldr	r0, [r7, #0]
 80009e0:	f000 f8b2 	bl	8000b48 <isOutput>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00e      	beq.n	8000a08 <MCAL_GPIO_init+0x110>
			pinConfigValue = ((((pinConfig->GPIO_pinMode - GPIO_MODE_OFFSET)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	789b      	ldrb	r3, [r3, #2]
 80009ee:	3b04      	subs	r3, #4
					<< GPIO_CRLH_CNF_SHIFT) | pinConfig->GPIO_pinOutputSpeed)
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	b25a      	sxtb	r2, r3
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	78db      	ldrb	r3, [r3, #3]
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	4313      	orrs	r3, r2
 80009fc:	b25b      	sxtb	r3, r3
					& 0x0F);
 80009fe:	b2db      	uxtb	r3, r3
			pinConfigValue = ((((pinConfig->GPIO_pinMode - GPIO_MODE_OFFSET)
 8000a00:	f003 030f 	and.w	r3, r3, #15
 8000a04:	72fb      	strb	r3, [r7, #11]
 8000a06:	e024      	b.n	8000a52 <MCAL_GPIO_init+0x15a>
			if (pinConfig->GPIO_pinMode == GPIO_MODE_IN_ANALOG
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	789b      	ldrb	r3, [r3, #2]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d003      	beq.n	8000a18 <MCAL_GPIO_init+0x120>
					|| pinConfig->GPIO_pinMode == GPIO_MODE_IN_FLOATING) {
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	789b      	ldrb	r3, [r3, #2]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d107      	bne.n	8000a28 <MCAL_GPIO_init+0x130>
				pinConfigValue = (((pinConfig->GPIO_pinMode
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	789b      	ldrb	r3, [r3, #2]
						<< GPIO_CRLH_CNF_SHIFT) | 0x00) & 0x0F);
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	b2db      	uxtb	r3, r3
				pinConfigValue = (((pinConfig->GPIO_pinMode
 8000a20:	f003 030f 	and.w	r3, r3, #15
 8000a24:	72fb      	strb	r3, [r7, #11]
 8000a26:	e014      	b.n	8000a52 <MCAL_GPIO_init+0x15a>
				pinConfigValue = (((GPIO_MODE_IN_PULL_UP << GPIO_CRLH_CNF_SHIFT)
 8000a28:	2308      	movs	r3, #8
 8000a2a:	72fb      	strb	r3, [r7, #11]
				if (pinConfig->GPIO_pinMode == GPIO_MODE_IN_PULL_DOWN) {
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	789b      	ldrb	r3, [r3, #2]
 8000a30:	2b03      	cmp	r3, #3
 8000a32:	d107      	bne.n	8000a44 <MCAL_GPIO_init+0x14c>
					MCAL_GPIO_writePin(GPIOx, pinConfig->GPIO_pinNumber,
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f000 f857 	bl	8000af0 <MCAL_GPIO_writePin>
 8000a42:	e006      	b.n	8000a52 <MCAL_GPIO_init+0x15a>
					MCAL_GPIO_writePin(GPIOx, pinConfig->GPIO_pinNumber,
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f000 f84f 	bl	8000af0 <MCAL_GPIO_writePin>
		if (pinConfig->GPIO_pinNumber <= GPIO_PIN_7) {
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	2b80      	cmp	r3, #128	; 0x80
 8000a58:	d81d      	bhi.n	8000a96 <MCAL_GPIO_init+0x19e>
			GPIOx->CRL &= ~(0xF << getCRLH_Position(pinConfig->GPIO_pinNumber));
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f88e 	bl	8000b80 <getCRLH_Position>
 8000a64:	4603      	mov	r3, r0
 8000a66:	461a      	mov	r2, r3
 8000a68:	230f      	movs	r3, #15
 8000a6a:	4093      	lsls	r3, r2
 8000a6c:	43da      	mvns	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	401a      	ands	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	601a      	str	r2, [r3, #0]
					<< getCRLH_Position(pinConfig->GPIO_pinNumber));
 8000a78:	7afc      	ldrb	r4, [r7, #11]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f87e 	bl	8000b80 <getCRLH_Position>
 8000a84:	4603      	mov	r3, r0
 8000a86:	fa04 f203 	lsl.w	r2, r4, r3
			GPIOx->CRL |= (pinConfigValue
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	601a      	str	r2, [r3, #0]
}
 8000a94:	e01c      	b.n	8000ad0 <MCAL_GPIO_init+0x1d8>
			GPIOx->CRH &= ~(0xF << getCRLH_Position(pinConfig->GPIO_pinNumber));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f870 	bl	8000b80 <getCRLH_Position>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	4093      	lsls	r3, r2
 8000aa8:	43da      	mvns	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	605a      	str	r2, [r3, #4]
					<< getCRLH_Position(pinConfig->GPIO_pinNumber));
 8000ab4:	7afc      	ldrb	r4, [r7, #11]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 f860 	bl	8000b80 <getCRLH_Position>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	fa04 f203 	lsl.w	r2, r4, r3
			GPIOx->CRH |= (pinConfigValue
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	431a      	orrs	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	605a      	str	r2, [r3, #4]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd90      	pop	{r4, r7, pc}

08000ad8 <MCAL_GPIO_readPort>:
		return LOGIC_HIGH;
	}
	return LOGIC_LOW;
}

uint16 MCAL_GPIO_readPort(GPIO_TypeDef *GPIOx) {
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	return (uint16) (GPIOx->IDR & 0xFFFF);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	b29b      	uxth	r3, r3
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <MCAL_GPIO_writePin>:

void MCAL_GPIO_writePin(GPIO_TypeDef *GPIOx, uint16 pinNumber, uint8 value) {
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	807b      	strh	r3, [r7, #2]
 8000afc:	4613      	mov	r3, r2
 8000afe:	707b      	strb	r3, [r7, #1]
	if (value == LOGIC_LOW) {
 8000b00:	787b      	ldrb	r3, [r7, #1]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d107      	bne.n	8000b16 <MCAL_GPIO_writePin+0x26>
		GPIOx->ODR &= ~pinNumber;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	887a      	ldrh	r2, [r7, #2]
 8000b0c:	43d2      	mvns	r2, r2
 8000b0e:	401a      	ands	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	60da      	str	r2, [r3, #12]
	} else {
		GPIOx->ODR |= pinNumber;
	}
}
 8000b14:	e005      	b.n	8000b22 <MCAL_GPIO_writePin+0x32>
		GPIOx->ODR |= pinNumber;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60da      	str	r2, [r3, #12]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <MCAL_GPIO_writePort>:
void MCAL_GPIO_writePort(GPIO_TypeDef *GPIOx, uint16 value) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32) value;
 8000b38:	887a      	ldrh	r2, [r7, #2]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	60da      	str	r2, [r3, #12]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <isOutput>:
	} else {
		return ERROR;
	}
}

int isOutput(GPIO_PinConfig *pinConfig) {
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	if (pinConfig->GPIO_pinMode == GPIO_MODE_OUT_PUSH_PULL
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	789b      	ldrb	r3, [r3, #2]
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	d00b      	beq.n	8000b70 <isOutput+0x28>
			|| pinConfig->GPIO_pinMode == GPIO_MODE_OUT_OPEN_DRAIN
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	789b      	ldrb	r3, [r3, #2]
 8000b5c:	2b05      	cmp	r3, #5
 8000b5e:	d007      	beq.n	8000b70 <isOutput+0x28>
			|| pinConfig->GPIO_pinMode == GPIO_MODE_OUT_AF_PUSH_PULL
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	789b      	ldrb	r3, [r3, #2]
 8000b64:	2b06      	cmp	r3, #6
 8000b66:	d003      	beq.n	8000b70 <isOutput+0x28>
			|| pinConfig->GPIO_pinMode == GPIO_MODE_OUT_AF_OPEN_DRAIN) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	789b      	ldrb	r3, [r3, #2]
 8000b6c:	2b07      	cmp	r3, #7
 8000b6e:	d101      	bne.n	8000b74 <isOutput+0x2c>
		return 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e000      	b.n	8000b76 <isOutput+0x2e>
	} else {
		return 0;
 8000b74:	2300      	movs	r3, #0
	}
	return 0;
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <getCRLH_Position>:

uint8 getCRLH_Position(uint16 PinNumber) {
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber) {
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b90:	f000 80a5 	beq.w	8000cde <getCRLH_Position+0x15e>
 8000b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b98:	f300 80a3 	bgt.w	8000ce2 <getCRLH_Position+0x162>
 8000b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ba0:	f000 809b 	beq.w	8000cda <getCRLH_Position+0x15a>
 8000ba4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ba8:	f300 809b 	bgt.w	8000ce2 <getCRLH_Position+0x162>
 8000bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bb0:	f000 8091 	beq.w	8000cd6 <getCRLH_Position+0x156>
 8000bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bb8:	f300 8093 	bgt.w	8000ce2 <getCRLH_Position+0x162>
 8000bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bc0:	f000 8087 	beq.w	8000cd2 <getCRLH_Position+0x152>
 8000bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bc8:	f300 808b 	bgt.w	8000ce2 <getCRLH_Position+0x162>
 8000bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bd0:	d07d      	beq.n	8000cce <getCRLH_Position+0x14e>
 8000bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bd6:	f300 8084 	bgt.w	8000ce2 <getCRLH_Position+0x162>
 8000bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bde:	d074      	beq.n	8000cca <getCRLH_Position+0x14a>
 8000be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000be4:	dc7d      	bgt.n	8000ce2 <getCRLH_Position+0x162>
 8000be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bea:	d06c      	beq.n	8000cc6 <getCRLH_Position+0x146>
 8000bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bf0:	dc77      	bgt.n	8000ce2 <getCRLH_Position+0x162>
 8000bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bf6:	d064      	beq.n	8000cc2 <getCRLH_Position+0x142>
 8000bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bfc:	dc71      	bgt.n	8000ce2 <getCRLH_Position+0x162>
 8000bfe:	2b80      	cmp	r3, #128	; 0x80
 8000c00:	d05d      	beq.n	8000cbe <getCRLH_Position+0x13e>
 8000c02:	2b80      	cmp	r3, #128	; 0x80
 8000c04:	dc6d      	bgt.n	8000ce2 <getCRLH_Position+0x162>
 8000c06:	2b20      	cmp	r3, #32
 8000c08:	dc48      	bgt.n	8000c9c <getCRLH_Position+0x11c>
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	dd69      	ble.n	8000ce2 <getCRLH_Position+0x162>
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	2b1f      	cmp	r3, #31
 8000c12:	d866      	bhi.n	8000ce2 <getCRLH_Position+0x162>
 8000c14:	a201      	add	r2, pc, #4	; (adr r2, 8000c1c <getCRLH_Position+0x9c>)
 8000c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1a:	bf00      	nop
 8000c1c:	08000ca3 	.word	0x08000ca3
 8000c20:	08000ca7 	.word	0x08000ca7
 8000c24:	08000ce3 	.word	0x08000ce3
 8000c28:	08000cab 	.word	0x08000cab
 8000c2c:	08000ce3 	.word	0x08000ce3
 8000c30:	08000ce3 	.word	0x08000ce3
 8000c34:	08000ce3 	.word	0x08000ce3
 8000c38:	08000caf 	.word	0x08000caf
 8000c3c:	08000ce3 	.word	0x08000ce3
 8000c40:	08000ce3 	.word	0x08000ce3
 8000c44:	08000ce3 	.word	0x08000ce3
 8000c48:	08000ce3 	.word	0x08000ce3
 8000c4c:	08000ce3 	.word	0x08000ce3
 8000c50:	08000ce3 	.word	0x08000ce3
 8000c54:	08000ce3 	.word	0x08000ce3
 8000c58:	08000cb3 	.word	0x08000cb3
 8000c5c:	08000ce3 	.word	0x08000ce3
 8000c60:	08000ce3 	.word	0x08000ce3
 8000c64:	08000ce3 	.word	0x08000ce3
 8000c68:	08000ce3 	.word	0x08000ce3
 8000c6c:	08000ce3 	.word	0x08000ce3
 8000c70:	08000ce3 	.word	0x08000ce3
 8000c74:	08000ce3 	.word	0x08000ce3
 8000c78:	08000ce3 	.word	0x08000ce3
 8000c7c:	08000ce3 	.word	0x08000ce3
 8000c80:	08000ce3 	.word	0x08000ce3
 8000c84:	08000ce3 	.word	0x08000ce3
 8000c88:	08000ce3 	.word	0x08000ce3
 8000c8c:	08000ce3 	.word	0x08000ce3
 8000c90:	08000ce3 	.word	0x08000ce3
 8000c94:	08000ce3 	.word	0x08000ce3
 8000c98:	08000cb7 	.word	0x08000cb7
 8000c9c:	2b40      	cmp	r3, #64	; 0x40
 8000c9e:	d00c      	beq.n	8000cba <getCRLH_Position+0x13a>
 8000ca0:	e01f      	b.n	8000ce2 <getCRLH_Position+0x162>
	case GPIO_PIN_0:
		return 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e01e      	b.n	8000ce4 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_1:
		return 4;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	e01c      	b.n	8000ce4 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_2:
		return 8;
 8000caa:	2308      	movs	r3, #8
 8000cac:	e01a      	b.n	8000ce4 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_3:
		return 12;
 8000cae:	230c      	movs	r3, #12
 8000cb0:	e018      	b.n	8000ce4 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_4:
		return 16;
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	e016      	b.n	8000ce4 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_5:
		return 20;
 8000cb6:	2314      	movs	r3, #20
 8000cb8:	e014      	b.n	8000ce4 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_6:
		return 24;
 8000cba:	2318      	movs	r3, #24
 8000cbc:	e012      	b.n	8000ce4 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_7:
		return 28;
 8000cbe:	231c      	movs	r3, #28
 8000cc0:	e010      	b.n	8000ce4 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_8:
		return 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e00e      	b.n	8000ce4 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_9:
		return 4;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	e00c      	b.n	8000ce4 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_10:
		return 8;
 8000cca:	2308      	movs	r3, #8
 8000ccc:	e00a      	b.n	8000ce4 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_11:
		return 12;
 8000cce:	230c      	movs	r3, #12
 8000cd0:	e008      	b.n	8000ce4 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_12:
		return 16;
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	e006      	b.n	8000ce4 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_13:
		return 20;
 8000cd6:	2314      	movs	r3, #20
 8000cd8:	e004      	b.n	8000ce4 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_14:
		return 24;
 8000cda:	2318      	movs	r3, #24
 8000cdc:	e002      	b.n	8000ce4 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_15:
		return 28;
 8000cde:	231c      	movs	r3, #28
 8000ce0:	e000      	b.n	8000ce4 <getCRLH_Position+0x164>
		break;
	}
	return 0;
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <EXTI9_callback>:
#include "stm32f103c6.h"
#include "stm32f103c6_exti.h"
#include "lcd.h"

void EXTI9_callback(void){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	LCD_displayString("Hello IRQ EXTI9");
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <EXTI9_callback+0x10>)
 8000cf6:	f7ff faed 	bl	80002d4 <LCD_displayString>
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	08000e24 	.word	0x08000e24

08000d04 <main>:

int main(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <main+0x5c>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <main+0x5c>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <main+0x5c>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <main+0x5c>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <main+0x5c>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <main+0x5c>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6193      	str	r3, [r2, #24]

	LCD_init();
 8000d2e:	f7ff fa1f 	bl	8000170 <LCD_init>
	LCD_clearScreen();
 8000d32:	f7ff faeb 	bl	800030c <LCD_clearScreen>

	EXTI_PinConfig PB1 = { EXTI9PB9, EXTI_TRIGGER_FALLING, EXTI_IRQ_ENABLE, EXTI9_callback };
 8000d36:	2309      	movs	r3, #9
 8000d38:	81bb      	strh	r3, [r7, #12]
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <main+0x60>)
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d42:	82bb      	strh	r3, [r7, #20]
 8000d44:	2317      	movs	r3, #23
 8000d46:	75bb      	strb	r3, [r7, #22]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	763b      	strb	r3, [r7, #24]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	767b      	strb	r3, [r7, #25]
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <main+0x64>)
 8000d52:	61fb      	str	r3, [r7, #28]
	MCAL_EXTI_init(&PB1);
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fbcd 	bl	80004f8 <MCAL_EXTI_init>

	for (;;) {
 8000d5e:	e7fe      	b.n	8000d5e <main+0x5a>
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010c00 	.word	0x40010c00
 8000d68:	08000cf1 	.word	0x08000cf1

08000d6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d6c:	480d      	ldr	r0, [pc, #52]	; (8000da4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d6e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d70:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d76:	490d      	ldr	r1, [pc, #52]	; (8000dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <LoopForever+0xe>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	; (8000db8 <LoopForever+0x16>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d9a:	f000 f811 	bl	8000dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d9e:	f7ff ffb1 	bl	8000d04 <main>

08000da2 <LoopForever>:

LoopForever:
  b LoopForever
 8000da2:	e7fe      	b.n	8000da2 <LoopForever>
  ldr   r0, =_estack
 8000da4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000db0:	08000e3c 	.word	0x08000e3c
  ldr r2, =_sbss
 8000db4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000db8:	20000058 	.word	0x20000058

08000dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC1_2_IRQHandler>
	...

08000dc0 <__libc_init_array>:
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4d0c      	ldr	r5, [pc, #48]	; (8000df8 <__libc_init_array+0x38>)
 8000dc6:	4c0d      	ldr	r4, [pc, #52]	; (8000dfc <__libc_init_array+0x3c>)
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	10a4      	asrs	r4, r4, #2
 8000dcc:	42a6      	cmp	r6, r4
 8000dce:	d109      	bne.n	8000de4 <__libc_init_array+0x24>
 8000dd0:	f000 f81a 	bl	8000e08 <_init>
 8000dd4:	2600      	movs	r6, #0
 8000dd6:	4d0a      	ldr	r5, [pc, #40]	; (8000e00 <__libc_init_array+0x40>)
 8000dd8:	4c0a      	ldr	r4, [pc, #40]	; (8000e04 <__libc_init_array+0x44>)
 8000dda:	1b64      	subs	r4, r4, r5
 8000ddc:	10a4      	asrs	r4, r4, #2
 8000dde:	42a6      	cmp	r6, r4
 8000de0:	d105      	bne.n	8000dee <__libc_init_array+0x2e>
 8000de2:	bd70      	pop	{r4, r5, r6, pc}
 8000de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000de8:	4798      	blx	r3
 8000dea:	3601      	adds	r6, #1
 8000dec:	e7ee      	b.n	8000dcc <__libc_init_array+0xc>
 8000dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000df2:	4798      	blx	r3
 8000df4:	3601      	adds	r6, #1
 8000df6:	e7f2      	b.n	8000dde <__libc_init_array+0x1e>
 8000df8:	08000e34 	.word	0x08000e34
 8000dfc:	08000e34 	.word	0x08000e34
 8000e00:	08000e34 	.word	0x08000e34
 8000e04:	08000e38 	.word	0x08000e38

08000e08 <_init>:
 8000e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e0a:	bf00      	nop
 8000e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e0e:	bc08      	pop	{r3}
 8000e10:	469e      	mov	lr, r3
 8000e12:	4770      	bx	lr

08000e14 <_fini>:
 8000e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e16:	bf00      	nop
 8000e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e1a:	bc08      	pop	{r3}
 8000e1c:	469e      	mov	lr, r3
 8000e1e:	4770      	bx	lr
