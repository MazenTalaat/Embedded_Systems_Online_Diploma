
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000034dc  00003550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000290  00000000  00000000  00003658  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000003e2  00000000  00000000  000038e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002e73  00000000  00000000  00003cca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000159a  00000000  00000000  00006b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000237c  00000000  00000000  000080d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000340  00000000  00000000  0000a454  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000005ca  00000000  00000000  0000a794  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000090e  00000000  00000000  0000ad5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000140  00000000  00000000  0000b66c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f7 09 	call	0x13ee	; 0x13ee <main>
      7a:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 29 1a 	jmp	0x3452	; 0x3452 <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 14 1a 	jmp	0x3428	; 0x3428 <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__stack+0x1f>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__stack+0x1f>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__stack+0x29>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__stack+0x1f>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__stack+0x29>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__stack+0x33>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__stack+0x3b>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 30 1a 	jmp	0x3460	; 0x3460 <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	e8 59       	subi	r30, 0x98	; 152
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <calculator>:
#include "lcd.h"
#include "keypad.h"
#include <util/delay.h> /* For the delay functions */

void calculator(void) {
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	ce 54       	subi	r28, 0x4E	; 78
     c9e:	d0 40       	sbci	r29, 0x00	; 0
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
	unsigned char key, op;
	int n1 = 0, n2 = 0;
     caa:	fe 01       	movw	r30, r28
     cac:	e7 5b       	subi	r30, 0xB7	; 183
     cae:	ff 4f       	sbci	r31, 0xFF	; 255
     cb0:	11 82       	std	Z+1, r1	; 0x01
     cb2:	10 82       	st	Z, r1
     cb4:	fe 01       	movw	r30, r28
     cb6:	e9 5b       	subi	r30, 0xB9	; 185
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	11 82       	std	Z+1, r1	; 0x01
     cbc:	10 82       	st	Z, r1

	LCD_clearScreen();
     cbe:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <LCD_clearScreen>
	// Get the first number
	while (1) {
		key = KEYPAD_getPressedKey();
     cc2:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <KEYPAD_getPressedKey>
     cc6:	fe 01       	movw	r30, r28
     cc8:	e4 5b       	subi	r30, 0xB4	; 180
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	80 83       	st	Z, r24
		if ((key <= 9) && (key >= 0)) {
     cce:	fe 01       	movw	r30, r28
     cd0:	e4 5b       	subi	r30, 0xB4	; 180
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	80 81       	ld	r24, Z
     cd6:	8a 30       	cpi	r24, 0x0A	; 10
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <calculator+0x4c>
     cda:	aa c0       	rjmp	.+340    	; 0xe30 <calculator+0x1a0>
			LCD_intgerToString(key);
     cdc:	fe 01       	movw	r30, r28
     cde:	e4 5b       	subi	r30, 0xB4	; 180
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	80 81       	ld	r24, Z
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_intgerToString>
			n1 = key + n1 * 10;
     cec:	fe 01       	movw	r30, r28
     cee:	e4 5b       	subi	r30, 0xB4	; 180
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	80 81       	ld	r24, Z
     cf4:	48 2f       	mov	r20, r24
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	fe 01       	movw	r30, r28
     cfa:	e7 5b       	subi	r30, 0xB7	; 183
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	80 81       	ld	r24, Z
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	9c 01       	movw	r18, r24
     d04:	22 0f       	add	r18, r18
     d06:	33 1f       	adc	r19, r19
     d08:	c9 01       	movw	r24, r18
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	82 0f       	add	r24, r18
     d14:	93 1f       	adc	r25, r19
     d16:	fe 01       	movw	r30, r28
     d18:	e7 5b       	subi	r30, 0xB7	; 183
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	84 0f       	add	r24, r20
     d1e:	95 1f       	adc	r25, r21
     d20:	91 83       	std	Z+1, r25	; 0x01
     d22:	80 83       	st	Z, r24
     d24:	fe 01       	movw	r30, r28
     d26:	ed 5b       	subi	r30, 0xBD	; 189
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	a8 e4       	ldi	r26, 0x48	; 72
     d30:	b3 e4       	ldi	r27, 0x43	; 67
     d32:	80 83       	st	Z, r24
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	a2 83       	std	Z+2, r26	; 0x02
     d38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d3a:	8e 01       	movw	r16, r28
     d3c:	01 5c       	subi	r16, 0xC1	; 193
     d3e:	1f 4f       	sbci	r17, 0xFF	; 255
     d40:	fe 01       	movw	r30, r28
     d42:	ed 5b       	subi	r30, 0xBD	; 189
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	60 81       	ld	r22, Z
     d48:	71 81       	ldd	r23, Z+1	; 0x01
     d4a:	82 81       	ldd	r24, Z+2	; 0x02
     d4c:	93 81       	ldd	r25, Z+3	; 0x03
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	4a e7       	ldi	r20, 0x7A	; 122
     d54:	55 e4       	ldi	r21, 0x45	; 69
     d56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	f8 01       	movw	r30, r16
     d60:	80 83       	st	Z, r24
     d62:	91 83       	std	Z+1, r25	; 0x01
     d64:	a2 83       	std	Z+2, r26	; 0x02
     d66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d68:	fe 01       	movw	r30, r28
     d6a:	ff 96       	adiw	r30, 0x3f	; 63
     d6c:	60 81       	ld	r22, Z
     d6e:	71 81       	ldd	r23, Z+1	; 0x01
     d70:	82 81       	ldd	r24, Z+2	; 0x02
     d72:	93 81       	ldd	r25, Z+3	; 0x03
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e8       	ldi	r20, 0x80	; 128
     d7a:	5f e3       	ldi	r21, 0x3F	; 63
     d7c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d80:	88 23       	and	r24, r24
     d82:	2c f4       	brge	.+10     	; 0xd8e <calculator+0xfe>
		__ticks = 1;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	9e af       	std	Y+62, r25	; 0x3e
     d8a:	8d af       	std	Y+61, r24	; 0x3d
     d8c:	46 c0       	rjmp	.+140    	; 0xe1a <calculator+0x18a>
	else if (__tmp > 65535)
     d8e:	fe 01       	movw	r30, r28
     d90:	ff 96       	adiw	r30, 0x3f	; 63
     d92:	60 81       	ld	r22, Z
     d94:	71 81       	ldd	r23, Z+1	; 0x01
     d96:	82 81       	ldd	r24, Z+2	; 0x02
     d98:	93 81       	ldd	r25, Z+3	; 0x03
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	3f ef       	ldi	r19, 0xFF	; 255
     d9e:	4f e7       	ldi	r20, 0x7F	; 127
     da0:	57 e4       	ldi	r21, 0x47	; 71
     da2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     da6:	18 16       	cp	r1, r24
     da8:	64 f5       	brge	.+88     	; 0xe02 <calculator+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     daa:	fe 01       	movw	r30, r28
     dac:	ed 5b       	subi	r30, 0xBD	; 189
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	60 81       	ld	r22, Z
     db2:	71 81       	ldd	r23, Z+1	; 0x01
     db4:	82 81       	ldd	r24, Z+2	; 0x02
     db6:	93 81       	ldd	r25, Z+3	; 0x03
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	40 e2       	ldi	r20, 0x20	; 32
     dbe:	51 e4       	ldi	r21, 0x41	; 65
     dc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	bc 01       	movw	r22, r24
     dca:	cd 01       	movw	r24, r26
     dcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	9e af       	std	Y+62, r25	; 0x3e
     dd6:	8d af       	std	Y+61, r24	; 0x3d
     dd8:	0f c0       	rjmp	.+30     	; 0xdf8 <calculator+0x168>
     dda:	80 e9       	ldi	r24, 0x90	; 144
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	9c af       	std	Y+60, r25	; 0x3c
     de0:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     de2:	8b ad       	ldd	r24, Y+59	; 0x3b
     de4:	9c ad       	ldd	r25, Y+60	; 0x3c
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <calculator+0x156>
     dea:	9c af       	std	Y+60, r25	; 0x3c
     dec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dee:	8d ad       	ldd	r24, Y+61	; 0x3d
     df0:	9e ad       	ldd	r25, Y+62	; 0x3e
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	9e af       	std	Y+62, r25	; 0x3e
     df6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df8:	8d ad       	ldd	r24, Y+61	; 0x3d
     dfa:	9e ad       	ldd	r25, Y+62	; 0x3e
     dfc:	00 97       	sbiw	r24, 0x00	; 0
     dfe:	69 f7       	brne	.-38     	; 0xdda <calculator+0x14a>
     e00:	60 cf       	rjmp	.-320    	; 0xcc2 <calculator+0x32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e02:	fe 01       	movw	r30, r28
     e04:	ff 96       	adiw	r30, 0x3f	; 63
     e06:	60 81       	ld	r22, Z
     e08:	71 81       	ldd	r23, Z+1	; 0x01
     e0a:	82 81       	ldd	r24, Z+2	; 0x02
     e0c:	93 81       	ldd	r25, Z+3	; 0x03
     e0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	9e af       	std	Y+62, r25	; 0x3e
     e18:	8d af       	std	Y+61, r24	; 0x3d
     e1a:	8d ad       	ldd	r24, Y+61	; 0x3d
     e1c:	9e ad       	ldd	r25, Y+62	; 0x3e
     e1e:	9a af       	std	Y+58, r25	; 0x3a
     e20:	89 af       	std	Y+57, r24	; 0x39
     e22:	89 ad       	ldd	r24, Y+57	; 0x39
     e24:	9a ad       	ldd	r25, Y+58	; 0x3a
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <calculator+0x196>
     e2a:	9a af       	std	Y+58, r25	; 0x3a
     e2c:	89 af       	std	Y+57, r24	; 0x39
     e2e:	49 cf       	rjmp	.-366    	; 0xcc2 <calculator+0x32>
		} else if (key == '~') {
     e30:	fe 01       	movw	r30, r28
     e32:	e4 5b       	subi	r30, 0xB4	; 180
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	80 81       	ld	r24, Z
     e38:	8e 37       	cpi	r24, 0x7E	; 126
     e3a:	09 f4       	brne	.+2      	; 0xe3e <calculator+0x1ae>
     e3c:	cc c2       	rjmp	.+1432   	; 0x13d6 <calculator+0x746>
			return;
		} else if (key == '=') {
     e3e:	fe 01       	movw	r30, r28
     e40:	e4 5b       	subi	r30, 0xB4	; 180
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	80 81       	ld	r24, Z
     e46:	8d 33       	cpi	r24, 0x3D	; 61
     e48:	09 f4       	brne	.+2      	; 0xe4c <calculator+0x1bc>
     e4a:	3b cf       	rjmp	.-394    	; 0xcc2 <calculator+0x32>
			continue;
		} else {
			break;
		}
		_delay_ms(200);
	}
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	a8 e4       	ldi	r26, 0x48	; 72
     e52:	b3 e4       	ldi	r27, 0x43	; 67
     e54:	8d ab       	std	Y+53, r24	; 0x35
     e56:	9e ab       	std	Y+54, r25	; 0x36
     e58:	af ab       	std	Y+55, r26	; 0x37
     e5a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5c:	6d a9       	ldd	r22, Y+53	; 0x35
     e5e:	7e a9       	ldd	r23, Y+54	; 0x36
     e60:	8f a9       	ldd	r24, Y+55	; 0x37
     e62:	98 ad       	ldd	r25, Y+56	; 0x38
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	4a e7       	ldi	r20, 0x7A	; 122
     e6a:	55 e4       	ldi	r21, 0x45	; 69
     e6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	89 ab       	std	Y+49, r24	; 0x31
     e76:	9a ab       	std	Y+50, r25	; 0x32
     e78:	ab ab       	std	Y+51, r26	; 0x33
     e7a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e7c:	69 a9       	ldd	r22, Y+49	; 0x31
     e7e:	7a a9       	ldd	r23, Y+50	; 0x32
     e80:	8b a9       	ldd	r24, Y+51	; 0x33
     e82:	9c a9       	ldd	r25, Y+52	; 0x34
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e8       	ldi	r20, 0x80	; 128
     e8a:	5f e3       	ldi	r21, 0x3F	; 63
     e8c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e90:	88 23       	and	r24, r24
     e92:	2c f4       	brge	.+10     	; 0xe9e <calculator+0x20e>
		__ticks = 1;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	98 ab       	std	Y+48, r25	; 0x30
     e9a:	8f a7       	std	Y+47, r24	; 0x2f
     e9c:	3f c0       	rjmp	.+126    	; 0xf1c <calculator+0x28c>
	else if (__tmp > 65535)
     e9e:	69 a9       	ldd	r22, Y+49	; 0x31
     ea0:	7a a9       	ldd	r23, Y+50	; 0x32
     ea2:	8b a9       	ldd	r24, Y+51	; 0x33
     ea4:	9c a9       	ldd	r25, Y+52	; 0x34
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	3f ef       	ldi	r19, 0xFF	; 255
     eaa:	4f e7       	ldi	r20, 0x7F	; 127
     eac:	57 e4       	ldi	r21, 0x47	; 71
     eae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     eb2:	18 16       	cp	r1, r24
     eb4:	4c f5       	brge	.+82     	; 0xf08 <calculator+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb6:	6d a9       	ldd	r22, Y+53	; 0x35
     eb8:	7e a9       	ldd	r23, Y+54	; 0x36
     eba:	8f a9       	ldd	r24, Y+55	; 0x37
     ebc:	98 ad       	ldd	r25, Y+56	; 0x38
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e2       	ldi	r20, 0x20	; 32
     ec4:	51 e4       	ldi	r21, 0x41	; 65
     ec6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	bc 01       	movw	r22, r24
     ed0:	cd 01       	movw	r24, r26
     ed2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	98 ab       	std	Y+48, r25	; 0x30
     edc:	8f a7       	std	Y+47, r24	; 0x2f
     ede:	0f c0       	rjmp	.+30     	; 0xefe <calculator+0x26e>
     ee0:	80 e9       	ldi	r24, 0x90	; 144
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	9e a7       	std	Y+46, r25	; 0x2e
     ee6:	8d a7       	std	Y+45, r24	; 0x2d
     ee8:	8d a5       	ldd	r24, Y+45	; 0x2d
     eea:	9e a5       	ldd	r25, Y+46	; 0x2e
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <calculator+0x25c>
     ef0:	9e a7       	std	Y+46, r25	; 0x2e
     ef2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef4:	8f a5       	ldd	r24, Y+47	; 0x2f
     ef6:	98 a9       	ldd	r25, Y+48	; 0x30
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	98 ab       	std	Y+48, r25	; 0x30
     efc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efe:	8f a5       	ldd	r24, Y+47	; 0x2f
     f00:	98 a9       	ldd	r25, Y+48	; 0x30
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	69 f7       	brne	.-38     	; 0xee0 <calculator+0x250>
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <calculator+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f08:	69 a9       	ldd	r22, Y+49	; 0x31
     f0a:	7a a9       	ldd	r23, Y+50	; 0x32
     f0c:	8b a9       	ldd	r24, Y+51	; 0x33
     f0e:	9c a9       	ldd	r25, Y+52	; 0x34
     f10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	98 ab       	std	Y+48, r25	; 0x30
     f1a:	8f a7       	std	Y+47, r24	; 0x2f
     f1c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f1e:	98 a9       	ldd	r25, Y+48	; 0x30
     f20:	9c a7       	std	Y+44, r25	; 0x2c
     f22:	8b a7       	std	Y+43, r24	; 0x2b
     f24:	8b a5       	ldd	r24, Y+43	; 0x2b
     f26:	9c a5       	ldd	r25, Y+44	; 0x2c
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <calculator+0x298>
     f2c:	9c a7       	std	Y+44, r25	; 0x2c
     f2e:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(200);
	// Get the operation
	LCD_displayCharacter(key);
     f30:	fe 01       	movw	r30, r28
     f32:	e4 5b       	subi	r30, 0xB4	; 180
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	80 81       	ld	r24, Z
     f38:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayCharacter>
	op = key;
     f3c:	de 01       	movw	r26, r28
     f3e:	a5 5b       	subi	r26, 0xB5	; 181
     f40:	bf 4f       	sbci	r27, 0xFF	; 255
     f42:	fe 01       	movw	r30, r28
     f44:	e4 5b       	subi	r30, 0xB4	; 180
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	80 81       	ld	r24, Z
     f4a:	8c 93       	st	X, r24

	// Get the second number
	while (1) {
		key = KEYPAD_getPressedKey();
     f4c:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <KEYPAD_getPressedKey>
     f50:	fe 01       	movw	r30, r28
     f52:	e4 5b       	subi	r30, 0xB4	; 180
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	80 83       	st	Z, r24
		if ((key <= 9) && (key >= 0)) {
     f58:	fe 01       	movw	r30, r28
     f5a:	e4 5b       	subi	r30, 0xB4	; 180
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	80 81       	ld	r24, Z
     f60:	8a 30       	cpi	r24, 0x0A	; 10
     f62:	28 f5       	brcc	.+74     	; 0xfae <calculator+0x31e>
			LCD_intgerToString(key);
     f64:	fe 01       	movw	r30, r28
     f66:	e4 5b       	subi	r30, 0xB4	; 180
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	80 81       	ld	r24, Z
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_intgerToString>
			n2 = key + n2 * 10;
     f74:	fe 01       	movw	r30, r28
     f76:	e4 5b       	subi	r30, 0xB4	; 180
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	fe 01       	movw	r30, r28
     f82:	e9 5b       	subi	r30, 0xB9	; 185
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	9c 01       	movw	r18, r24
     f8c:	22 0f       	add	r18, r18
     f8e:	33 1f       	adc	r19, r19
     f90:	c9 01       	movw	r24, r18
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	82 0f       	add	r24, r18
     f9c:	93 1f       	adc	r25, r19
     f9e:	fe 01       	movw	r30, r28
     fa0:	e9 5b       	subi	r30, 0xB9	; 185
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	84 0f       	add	r24, r20
     fa6:	95 1f       	adc	r25, r21
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	80 83       	st	Z, r24
     fac:	0e c0       	rjmp	.+28     	; 0xfca <calculator+0x33a>
		} else if (key == '~') {
     fae:	fe 01       	movw	r30, r28
     fb0:	e4 5b       	subi	r30, 0xB4	; 180
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	80 81       	ld	r24, Z
     fb6:	8e 37       	cpi	r24, 0x7E	; 126
     fb8:	09 f4       	brne	.+2      	; 0xfbc <calculator+0x32c>
     fba:	0d c2       	rjmp	.+1050   	; 0x13d6 <calculator+0x746>
			return;
		} else if (key == '=') {
     fbc:	fe 01       	movw	r30, r28
     fbe:	e4 5b       	subi	r30, 0xB4	; 180
     fc0:	ff 4f       	sbci	r31, 0xFF	; 255
     fc2:	80 81       	ld	r24, Z
     fc4:	8d 33       	cpi	r24, 0x3D	; 61
     fc6:	09 f4       	brne	.+2      	; 0xfca <calculator+0x33a>
     fc8:	73 c0       	rjmp	.+230    	; 0x10b0 <calculator+0x420>
			break;
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a8 e4       	ldi	r26, 0x48	; 72
     fd0:	b3 e4       	ldi	r27, 0x43	; 67
     fd2:	8f a3       	std	Y+39, r24	; 0x27
     fd4:	98 a7       	std	Y+40, r25	; 0x28
     fd6:	a9 a7       	std	Y+41, r26	; 0x29
     fd8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fda:	6f a1       	ldd	r22, Y+39	; 0x27
     fdc:	78 a5       	ldd	r23, Y+40	; 0x28
     fde:	89 a5       	ldd	r24, Y+41	; 0x29
     fe0:	9a a5       	ldd	r25, Y+42	; 0x2a
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	4a e7       	ldi	r20, 0x7A	; 122
     fe8:	55 e4       	ldi	r21, 0x45	; 69
     fea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	8b a3       	std	Y+35, r24	; 0x23
     ff4:	9c a3       	std	Y+36, r25	; 0x24
     ff6:	ad a3       	std	Y+37, r26	; 0x25
     ff8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ffa:	6b a1       	ldd	r22, Y+35	; 0x23
     ffc:	7c a1       	ldd	r23, Y+36	; 0x24
     ffe:	8d a1       	ldd	r24, Y+37	; 0x25
    1000:	9e a1       	ldd	r25, Y+38	; 0x26
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e8       	ldi	r20, 0x80	; 128
    1008:	5f e3       	ldi	r21, 0x3F	; 63
    100a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    100e:	88 23       	and	r24, r24
    1010:	2c f4       	brge	.+10     	; 0x101c <calculator+0x38c>
		__ticks = 1;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9a a3       	std	Y+34, r25	; 0x22
    1018:	89 a3       	std	Y+33, r24	; 0x21
    101a:	3f c0       	rjmp	.+126    	; 0x109a <calculator+0x40a>
	else if (__tmp > 65535)
    101c:	6b a1       	ldd	r22, Y+35	; 0x23
    101e:	7c a1       	ldd	r23, Y+36	; 0x24
    1020:	8d a1       	ldd	r24, Y+37	; 0x25
    1022:	9e a1       	ldd	r25, Y+38	; 0x26
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	3f ef       	ldi	r19, 0xFF	; 255
    1028:	4f e7       	ldi	r20, 0x7F	; 127
    102a:	57 e4       	ldi	r21, 0x47	; 71
    102c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1030:	18 16       	cp	r1, r24
    1032:	4c f5       	brge	.+82     	; 0x1086 <calculator+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1034:	6f a1       	ldd	r22, Y+39	; 0x27
    1036:	78 a5       	ldd	r23, Y+40	; 0x28
    1038:	89 a5       	ldd	r24, Y+41	; 0x29
    103a:	9a a5       	ldd	r25, Y+42	; 0x2a
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e2       	ldi	r20, 0x20	; 32
    1042:	51 e4       	ldi	r21, 0x41	; 65
    1044:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9a a3       	std	Y+34, r25	; 0x22
    105a:	89 a3       	std	Y+33, r24	; 0x21
    105c:	0f c0       	rjmp	.+30     	; 0x107c <calculator+0x3ec>
    105e:	80 e9       	ldi	r24, 0x90	; 144
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	98 a3       	std	Y+32, r25	; 0x20
    1064:	8f 8f       	std	Y+31, r24	; 0x1f
    1066:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1068:	98 a1       	ldd	r25, Y+32	; 0x20
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <calculator+0x3da>
    106e:	98 a3       	std	Y+32, r25	; 0x20
    1070:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1072:	89 a1       	ldd	r24, Y+33	; 0x21
    1074:	9a a1       	ldd	r25, Y+34	; 0x22
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	9a a3       	std	Y+34, r25	; 0x22
    107a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107c:	89 a1       	ldd	r24, Y+33	; 0x21
    107e:	9a a1       	ldd	r25, Y+34	; 0x22
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	69 f7       	brne	.-38     	; 0x105e <calculator+0x3ce>
    1084:	63 cf       	rjmp	.-314    	; 0xf4c <calculator+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1086:	6b a1       	ldd	r22, Y+35	; 0x23
    1088:	7c a1       	ldd	r23, Y+36	; 0x24
    108a:	8d a1       	ldd	r24, Y+37	; 0x25
    108c:	9e a1       	ldd	r25, Y+38	; 0x26
    108e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	9a a3       	std	Y+34, r25	; 0x22
    1098:	89 a3       	std	Y+33, r24	; 0x21
    109a:	89 a1       	ldd	r24, Y+33	; 0x21
    109c:	9a a1       	ldd	r25, Y+34	; 0x22
    109e:	9e 8f       	std	Y+30, r25	; 0x1e
    10a0:	8d 8f       	std	Y+29, r24	; 0x1d
    10a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <calculator+0x416>
    10aa:	9e 8f       	std	Y+30, r25	; 0x1e
    10ac:	8d 8f       	std	Y+29, r24	; 0x1d
    10ae:	4e cf       	rjmp	.-356    	; 0xf4c <calculator+0x2bc>
		}
		_delay_ms(200);
	}

	// calculate the result
	switch (op) {
    10b0:	fe 01       	movw	r30, r28
    10b2:	e5 5b       	subi	r30, 0xB5	; 181
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	80 81       	ld	r24, Z
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	2f 96       	adiw	r28, 0x0f	; 15
    10be:	3f af       	std	Y+63, r19	; 0x3f
    10c0:	2e af       	std	Y+62, r18	; 0x3e
    10c2:	2f 97       	sbiw	r28, 0x0f	; 15
    10c4:	2f 96       	adiw	r28, 0x0f	; 15
    10c6:	6e ad       	ldd	r22, Y+62	; 0x3e
    10c8:	7f ad       	ldd	r23, Y+63	; 0x3f
    10ca:	2f 97       	sbiw	r28, 0x0f	; 15
    10cc:	6b 32       	cpi	r22, 0x2B	; 43
    10ce:	71 05       	cpc	r23, r1
    10d0:	f9 f0       	breq	.+62     	; 0x1110 <calculator+0x480>
    10d2:	2f 96       	adiw	r28, 0x0f	; 15
    10d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    10d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    10d8:	2f 97       	sbiw	r28, 0x0f	; 15
    10da:	8c 32       	cpi	r24, 0x2C	; 44
    10dc:	91 05       	cpc	r25, r1
    10de:	4c f4       	brge	.+18     	; 0x10f2 <calculator+0x462>
    10e0:	2f 96       	adiw	r28, 0x0f	; 15
    10e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    10e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    10e6:	2f 97       	sbiw	r28, 0x0f	; 15
    10e8:	ea 32       	cpi	r30, 0x2A	; 42
    10ea:	f1 05       	cpc	r31, r1
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <calculator+0x460>
    10ee:	50 c0       	rjmp	.+160    	; 0x1190 <calculator+0x500>
    10f0:	67 c0       	rjmp	.+206    	; 0x11c0 <calculator+0x530>
    10f2:	2f 96       	adiw	r28, 0x0f	; 15
    10f4:	2e ad       	ldd	r18, Y+62	; 0x3e
    10f6:	3f ad       	ldd	r19, Y+63	; 0x3f
    10f8:	2f 97       	sbiw	r28, 0x0f	; 15
    10fa:	2d 32       	cpi	r18, 0x2D	; 45
    10fc:	31 05       	cpc	r19, r1
    10fe:	e1 f0       	breq	.+56     	; 0x1138 <calculator+0x4a8>
    1100:	2f 96       	adiw	r28, 0x0f	; 15
    1102:	6e ad       	ldd	r22, Y+62	; 0x3e
    1104:	7f ad       	ldd	r23, Y+63	; 0x3f
    1106:	2f 97       	sbiw	r28, 0x0f	; 15
    1108:	6f 32       	cpi	r22, 0x2F	; 47
    110a:	71 05       	cpc	r23, r1
    110c:	59 f1       	breq	.+86     	; 0x1164 <calculator+0x4d4>
    110e:	58 c0       	rjmp	.+176    	; 0x11c0 <calculator+0x530>
	case '+':
		n2 = n1 + n2;
    1110:	ae 01       	movw	r20, r28
    1112:	49 5b       	subi	r20, 0xB9	; 185
    1114:	5f 4f       	sbci	r21, 0xFF	; 255
    1116:	fe 01       	movw	r30, r28
    1118:	e7 5b       	subi	r30, 0xB7	; 183
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	de 01       	movw	r26, r28
    111e:	a9 5b       	subi	r26, 0xB9	; 185
    1120:	bf 4f       	sbci	r27, 0xFF	; 255
    1122:	20 81       	ld	r18, Z
    1124:	31 81       	ldd	r19, Z+1	; 0x01
    1126:	8d 91       	ld	r24, X+
    1128:	9c 91       	ld	r25, X
    112a:	11 97       	sbiw	r26, 0x01	; 1
    112c:	82 0f       	add	r24, r18
    112e:	93 1f       	adc	r25, r19
    1130:	fa 01       	movw	r30, r20
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	80 83       	st	Z, r24
    1136:	44 c0       	rjmp	.+136    	; 0x11c0 <calculator+0x530>
		break;
	case '-':
		n2 = n1 - n2;
    1138:	ae 01       	movw	r20, r28
    113a:	49 5b       	subi	r20, 0xB9	; 185
    113c:	5f 4f       	sbci	r21, 0xFF	; 255
    113e:	fe 01       	movw	r30, r28
    1140:	e7 5b       	subi	r30, 0xB7	; 183
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	de 01       	movw	r26, r28
    1146:	a9 5b       	subi	r26, 0xB9	; 185
    1148:	bf 4f       	sbci	r27, 0xFF	; 255
    114a:	20 81       	ld	r18, Z
    114c:	31 81       	ldd	r19, Z+1	; 0x01
    114e:	8d 91       	ld	r24, X+
    1150:	9c 91       	ld	r25, X
    1152:	11 97       	sbiw	r26, 0x01	; 1
    1154:	b9 01       	movw	r22, r18
    1156:	68 1b       	sub	r22, r24
    1158:	79 0b       	sbc	r23, r25
    115a:	cb 01       	movw	r24, r22
    115c:	fa 01       	movw	r30, r20
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	80 83       	st	Z, r24
    1162:	2e c0       	rjmp	.+92     	; 0x11c0 <calculator+0x530>
		break;
	case '/':
		n2 = n1 / n2;
    1164:	8e 01       	movw	r16, r28
    1166:	09 5b       	subi	r16, 0xB9	; 185
    1168:	1f 4f       	sbci	r17, 0xFF	; 255
    116a:	fe 01       	movw	r30, r28
    116c:	e7 5b       	subi	r30, 0xB7	; 183
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	de 01       	movw	r26, r28
    1172:	a9 5b       	subi	r26, 0xB9	; 185
    1174:	bf 4f       	sbci	r27, 0xFF	; 255
    1176:	80 81       	ld	r24, Z
    1178:	91 81       	ldd	r25, Z+1	; 0x01
    117a:	2d 91       	ld	r18, X+
    117c:	3c 91       	ld	r19, X
    117e:	11 97       	sbiw	r26, 0x01	; 1
    1180:	b9 01       	movw	r22, r18
    1182:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__divmodhi4>
    1186:	cb 01       	movw	r24, r22
    1188:	f8 01       	movw	r30, r16
    118a:	91 83       	std	Z+1, r25	; 0x01
    118c:	80 83       	st	Z, r24
    118e:	18 c0       	rjmp	.+48     	; 0x11c0 <calculator+0x530>
		break;
	case '*':
		n2 = n1 * n2;
    1190:	ae 01       	movw	r20, r28
    1192:	49 5b       	subi	r20, 0xB9	; 185
    1194:	5f 4f       	sbci	r21, 0xFF	; 255
    1196:	fe 01       	movw	r30, r28
    1198:	e7 5b       	subi	r30, 0xB7	; 183
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	de 01       	movw	r26, r28
    119e:	a9 5b       	subi	r26, 0xB9	; 185
    11a0:	bf 4f       	sbci	r27, 0xFF	; 255
    11a2:	20 81       	ld	r18, Z
    11a4:	31 81       	ldd	r19, Z+1	; 0x01
    11a6:	8d 91       	ld	r24, X+
    11a8:	9c 91       	ld	r25, X
    11aa:	bc 01       	movw	r22, r24
    11ac:	26 9f       	mul	r18, r22
    11ae:	c0 01       	movw	r24, r0
    11b0:	27 9f       	mul	r18, r23
    11b2:	90 0d       	add	r25, r0
    11b4:	36 9f       	mul	r19, r22
    11b6:	90 0d       	add	r25, r0
    11b8:	11 24       	eor	r1, r1
    11ba:	fa 01       	movw	r30, r20
    11bc:	91 83       	std	Z+1, r25	; 0x01
    11be:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
	LCD_displayCharacter('=');
    11c0:	8d e3       	ldi	r24, 0x3D	; 61
    11c2:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayCharacter>

	// Handle the negative sign
	if (n2 < 0) {
    11c6:	fe 01       	movw	r30, r28
    11c8:	e9 5b       	subi	r30, 0xB9	; 185
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	80 81       	ld	r24, Z
    11ce:	91 81       	ldd	r25, Z+1	; 0x01
    11d0:	99 23       	and	r25, r25
    11d2:	84 f4       	brge	.+32     	; 0x11f4 <calculator+0x564>
		LCD_displayCharacter('-');
    11d4:	8d e2       	ldi	r24, 0x2D	; 45
    11d6:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayCharacter>
		n2 = -1 * n2;
    11da:	de 01       	movw	r26, r28
    11dc:	a9 5b       	subi	r26, 0xB9	; 185
    11de:	bf 4f       	sbci	r27, 0xFF	; 255
    11e0:	fe 01       	movw	r30, r28
    11e2:	e9 5b       	subi	r30, 0xB9	; 185
    11e4:	ff 4f       	sbci	r31, 0xFF	; 255
    11e6:	80 81       	ld	r24, Z
    11e8:	91 81       	ldd	r25, Z+1	; 0x01
    11ea:	90 95       	com	r25
    11ec:	81 95       	neg	r24
    11ee:	9f 4f       	sbci	r25, 0xFF	; 255
    11f0:	8d 93       	st	X+, r24
    11f2:	9c 93       	st	X, r25
	}

	// show the result
	LCD_intgerToString(n2);
    11f4:	fe 01       	movw	r30, r28
    11f6:	e9 5b       	subi	r30, 0xB9	; 185
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	80 81       	ld	r24, Z
    11fc:	91 81       	ldd	r25, Z+1	; 0x01
    11fe:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_intgerToString>
    1202:	72 c0       	rjmp	.+228    	; 0x12e8 <calculator+0x658>

	// wait of ON to be pressed
	while (KEYPAD_getPressedKey() != '~') {
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	a0 e7       	ldi	r26, 0x70	; 112
    120a:	b1 e4       	ldi	r27, 0x41	; 65
    120c:	89 8f       	std	Y+25, r24	; 0x19
    120e:	9a 8f       	std	Y+26, r25	; 0x1a
    1210:	ab 8f       	std	Y+27, r26	; 0x1b
    1212:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1214:	69 8d       	ldd	r22, Y+25	; 0x19
    1216:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1218:	8b 8d       	ldd	r24, Y+27	; 0x1b
    121a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	4a e7       	ldi	r20, 0x7A	; 122
    1222:	55 e4       	ldi	r21, 0x45	; 69
    1224:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	8d 8b       	std	Y+21, r24	; 0x15
    122e:	9e 8b       	std	Y+22, r25	; 0x16
    1230:	af 8b       	std	Y+23, r26	; 0x17
    1232:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1234:	6d 89       	ldd	r22, Y+21	; 0x15
    1236:	7e 89       	ldd	r23, Y+22	; 0x16
    1238:	8f 89       	ldd	r24, Y+23	; 0x17
    123a:	98 8d       	ldd	r25, Y+24	; 0x18
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e8       	ldi	r20, 0x80	; 128
    1242:	5f e3       	ldi	r21, 0x3F	; 63
    1244:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1248:	88 23       	and	r24, r24
    124a:	2c f4       	brge	.+10     	; 0x1256 <calculator+0x5c6>
		__ticks = 1;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	9c 8b       	std	Y+20, r25	; 0x14
    1252:	8b 8b       	std	Y+19, r24	; 0x13
    1254:	3f c0       	rjmp	.+126    	; 0x12d4 <calculator+0x644>
	else if (__tmp > 65535)
    1256:	6d 89       	ldd	r22, Y+21	; 0x15
    1258:	7e 89       	ldd	r23, Y+22	; 0x16
    125a:	8f 89       	ldd	r24, Y+23	; 0x17
    125c:	98 8d       	ldd	r25, Y+24	; 0x18
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	3f ef       	ldi	r19, 0xFF	; 255
    1262:	4f e7       	ldi	r20, 0x7F	; 127
    1264:	57 e4       	ldi	r21, 0x47	; 71
    1266:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    126a:	18 16       	cp	r1, r24
    126c:	4c f5       	brge	.+82     	; 0x12c0 <calculator+0x630>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126e:	69 8d       	ldd	r22, Y+25	; 0x19
    1270:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1272:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1274:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e2       	ldi	r20, 0x20	; 32
    127c:	51 e4       	ldi	r21, 0x41	; 65
    127e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	bc 01       	movw	r22, r24
    1288:	cd 01       	movw	r24, r26
    128a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	9c 8b       	std	Y+20, r25	; 0x14
    1294:	8b 8b       	std	Y+19, r24	; 0x13
    1296:	0f c0       	rjmp	.+30     	; 0x12b6 <calculator+0x626>
    1298:	80 e9       	ldi	r24, 0x90	; 144
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	9a 8b       	std	Y+18, r25	; 0x12
    129e:	89 8b       	std	Y+17, r24	; 0x11
    12a0:	89 89       	ldd	r24, Y+17	; 0x11
    12a2:	9a 89       	ldd	r25, Y+18	; 0x12
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <calculator+0x614>
    12a8:	9a 8b       	std	Y+18, r25	; 0x12
    12aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ac:	8b 89       	ldd	r24, Y+19	; 0x13
    12ae:	9c 89       	ldd	r25, Y+20	; 0x14
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	9c 8b       	std	Y+20, r25	; 0x14
    12b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b6:	8b 89       	ldd	r24, Y+19	; 0x13
    12b8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	69 f7       	brne	.-38     	; 0x1298 <calculator+0x608>
    12be:	14 c0       	rjmp	.+40     	; 0x12e8 <calculator+0x658>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c0:	6d 89       	ldd	r22, Y+21	; 0x15
    12c2:	7e 89       	ldd	r23, Y+22	; 0x16
    12c4:	8f 89       	ldd	r24, Y+23	; 0x17
    12c6:	98 8d       	ldd	r25, Y+24	; 0x18
    12c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	9c 8b       	std	Y+20, r25	; 0x14
    12d2:	8b 8b       	std	Y+19, r24	; 0x13
    12d4:	8b 89       	ldd	r24, Y+19	; 0x13
    12d6:	9c 89       	ldd	r25, Y+20	; 0x14
    12d8:	98 8b       	std	Y+16, r25	; 0x10
    12da:	8f 87       	std	Y+15, r24	; 0x0f
    12dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    12de:	98 89       	ldd	r25, Y+16	; 0x10
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <calculator+0x650>
    12e4:	98 8b       	std	Y+16, r25	; 0x10
    12e6:	8f 87       	std	Y+15, r24	; 0x0f
    12e8:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <KEYPAD_getPressedKey>
    12ec:	8e 37       	cpi	r24, 0x7E	; 126
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <calculator+0x662>
    12f0:	89 cf       	rjmp	.-238    	; 0x1204 <calculator+0x574>
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	aa e7       	ldi	r26, 0x7A	; 122
    12f8:	b3 e4       	ldi	r27, 0x43	; 67
    12fa:	8b 87       	std	Y+11, r24	; 0x0b
    12fc:	9c 87       	std	Y+12, r25	; 0x0c
    12fe:	ad 87       	std	Y+13, r26	; 0x0d
    1300:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1302:	6b 85       	ldd	r22, Y+11	; 0x0b
    1304:	7c 85       	ldd	r23, Y+12	; 0x0c
    1306:	8d 85       	ldd	r24, Y+13	; 0x0d
    1308:	9e 85       	ldd	r25, Y+14	; 0x0e
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	4a e7       	ldi	r20, 0x7A	; 122
    1310:	55 e4       	ldi	r21, 0x45	; 69
    1312:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	8f 83       	std	Y+7, r24	; 0x07
    131c:	98 87       	std	Y+8, r25	; 0x08
    131e:	a9 87       	std	Y+9, r26	; 0x09
    1320:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1322:	6f 81       	ldd	r22, Y+7	; 0x07
    1324:	78 85       	ldd	r23, Y+8	; 0x08
    1326:	89 85       	ldd	r24, Y+9	; 0x09
    1328:	9a 85       	ldd	r25, Y+10	; 0x0a
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e8       	ldi	r20, 0x80	; 128
    1330:	5f e3       	ldi	r21, 0x3F	; 63
    1332:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1336:	88 23       	and	r24, r24
    1338:	2c f4       	brge	.+10     	; 0x1344 <calculator+0x6b4>
		__ticks = 1;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	9e 83       	std	Y+6, r25	; 0x06
    1340:	8d 83       	std	Y+5, r24	; 0x05
    1342:	3f c0       	rjmp	.+126    	; 0x13c2 <calculator+0x732>
	else if (__tmp > 65535)
    1344:	6f 81       	ldd	r22, Y+7	; 0x07
    1346:	78 85       	ldd	r23, Y+8	; 0x08
    1348:	89 85       	ldd	r24, Y+9	; 0x09
    134a:	9a 85       	ldd	r25, Y+10	; 0x0a
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	3f ef       	ldi	r19, 0xFF	; 255
    1350:	4f e7       	ldi	r20, 0x7F	; 127
    1352:	57 e4       	ldi	r21, 0x47	; 71
    1354:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1358:	18 16       	cp	r1, r24
    135a:	4c f5       	brge	.+82     	; 0x13ae <calculator+0x71e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    135c:	6b 85       	ldd	r22, Y+11	; 0x0b
    135e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1360:	8d 85       	ldd	r24, Y+13	; 0x0d
    1362:	9e 85       	ldd	r25, Y+14	; 0x0e
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e2       	ldi	r20, 0x20	; 32
    136a:	51 e4       	ldi	r21, 0x41	; 65
    136c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	bc 01       	movw	r22, r24
    1376:	cd 01       	movw	r24, r26
    1378:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	9e 83       	std	Y+6, r25	; 0x06
    1382:	8d 83       	std	Y+5, r24	; 0x05
    1384:	0f c0       	rjmp	.+30     	; 0x13a4 <calculator+0x714>
    1386:	80 e9       	ldi	r24, 0x90	; 144
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	9c 83       	std	Y+4, r25	; 0x04
    138c:	8b 83       	std	Y+3, r24	; 0x03
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	f1 f7       	brne	.-4      	; 0x1392 <calculator+0x702>
    1396:	9c 83       	std	Y+4, r25	; 0x04
    1398:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139a:	8d 81       	ldd	r24, Y+5	; 0x05
    139c:	9e 81       	ldd	r25, Y+6	; 0x06
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	9e 83       	std	Y+6, r25	; 0x06
    13a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	69 f7       	brne	.-38     	; 0x1386 <calculator+0x6f6>
    13ac:	14 c0       	rjmp	.+40     	; 0x13d6 <calculator+0x746>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ae:	6f 81       	ldd	r22, Y+7	; 0x07
    13b0:	78 85       	ldd	r23, Y+8	; 0x08
    13b2:	89 85       	ldd	r24, Y+9	; 0x09
    13b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	9e 83       	std	Y+6, r25	; 0x06
    13c0:	8d 83       	std	Y+5, r24	; 0x05
    13c2:	8d 81       	ldd	r24, Y+5	; 0x05
    13c4:	9e 81       	ldd	r25, Y+6	; 0x06
    13c6:	9a 83       	std	Y+2, r25	; 0x02
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	9a 81       	ldd	r25, Y+2	; 0x02
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <calculator+0x73e>
    13d2:	9a 83       	std	Y+2, r25	; 0x02
    13d4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(15);
	}
	_delay_ms(250);
}
    13d6:	c2 5b       	subi	r28, 0xB2	; 178
    13d8:	df 4f       	sbci	r29, 0xFF	; 255
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	08 95       	ret

000013ee <main>:

int main(void) {
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62

	LCD_init();
    13f6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_init>

	while (1) {
		calculator();
    13fa:	0e 94 48 06 	call	0xc90	; 0xc90 <calculator>
    13fe:	fd cf       	rjmp	.-6      	; 0x13fa <main+0xc>

00001400 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <GPIO_setupPinDirection+0x6>
    1406:	00 d0       	rcall	.+0      	; 0x1408 <GPIO_setupPinDirection+0x8>
    1408:	0f 92       	push	r0
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	6a 83       	std	Y+2, r22	; 0x02
    1412:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	88 30       	cpi	r24, 0x08	; 8
    1418:	08 f0       	brcs	.+2      	; 0x141c <GPIO_setupPinDirection+0x1c>
    141a:	d5 c0       	rjmp	.+426    	; 0x15c6 <GPIO_setupPinDirection+0x1c6>
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	84 30       	cpi	r24, 0x04	; 4
    1420:	08 f0       	brcs	.+2      	; 0x1424 <GPIO_setupPinDirection+0x24>
    1422:	d1 c0       	rjmp	.+418    	; 0x15c6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	3d 83       	std	Y+5, r19	; 0x05
    142c:	2c 83       	std	Y+4, r18	; 0x04
    142e:	8c 81       	ldd	r24, Y+4	; 0x04
    1430:	9d 81       	ldd	r25, Y+5	; 0x05
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	91 05       	cpc	r25, r1
    1436:	09 f4       	brne	.+2      	; 0x143a <GPIO_setupPinDirection+0x3a>
    1438:	43 c0       	rjmp	.+134    	; 0x14c0 <GPIO_setupPinDirection+0xc0>
    143a:	2c 81       	ldd	r18, Y+4	; 0x04
    143c:	3d 81       	ldd	r19, Y+5	; 0x05
    143e:	22 30       	cpi	r18, 0x02	; 2
    1440:	31 05       	cpc	r19, r1
    1442:	2c f4       	brge	.+10     	; 0x144e <GPIO_setupPinDirection+0x4e>
    1444:	8c 81       	ldd	r24, Y+4	; 0x04
    1446:	9d 81       	ldd	r25, Y+5	; 0x05
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	71 f0       	breq	.+28     	; 0x1468 <GPIO_setupPinDirection+0x68>
    144c:	bc c0       	rjmp	.+376    	; 0x15c6 <GPIO_setupPinDirection+0x1c6>
    144e:	2c 81       	ldd	r18, Y+4	; 0x04
    1450:	3d 81       	ldd	r19, Y+5	; 0x05
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	09 f4       	brne	.+2      	; 0x145a <GPIO_setupPinDirection+0x5a>
    1458:	5f c0       	rjmp	.+190    	; 0x1518 <GPIO_setupPinDirection+0x118>
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	9d 81       	ldd	r25, Y+5	; 0x05
    145e:	83 30       	cpi	r24, 0x03	; 3
    1460:	91 05       	cpc	r25, r1
    1462:	09 f4       	brne	.+2      	; 0x1466 <GPIO_setupPinDirection+0x66>
    1464:	85 c0       	rjmp	.+266    	; 0x1570 <GPIO_setupPinDirection+0x170>
    1466:	af c0       	rjmp	.+350    	; 0x15c6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	a1 f4       	brne	.+40     	; 0x1496 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    146e:	aa e3       	ldi	r26, 0x3A	; 58
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	ea e3       	ldi	r30, 0x3A	; 58
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 2e       	mov	r0, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <GPIO_setupPinDirection+0x8c>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <GPIO_setupPinDirection+0x88>
    1490:	84 2b       	or	r24, r20
    1492:	8c 93       	st	X, r24
    1494:	98 c0       	rjmp	.+304    	; 0x15c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1496:	aa e3       	ldi	r26, 0x3A	; 58
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	ea e3       	ldi	r30, 0x3A	; 58
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	48 2f       	mov	r20, r24
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 2e       	mov	r0, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <GPIO_setupPinDirection+0xb4>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	0a 94       	dec	r0
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <GPIO_setupPinDirection+0xb0>
    14b8:	80 95       	com	r24
    14ba:	84 23       	and	r24, r20
    14bc:	8c 93       	st	X, r24
    14be:	83 c0       	rjmp	.+262    	; 0x15c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	a1 f4       	brne	.+40     	; 0x14ee <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    14c6:	a7 e3       	ldi	r26, 0x37	; 55
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e7 e3       	ldi	r30, 0x37	; 55
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	48 2f       	mov	r20, r24
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 2e       	mov	r0, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <GPIO_setupPinDirection+0xe4>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	0a 94       	dec	r0
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <GPIO_setupPinDirection+0xe0>
    14e8:	84 2b       	or	r24, r20
    14ea:	8c 93       	st	X, r24
    14ec:	6c c0       	rjmp	.+216    	; 0x15c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    14ee:	a7 e3       	ldi	r26, 0x37	; 55
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e7 e3       	ldi	r30, 0x37	; 55
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	48 2f       	mov	r20, r24
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	02 2e       	mov	r0, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <GPIO_setupPinDirection+0x10c>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	0a 94       	dec	r0
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <GPIO_setupPinDirection+0x108>
    1510:	80 95       	com	r24
    1512:	84 23       	and	r24, r20
    1514:	8c 93       	st	X, r24
    1516:	57 c0       	rjmp	.+174    	; 0x15c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	a1 f4       	brne	.+40     	; 0x1546 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    151e:	a4 e3       	ldi	r26, 0x34	; 52
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e4 e3       	ldi	r30, 0x34	; 52
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <GPIO_setupPinDirection+0x13c>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <GPIO_setupPinDirection+0x138>
    1540:	84 2b       	or	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	40 c0       	rjmp	.+128    	; 0x15c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1546:	a4 e3       	ldi	r26, 0x34	; 52
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e4 e3       	ldi	r30, 0x34	; 52
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <GPIO_setupPinDirection+0x164>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <GPIO_setupPinDirection+0x160>
    1568:	80 95       	com	r24
    156a:	84 23       	and	r24, r20
    156c:	8c 93       	st	X, r24
    156e:	2b c0       	rjmp	.+86     	; 0x15c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	a1 f4       	brne	.+40     	; 0x159e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1576:	a1 e3       	ldi	r26, 0x31	; 49
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e1 e3       	ldi	r30, 0x31	; 49
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	48 2f       	mov	r20, r24
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 2e       	mov	r0, r18
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <GPIO_setupPinDirection+0x194>
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	0a 94       	dec	r0
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <GPIO_setupPinDirection+0x190>
    1598:	84 2b       	or	r24, r20
    159a:	8c 93       	st	X, r24
    159c:	14 c0       	rjmp	.+40     	; 0x15c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    159e:	a1 e3       	ldi	r26, 0x31	; 49
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e1 e3       	ldi	r30, 0x31	; 49
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 2e       	mov	r0, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <GPIO_setupPinDirection+0x1bc>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	0a 94       	dec	r0
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <GPIO_setupPinDirection+0x1b8>
    15c0:	80 95       	com	r24
    15c2:	84 23       	and	r24, r20
    15c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	00 d0       	rcall	.+0      	; 0x15dc <GPIO_writePin+0x6>
    15dc:	00 d0       	rcall	.+0      	; 0x15de <GPIO_writePin+0x8>
    15de:	0f 92       	push	r0
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	6a 83       	std	Y+2, r22	; 0x02
    15e8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	88 30       	cpi	r24, 0x08	; 8
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <GPIO_writePin+0x1c>
    15f0:	d5 c0       	rjmp	.+426    	; 0x179c <GPIO_writePin+0x1c6>
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	84 30       	cpi	r24, 0x04	; 4
    15f6:	08 f0       	brcs	.+2      	; 0x15fa <GPIO_writePin+0x24>
    15f8:	d1 c0       	rjmp	.+418    	; 0x179c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	3d 83       	std	Y+5, r19	; 0x05
    1602:	2c 83       	std	Y+4, r18	; 0x04
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
    1606:	9d 81       	ldd	r25, Y+5	; 0x05
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	91 05       	cpc	r25, r1
    160c:	09 f4       	brne	.+2      	; 0x1610 <GPIO_writePin+0x3a>
    160e:	43 c0       	rjmp	.+134    	; 0x1696 <GPIO_writePin+0xc0>
    1610:	2c 81       	ldd	r18, Y+4	; 0x04
    1612:	3d 81       	ldd	r19, Y+5	; 0x05
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	2c f4       	brge	.+10     	; 0x1624 <GPIO_writePin+0x4e>
    161a:	8c 81       	ldd	r24, Y+4	; 0x04
    161c:	9d 81       	ldd	r25, Y+5	; 0x05
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	71 f0       	breq	.+28     	; 0x163e <GPIO_writePin+0x68>
    1622:	bc c0       	rjmp	.+376    	; 0x179c <GPIO_writePin+0x1c6>
    1624:	2c 81       	ldd	r18, Y+4	; 0x04
    1626:	3d 81       	ldd	r19, Y+5	; 0x05
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	31 05       	cpc	r19, r1
    162c:	09 f4       	brne	.+2      	; 0x1630 <GPIO_writePin+0x5a>
    162e:	5f c0       	rjmp	.+190    	; 0x16ee <GPIO_writePin+0x118>
    1630:	8c 81       	ldd	r24, Y+4	; 0x04
    1632:	9d 81       	ldd	r25, Y+5	; 0x05
    1634:	83 30       	cpi	r24, 0x03	; 3
    1636:	91 05       	cpc	r25, r1
    1638:	09 f4       	brne	.+2      	; 0x163c <GPIO_writePin+0x66>
    163a:	85 c0       	rjmp	.+266    	; 0x1746 <GPIO_writePin+0x170>
    163c:	af c0       	rjmp	.+350    	; 0x179c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	a1 f4       	brne	.+40     	; 0x166c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1644:	ab e3       	ldi	r26, 0x3B	; 59
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	eb e3       	ldi	r30, 0x3B	; 59
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 2e       	mov	r0, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <GPIO_writePin+0x8c>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <GPIO_writePin+0x88>
    1666:	84 2b       	or	r24, r20
    1668:	8c 93       	st	X, r24
    166a:	98 c0       	rjmp	.+304    	; 0x179c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    166c:	ab e3       	ldi	r26, 0x3B	; 59
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	eb e3       	ldi	r30, 0x3B	; 59
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	48 2f       	mov	r20, r24
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <GPIO_writePin+0xb4>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <GPIO_writePin+0xb0>
    168e:	80 95       	com	r24
    1690:	84 23       	and	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	83 c0       	rjmp	.+262    	; 0x179c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	a1 f4       	brne	.+40     	; 0x16c4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    169c:	a8 e3       	ldi	r26, 0x38	; 56
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e8 e3       	ldi	r30, 0x38	; 56
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	48 2f       	mov	r20, r24
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	02 2e       	mov	r0, r18
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <GPIO_writePin+0xe4>
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	0a 94       	dec	r0
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <GPIO_writePin+0xe0>
    16be:	84 2b       	or	r24, r20
    16c0:	8c 93       	st	X, r24
    16c2:	6c c0       	rjmp	.+216    	; 0x179c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    16c4:	a8 e3       	ldi	r26, 0x38	; 56
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e8 e3       	ldi	r30, 0x38	; 56
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <GPIO_writePin+0x10c>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <GPIO_writePin+0x108>
    16e6:	80 95       	com	r24
    16e8:	84 23       	and	r24, r20
    16ea:	8c 93       	st	X, r24
    16ec:	57 c0       	rjmp	.+174    	; 0x179c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	81 30       	cpi	r24, 0x01	; 1
    16f2:	a1 f4       	brne	.+40     	; 0x171c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    16f4:	a5 e3       	ldi	r26, 0x35	; 53
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e5 e3       	ldi	r30, 0x35	; 53
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	48 2f       	mov	r20, r24
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	02 2e       	mov	r0, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <GPIO_writePin+0x13c>
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	0a 94       	dec	r0
    1714:	e2 f7       	brpl	.-8      	; 0x170e <GPIO_writePin+0x138>
    1716:	84 2b       	or	r24, r20
    1718:	8c 93       	st	X, r24
    171a:	40 c0       	rjmp	.+128    	; 0x179c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    171c:	a5 e3       	ldi	r26, 0x35	; 53
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e5 e3       	ldi	r30, 0x35	; 53
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	48 2f       	mov	r20, r24
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 2e       	mov	r0, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <GPIO_writePin+0x164>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	0a 94       	dec	r0
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <GPIO_writePin+0x160>
    173e:	80 95       	com	r24
    1740:	84 23       	and	r24, r20
    1742:	8c 93       	st	X, r24
    1744:	2b c0       	rjmp	.+86     	; 0x179c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	a1 f4       	brne	.+40     	; 0x1774 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    174c:	a2 e3       	ldi	r26, 0x32	; 50
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e2 e3       	ldi	r30, 0x32	; 50
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	48 2f       	mov	r20, r24
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 2e       	mov	r0, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <GPIO_writePin+0x194>
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	0a 94       	dec	r0
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <GPIO_writePin+0x190>
    176e:	84 2b       	or	r24, r20
    1770:	8c 93       	st	X, r24
    1772:	14 c0       	rjmp	.+40     	; 0x179c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1774:	a2 e3       	ldi	r26, 0x32	; 50
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e2 e3       	ldi	r30, 0x32	; 50
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 2e       	mov	r0, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <GPIO_writePin+0x1bc>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	0a 94       	dec	r0
    1794:	e2 f7       	brpl	.-8      	; 0x178e <GPIO_writePin+0x1b8>
    1796:	80 95       	com	r24
    1798:	84 23       	and	r24, r20
    179a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <GPIO_readPin+0x6>
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <GPIO_readPin+0x8>
    17b4:	0f 92       	push	r0
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	8a 83       	std	Y+2, r24	; 0x02
    17bc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    17be:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	88 30       	cpi	r24, 0x08	; 8
    17c4:	08 f0       	brcs	.+2      	; 0x17c8 <GPIO_readPin+0x1c>
    17c6:	84 c0       	rjmp	.+264    	; 0x18d0 <GPIO_readPin+0x124>
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	84 30       	cpi	r24, 0x04	; 4
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <GPIO_readPin+0x24>
    17ce:	80 c0       	rjmp	.+256    	; 0x18d0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	3d 83       	std	Y+5, r19	; 0x05
    17d8:	2c 83       	std	Y+4, r18	; 0x04
    17da:	4c 81       	ldd	r20, Y+4	; 0x04
    17dc:	5d 81       	ldd	r21, Y+5	; 0x05
    17de:	41 30       	cpi	r20, 0x01	; 1
    17e0:	51 05       	cpc	r21, r1
    17e2:	79 f1       	breq	.+94     	; 0x1842 <GPIO_readPin+0x96>
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	9d 81       	ldd	r25, Y+5	; 0x05
    17e8:	82 30       	cpi	r24, 0x02	; 2
    17ea:	91 05       	cpc	r25, r1
    17ec:	34 f4       	brge	.+12     	; 0x17fa <GPIO_readPin+0x4e>
    17ee:	2c 81       	ldd	r18, Y+4	; 0x04
    17f0:	3d 81       	ldd	r19, Y+5	; 0x05
    17f2:	21 15       	cp	r18, r1
    17f4:	31 05       	cpc	r19, r1
    17f6:	69 f0       	breq	.+26     	; 0x1812 <GPIO_readPin+0x66>
    17f8:	6b c0       	rjmp	.+214    	; 0x18d0 <GPIO_readPin+0x124>
    17fa:	4c 81       	ldd	r20, Y+4	; 0x04
    17fc:	5d 81       	ldd	r21, Y+5	; 0x05
    17fe:	42 30       	cpi	r20, 0x02	; 2
    1800:	51 05       	cpc	r21, r1
    1802:	b9 f1       	breq	.+110    	; 0x1872 <GPIO_readPin+0xc6>
    1804:	8c 81       	ldd	r24, Y+4	; 0x04
    1806:	9d 81       	ldd	r25, Y+5	; 0x05
    1808:	83 30       	cpi	r24, 0x03	; 3
    180a:	91 05       	cpc	r25, r1
    180c:	09 f4       	brne	.+2      	; 0x1810 <GPIO_readPin+0x64>
    180e:	49 c0       	rjmp	.+146    	; 0x18a2 <GPIO_readPin+0xf6>
    1810:	5f c0       	rjmp	.+190    	; 0x18d0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1812:	e9 e3       	ldi	r30, 0x39	; 57
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	88 2f       	mov	r24, r24
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a9 01       	movw	r20, r18
    1824:	02 c0       	rjmp	.+4      	; 0x182a <GPIO_readPin+0x7e>
    1826:	55 95       	asr	r21
    1828:	47 95       	ror	r20
    182a:	8a 95       	dec	r24
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <GPIO_readPin+0x7a>
    182e:	ca 01       	movw	r24, r20
    1830:	81 70       	andi	r24, 0x01	; 1
    1832:	90 70       	andi	r25, 0x00	; 0
    1834:	88 23       	and	r24, r24
    1836:	19 f0       	breq	.+6      	; 0x183e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	49 c0       	rjmp	.+146    	; 0x18d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    183e:	19 82       	std	Y+1, r1	; 0x01
    1840:	47 c0       	rjmp	.+142    	; 0x18d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1842:	e6 e3       	ldi	r30, 0x36	; 54
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	88 2f       	mov	r24, r24
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	a9 01       	movw	r20, r18
    1854:	02 c0       	rjmp	.+4      	; 0x185a <GPIO_readPin+0xae>
    1856:	55 95       	asr	r21
    1858:	47 95       	ror	r20
    185a:	8a 95       	dec	r24
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <GPIO_readPin+0xaa>
    185e:	ca 01       	movw	r24, r20
    1860:	81 70       	andi	r24, 0x01	; 1
    1862:	90 70       	andi	r25, 0x00	; 0
    1864:	88 23       	and	r24, r24
    1866:	19 f0       	breq	.+6      	; 0x186e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	31 c0       	rjmp	.+98     	; 0x18d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    186e:	19 82       	std	Y+1, r1	; 0x01
    1870:	2f c0       	rjmp	.+94     	; 0x18d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1872:	e3 e3       	ldi	r30, 0x33	; 51
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	88 2f       	mov	r24, r24
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a9 01       	movw	r20, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <GPIO_readPin+0xde>
    1886:	55 95       	asr	r21
    1888:	47 95       	ror	r20
    188a:	8a 95       	dec	r24
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <GPIO_readPin+0xda>
    188e:	ca 01       	movw	r24, r20
    1890:	81 70       	andi	r24, 0x01	; 1
    1892:	90 70       	andi	r25, 0x00	; 0
    1894:	88 23       	and	r24, r24
    1896:	19 f0       	breq	.+6      	; 0x189e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	19 c0       	rjmp	.+50     	; 0x18d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    189e:	19 82       	std	Y+1, r1	; 0x01
    18a0:	17 c0       	rjmp	.+46     	; 0x18d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    18a2:	e0 e3       	ldi	r30, 0x30	; 48
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	88 2f       	mov	r24, r24
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a9 01       	movw	r20, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <GPIO_readPin+0x10e>
    18b6:	55 95       	asr	r21
    18b8:	47 95       	ror	r20
    18ba:	8a 95       	dec	r24
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <GPIO_readPin+0x10a>
    18be:	ca 01       	movw	r24, r20
    18c0:	81 70       	andi	r24, 0x01	; 1
    18c2:	90 70       	andi	r25, 0x00	; 0
    18c4:	88 23       	and	r24, r24
    18c6:	19 f0       	breq	.+6      	; 0x18ce <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18ce:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <GPIO_setupPortDirection+0x6>
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <GPIO_setupPortDirection+0x8>
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	84 30       	cpi	r24, 0x04	; 4
    18f6:	90 f5       	brcc	.+100    	; 0x195c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	3c 83       	std	Y+4, r19	; 0x04
    1900:	2b 83       	std	Y+3, r18	; 0x03
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	9c 81       	ldd	r25, Y+4	; 0x04
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	91 05       	cpc	r25, r1
    190a:	d1 f0       	breq	.+52     	; 0x1940 <GPIO_setupPortDirection+0x5e>
    190c:	2b 81       	ldd	r18, Y+3	; 0x03
    190e:	3c 81       	ldd	r19, Y+4	; 0x04
    1910:	22 30       	cpi	r18, 0x02	; 2
    1912:	31 05       	cpc	r19, r1
    1914:	2c f4       	brge	.+10     	; 0x1920 <GPIO_setupPortDirection+0x3e>
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	9c 81       	ldd	r25, Y+4	; 0x04
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	61 f0       	breq	.+24     	; 0x1936 <GPIO_setupPortDirection+0x54>
    191e:	1e c0       	rjmp	.+60     	; 0x195c <GPIO_setupPortDirection+0x7a>
    1920:	2b 81       	ldd	r18, Y+3	; 0x03
    1922:	3c 81       	ldd	r19, Y+4	; 0x04
    1924:	22 30       	cpi	r18, 0x02	; 2
    1926:	31 05       	cpc	r19, r1
    1928:	81 f0       	breq	.+32     	; 0x194a <GPIO_setupPortDirection+0x68>
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	83 30       	cpi	r24, 0x03	; 3
    1930:	91 05       	cpc	r25, r1
    1932:	81 f0       	breq	.+32     	; 0x1954 <GPIO_setupPortDirection+0x72>
    1934:	13 c0       	rjmp	.+38     	; 0x195c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1936:	ea e3       	ldi	r30, 0x3A	; 58
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	80 83       	st	Z, r24
    193e:	0e c0       	rjmp	.+28     	; 0x195c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1940:	e7 e3       	ldi	r30, 0x37	; 55
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	80 83       	st	Z, r24
    1948:	09 c0       	rjmp	.+18     	; 0x195c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    194a:	e4 e3       	ldi	r30, 0x34	; 52
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	80 83       	st	Z, r24
    1952:	04 c0       	rjmp	.+8      	; 0x195c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1954:	e1 e3       	ldi	r30, 0x31	; 49
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	80 83       	st	Z, r24
			break;
		}
	}
}
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	00 d0       	rcall	.+0      	; 0x1970 <GPIO_writePort+0x6>
    1970:	00 d0       	rcall	.+0      	; 0x1972 <GPIO_writePort+0x8>
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	84 30       	cpi	r24, 0x04	; 4
    197e:	90 f5       	brcc	.+100    	; 0x19e4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	3c 83       	std	Y+4, r19	; 0x04
    1988:	2b 83       	std	Y+3, r18	; 0x03
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	9c 81       	ldd	r25, Y+4	; 0x04
    198e:	81 30       	cpi	r24, 0x01	; 1
    1990:	91 05       	cpc	r25, r1
    1992:	d1 f0       	breq	.+52     	; 0x19c8 <GPIO_writePort+0x5e>
    1994:	2b 81       	ldd	r18, Y+3	; 0x03
    1996:	3c 81       	ldd	r19, Y+4	; 0x04
    1998:	22 30       	cpi	r18, 0x02	; 2
    199a:	31 05       	cpc	r19, r1
    199c:	2c f4       	brge	.+10     	; 0x19a8 <GPIO_writePort+0x3e>
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	61 f0       	breq	.+24     	; 0x19be <GPIO_writePort+0x54>
    19a6:	1e c0       	rjmp	.+60     	; 0x19e4 <GPIO_writePort+0x7a>
    19a8:	2b 81       	ldd	r18, Y+3	; 0x03
    19aa:	3c 81       	ldd	r19, Y+4	; 0x04
    19ac:	22 30       	cpi	r18, 0x02	; 2
    19ae:	31 05       	cpc	r19, r1
    19b0:	81 f0       	breq	.+32     	; 0x19d2 <GPIO_writePort+0x68>
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	83 30       	cpi	r24, 0x03	; 3
    19b8:	91 05       	cpc	r25, r1
    19ba:	81 f0       	breq	.+32     	; 0x19dc <GPIO_writePort+0x72>
    19bc:	13 c0       	rjmp	.+38     	; 0x19e4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    19be:	eb e3       	ldi	r30, 0x3B	; 59
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	80 83       	st	Z, r24
    19c6:	0e c0       	rjmp	.+28     	; 0x19e4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    19c8:	e8 e3       	ldi	r30, 0x38	; 56
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	80 83       	st	Z, r24
    19d0:	09 c0       	rjmp	.+18     	; 0x19e4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    19d2:	e5 e3       	ldi	r30, 0x35	; 53
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	80 83       	st	Z, r24
    19da:	04 c0       	rjmp	.+8      	; 0x19e4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    19dc:	e2 e3       	ldi	r30, 0x32	; 50
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	80 83       	st	Z, r24
			break;
		}
	}
}
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <GPIO_readPort+0x6>
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <GPIO_readPort+0x8>
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a00:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	84 30       	cpi	r24, 0x04	; 4
    1a06:	90 f5       	brcc	.+100    	; 0x1a6c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	3c 83       	std	Y+4, r19	; 0x04
    1a10:	2b 83       	std	Y+3, r18	; 0x03
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	91 05       	cpc	r25, r1
    1a1a:	d1 f0       	breq	.+52     	; 0x1a50 <GPIO_readPort+0x5e>
    1a1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a20:	22 30       	cpi	r18, 0x02	; 2
    1a22:	31 05       	cpc	r19, r1
    1a24:	2c f4       	brge	.+10     	; 0x1a30 <GPIO_readPort+0x3e>
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	61 f0       	breq	.+24     	; 0x1a46 <GPIO_readPort+0x54>
    1a2e:	1e c0       	rjmp	.+60     	; 0x1a6c <GPIO_readPort+0x7a>
    1a30:	2b 81       	ldd	r18, Y+3	; 0x03
    1a32:	3c 81       	ldd	r19, Y+4	; 0x04
    1a34:	22 30       	cpi	r18, 0x02	; 2
    1a36:	31 05       	cpc	r19, r1
    1a38:	81 f0       	breq	.+32     	; 0x1a5a <GPIO_readPort+0x68>
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3e:	83 30       	cpi	r24, 0x03	; 3
    1a40:	91 05       	cpc	r25, r1
    1a42:	81 f0       	breq	.+32     	; 0x1a64 <GPIO_readPort+0x72>
    1a44:	13 c0       	rjmp	.+38     	; 0x1a6c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1a46:	e9 e3       	ldi	r30, 0x39	; 57
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	0e c0       	rjmp	.+28     	; 0x1a6c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a50:	e6 e3       	ldi	r30, 0x36	; 54
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	09 c0       	rjmp	.+18     	; 0x1a6c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1a5a:	e3 e3       	ldi	r30, 0x33	; 51
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1a64:	e0 e3       	ldi	r30, 0x30	; 48
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <KEYPAD_init>:
 *
 *******************************************************************************/

#include "keypad.h"

void KEYPAD_init(void) {
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	0f 92       	push	r0
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for (i = 0; i < KEYPAD_ROWS; i++) {
    1a86:	19 82       	std	Y+1, r1	; 0x01
    1a88:	0b c0       	rjmp	.+22     	; 0x1aa0 <KEYPAD_init+0x24>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW_START_PIN + i,
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	98 2f       	mov	r25, r24
    1a8e:	9c 5f       	subi	r25, 0xFC	; 252
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	69 2f       	mov	r22, r25
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_setupPinDirection>

#include "keypad.h"

void KEYPAD_init(void) {
	uint8 i;
	for (i = 0; i < KEYPAD_ROWS; i++) {
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	8f 5f       	subi	r24, 0xFF	; 255
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	84 30       	cpi	r24, 0x04	; 4
    1aa4:	90 f3       	brcs	.-28     	; 0x1a8a <KEYPAD_init+0xe>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW_START_PIN + i,
				PIN_INPUT);
	}
	for (i = 0; i < KEYPAD_COLS; i++) {
    1aa6:	19 82       	std	Y+1, r1	; 0x01
    1aa8:	0b c0       	rjmp	.+22     	; 0x1ac0 <KEYPAD_init+0x44>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_COL_START_PIN + i,
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	98 2f       	mov	r25, r24
    1aae:	9e 5f       	subi	r25, 0xFE	; 254
    1ab0:	83 e0       	ldi	r24, 0x03	; 3
    1ab2:	69 2f       	mov	r22, r25
    1ab4:	40 e0       	ldi	r20, 0x00	; 0
    1ab6:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_setupPinDirection>
	uint8 i;
	for (i = 0; i < KEYPAD_ROWS; i++) {
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW_START_PIN + i,
				PIN_INPUT);
	}
	for (i = 0; i < KEYPAD_COLS; i++) {
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	8f 5f       	subi	r24, 0xFF	; 255
    1abe:	89 83       	std	Y+1, r24	; 0x01
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	84 30       	cpi	r24, 0x04	; 4
    1ac4:	90 f3       	brcs	.-28     	; 0x1aaa <KEYPAD_init+0x2e>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_COL_START_PIN + i,
				PIN_INPUT);
	}
}
    1ac6:	0f 90       	pop	r0
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <KEYPAD_decoder>:

uint8 KEYPAD_decoder(uint8 row, uint8 col) {
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	27 97       	sbiw	r28, 0x07	; 7
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	6a 83       	std	Y+2, r22	; 0x02
		}

	}
	return ((col) + 1 + (row) * KEYPAD_COLS);
#elif KEYPAD_TYPE == 1
	if (row == KEYPAD_ROWS - 1) {
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	83 30       	cpi	r24, 0x03	; 3
    1aea:	61 f5       	brne	.+88     	; 0x1b44 <KEYPAD_decoder+0x76>
		switch (col) {
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	3f 83       	std	Y+7, r19	; 0x07
    1af4:	2e 83       	std	Y+6, r18	; 0x06
    1af6:	8e 81       	ldd	r24, Y+6	; 0x06
    1af8:	9f 81       	ldd	r25, Y+7	; 0x07
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	91 05       	cpc	r25, r1
    1afe:	c1 f0       	breq	.+48     	; 0x1b30 <KEYPAD_decoder+0x62>
    1b00:	2e 81       	ldd	r18, Y+6	; 0x06
    1b02:	3f 81       	ldd	r19, Y+7	; 0x07
    1b04:	22 30       	cpi	r18, 0x02	; 2
    1b06:	31 05       	cpc	r19, r1
    1b08:	2c f4       	brge	.+10     	; 0x1b14 <KEYPAD_decoder+0x46>
    1b0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	61 f0       	breq	.+24     	; 0x1b2a <KEYPAD_decoder+0x5c>
    1b12:	16 c0       	rjmp	.+44     	; 0x1b40 <KEYPAD_decoder+0x72>
    1b14:	2e 81       	ldd	r18, Y+6	; 0x06
    1b16:	3f 81       	ldd	r19, Y+7	; 0x07
    1b18:	22 30       	cpi	r18, 0x02	; 2
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	59 f0       	breq	.+22     	; 0x1b34 <KEYPAD_decoder+0x66>
    1b1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b20:	9f 81       	ldd	r25, Y+7	; 0x07
    1b22:	83 30       	cpi	r24, 0x03	; 3
    1b24:	91 05       	cpc	r25, r1
    1b26:	49 f0       	breq	.+18     	; 0x1b3a <KEYPAD_decoder+0x6c>
    1b28:	0b c0       	rjmp	.+22     	; 0x1b40 <KEYPAD_decoder+0x72>
		case 0:
			return '~';
    1b2a:	9e e7       	ldi	r25, 0x7E	; 126
    1b2c:	9d 83       	std	Y+5, r25	; 0x05
    1b2e:	4b c0       	rjmp	.+150    	; 0x1bc6 <KEYPAD_decoder+0xf8>
		case 1:
			return 0;
    1b30:	1d 82       	std	Y+5, r1	; 0x05
    1b32:	49 c0       	rjmp	.+146    	; 0x1bc6 <KEYPAD_decoder+0xf8>
		case 2:
			return '=';
    1b34:	2d e3       	ldi	r18, 0x3D	; 61
    1b36:	2d 83       	std	Y+5, r18	; 0x05
    1b38:	46 c0       	rjmp	.+140    	; 0x1bc6 <KEYPAD_decoder+0xf8>
		case 3:
			return '+';
    1b3a:	3b e2       	ldi	r19, 0x2B	; 43
    1b3c:	3d 83       	std	Y+5, r19	; 0x05
    1b3e:	43 c0       	rjmp	.+134    	; 0x1bc6 <KEYPAD_decoder+0xf8>
		default:
			return 0;
    1b40:	1d 82       	std	Y+5, r1	; 0x05
    1b42:	41 c0       	rjmp	.+130    	; 0x1bc6 <KEYPAD_decoder+0xf8>
		}
	} else if (col == KEYPAD_COLS - 1) {
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	69 f5       	brne	.+90     	; 0x1ba4 <KEYPAD_decoder+0xd6>
		switch (row) {
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	3c 83       	std	Y+4, r19	; 0x04
    1b52:	2b 83       	std	Y+3, r18	; 0x03
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	c1 f0       	breq	.+48     	; 0x1b8e <KEYPAD_decoder+0xc0>
    1b5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b60:	3c 81       	ldd	r19, Y+4	; 0x04
    1b62:	22 30       	cpi	r18, 0x02	; 2
    1b64:	31 05       	cpc	r19, r1
    1b66:	2c f4       	brge	.+10     	; 0x1b72 <KEYPAD_decoder+0xa4>
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	61 f0       	breq	.+24     	; 0x1b88 <KEYPAD_decoder+0xba>
    1b70:	17 c0       	rjmp	.+46     	; 0x1ba0 <KEYPAD_decoder+0xd2>
    1b72:	2b 81       	ldd	r18, Y+3	; 0x03
    1b74:	3c 81       	ldd	r19, Y+4	; 0x04
    1b76:	22 30       	cpi	r18, 0x02	; 2
    1b78:	31 05       	cpc	r19, r1
    1b7a:	61 f0       	breq	.+24     	; 0x1b94 <KEYPAD_decoder+0xc6>
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	83 30       	cpi	r24, 0x03	; 3
    1b82:	91 05       	cpc	r25, r1
    1b84:	51 f0       	breq	.+20     	; 0x1b9a <KEYPAD_decoder+0xcc>
    1b86:	0c c0       	rjmp	.+24     	; 0x1ba0 <KEYPAD_decoder+0xd2>
		case 0:
			return '/';
    1b88:	9f e2       	ldi	r25, 0x2F	; 47
    1b8a:	9d 83       	std	Y+5, r25	; 0x05
    1b8c:	1c c0       	rjmp	.+56     	; 0x1bc6 <KEYPAD_decoder+0xf8>
		case 1:
			return '*';
    1b8e:	2a e2       	ldi	r18, 0x2A	; 42
    1b90:	2d 83       	std	Y+5, r18	; 0x05
    1b92:	19 c0       	rjmp	.+50     	; 0x1bc6 <KEYPAD_decoder+0xf8>
		case 2:
			return '-';
    1b94:	3d e2       	ldi	r19, 0x2D	; 45
    1b96:	3d 83       	std	Y+5, r19	; 0x05
    1b98:	16 c0       	rjmp	.+44     	; 0x1bc6 <KEYPAD_decoder+0xf8>
		case 3:
			return '+';
    1b9a:	8b e2       	ldi	r24, 0x2B	; 43
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
    1b9e:	13 c0       	rjmp	.+38     	; 0x1bc6 <KEYPAD_decoder+0xf8>
		default:
			return 0;
    1ba0:	1d 82       	std	Y+5, r1	; 0x05
    1ba2:	11 c0       	rjmp	.+34     	; 0x1bc6 <KEYPAD_decoder+0xf8>
		}
	}
	return ((col) + 7 + (row) * -3);
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	c9 01       	movw	r24, r18
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	82 0f       	add	r24, r18
    1bb2:	93 1f       	adc	r25, r19
    1bb4:	90 95       	com	r25
    1bb6:	81 95       	neg	r24
    1bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bba:	98 2f       	mov	r25, r24
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	89 0f       	add	r24, r25
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	99 5f       	subi	r25, 0xF9	; 249
    1bc4:	9d 83       	std	Y+5, r25	; 0x05
    1bc6:	8d 81       	ldd	r24, Y+5	; 0x05
#else
	return 0;
#endif
}
    1bc8:	27 96       	adiw	r28, 0x07	; 7
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <KEYPAD_getPressedKey>:

uint8 KEYPAD_getPressedKey(void) {
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	6e 97       	sbiw	r28, 0x1e	; 30
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
	uint8 row, col;
	KEYPAD_init();
    1bee:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <KEYPAD_init>
	while (1) {
		for (row = 0; row < KEYPAD_ROWS; row++) {
    1bf2:	1e 8e       	std	Y+30, r1	; 0x1e
    1bf4:	1e c1       	rjmp	.+572    	; 0x1e32 <KEYPAD_getPressedKey+0x258>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW_START_PIN + row,
    1bf6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bf8:	98 2f       	mov	r25, r24
    1bfa:	9c 5f       	subi	r25, 0xFC	; 252
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	69 2f       	mov	r22, r25
    1c00:	41 e0       	ldi	r20, 0x01	; 1
    1c02:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_setupPinDirection>
					PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_ROW_START_PIN + row,
    1c06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c08:	98 2f       	mov	r25, r24
    1c0a:	9c 5f       	subi	r25, 0xFC	; 252
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	69 2f       	mov	r22, r25
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
			KEYPAD_KEY_PRESSED);

			for (col = 0; col < KEYPAD_COLS; col++) {
    1c16:	1d 8e       	std	Y+29, r1	; 0x1d
    1c18:	8b c0       	rjmp	.+278    	; 0x1d30 <KEYPAD_getPressedKey+0x156>
				if (GPIO_readPin(KEYPAD_COL_PORT,
    1c1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c1c:	98 2f       	mov	r25, r24
    1c1e:	9e 5f       	subi	r25, 0xFE	; 254
    1c20:	83 e0       	ldi	r24, 0x03	; 3
    1c22:	69 2f       	mov	r22, r25
    1c24:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <GPIO_readPin>
    1c28:	88 23       	and	r24, r24
    1c2a:	69 f4       	brne	.+26     	; 0x1c46 <KEYPAD_getPressedKey+0x6c>
				KEYPAD_COL_START_PIN + col) == KEYPAD_KEY_PRESSED) {
					return KEYPAD_decoder(row, col);
    1c2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c2e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c30:	0e 94 67 0d 	call	0x1ace	; 0x1ace <KEYPAD_decoder>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW_START_PIN + row,
					PIN_INPUT);
			_delay_ms(5);
		}
	}
}
    1c34:	6e 96       	adiw	r28, 0x1e	; 30
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret
			KEYPAD_KEY_PRESSED);

			for (col = 0; col < KEYPAD_COLS; col++) {
				if (GPIO_readPin(KEYPAD_COL_PORT,
				KEYPAD_COL_START_PIN + col) == KEYPAD_KEY_PRESSED) {
					return KEYPAD_decoder(row, col);
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	a0 ea       	ldi	r26, 0xA0	; 160
    1c4c:	b0 e4       	ldi	r27, 0x40	; 64
    1c4e:	89 8f       	std	Y+25, r24	; 0x19
    1c50:	9a 8f       	std	Y+26, r25	; 0x1a
    1c52:	ab 8f       	std	Y+27, r26	; 0x1b
    1c54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c56:	69 8d       	ldd	r22, Y+25	; 0x19
    1c58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	4a e7       	ldi	r20, 0x7A	; 122
    1c64:	55 e4       	ldi	r21, 0x45	; 69
    1c66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	8d 8b       	std	Y+21, r24	; 0x15
    1c70:	9e 8b       	std	Y+22, r25	; 0x16
    1c72:	af 8b       	std	Y+23, r26	; 0x17
    1c74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c76:	6d 89       	ldd	r22, Y+21	; 0x15
    1c78:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e8       	ldi	r20, 0x80	; 128
    1c84:	5f e3       	ldi	r21, 0x3F	; 63
    1c86:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c8a:	88 23       	and	r24, r24
    1c8c:	2c f4       	brge	.+10     	; 0x1c98 <KEYPAD_getPressedKey+0xbe>
		__ticks = 1;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	9c 8b       	std	Y+20, r25	; 0x14
    1c94:	8b 8b       	std	Y+19, r24	; 0x13
    1c96:	3f c0       	rjmp	.+126    	; 0x1d16 <KEYPAD_getPressedKey+0x13c>
	else if (__tmp > 65535)
    1c98:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	3f ef       	ldi	r19, 0xFF	; 255
    1ca4:	4f e7       	ldi	r20, 0x7F	; 127
    1ca6:	57 e4       	ldi	r21, 0x47	; 71
    1ca8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cac:	18 16       	cp	r1, r24
    1cae:	4c f5       	brge	.+82     	; 0x1d02 <KEYPAD_getPressedKey+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1cb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e2       	ldi	r20, 0x20	; 32
    1cbe:	51 e4       	ldi	r21, 0x41	; 65
    1cc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	bc 01       	movw	r22, r24
    1cca:	cd 01       	movw	r24, r26
    1ccc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	9c 8b       	std	Y+20, r25	; 0x14
    1cd6:	8b 8b       	std	Y+19, r24	; 0x13
    1cd8:	0f c0       	rjmp	.+30     	; 0x1cf8 <KEYPAD_getPressedKey+0x11e>
    1cda:	80 e9       	ldi	r24, 0x90	; 144
    1cdc:	91 e0       	ldi	r25, 0x01	; 1
    1cde:	9a 8b       	std	Y+18, r25	; 0x12
    1ce0:	89 8b       	std	Y+17, r24	; 0x11
    1ce2:	89 89       	ldd	r24, Y+17	; 0x11
    1ce4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <KEYPAD_getPressedKey+0x10c>
    1cea:	9a 8b       	std	Y+18, r25	; 0x12
    1cec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cee:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	9c 8b       	std	Y+20, r25	; 0x14
    1cf6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	69 f7       	brne	.-38     	; 0x1cda <KEYPAD_getPressedKey+0x100>
    1d00:	14 c0       	rjmp	.+40     	; 0x1d2a <KEYPAD_getPressedKey+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d02:	6d 89       	ldd	r22, Y+21	; 0x15
    1d04:	7e 89       	ldd	r23, Y+22	; 0x16
    1d06:	8f 89       	ldd	r24, Y+23	; 0x17
    1d08:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	9c 8b       	std	Y+20, r25	; 0x14
    1d14:	8b 8b       	std	Y+19, r24	; 0x13
    1d16:	8b 89       	ldd	r24, Y+19	; 0x13
    1d18:	9c 89       	ldd	r25, Y+20	; 0x14
    1d1a:	98 8b       	std	Y+16, r25	; 0x10
    1d1c:	8f 87       	std	Y+15, r24	; 0x0f
    1d1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d20:	98 89       	ldd	r25, Y+16	; 0x10
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <KEYPAD_getPressedKey+0x148>
    1d26:	98 8b       	std	Y+16, r25	; 0x10
    1d28:	8f 87       	std	Y+15, r24	; 0x0f
			GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW_START_PIN + row,
					PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_ROW_START_PIN + row,
			KEYPAD_KEY_PRESSED);

			for (col = 0; col < KEYPAD_COLS; col++) {
    1d2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d2c:	8f 5f       	subi	r24, 0xFF	; 255
    1d2e:	8d 8f       	std	Y+29, r24	; 0x1d
    1d30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d32:	84 30       	cpi	r24, 0x04	; 4
    1d34:	08 f4       	brcc	.+2      	; 0x1d38 <KEYPAD_getPressedKey+0x15e>
    1d36:	71 cf       	rjmp	.-286    	; 0x1c1a <KEYPAD_getPressedKey+0x40>
					return KEYPAD_decoder(row, col);
				}
				_delay_ms(5);
			}

			GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW_START_PIN + row,
    1d38:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d3a:	98 2f       	mov	r25, r24
    1d3c:	9c 5f       	subi	r25, 0xFC	; 252
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	69 2f       	mov	r22, r25
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_setupPinDirection>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	a0 ea       	ldi	r26, 0xA0	; 160
    1d4e:	b0 e4       	ldi	r27, 0x40	; 64
    1d50:	8b 87       	std	Y+11, r24	; 0x0b
    1d52:	9c 87       	std	Y+12, r25	; 0x0c
    1d54:	ad 87       	std	Y+13, r26	; 0x0d
    1d56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	4a e7       	ldi	r20, 0x7A	; 122
    1d66:	55 e4       	ldi	r21, 0x45	; 69
    1d68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	8f 83       	std	Y+7, r24	; 0x07
    1d72:	98 87       	std	Y+8, r25	; 0x08
    1d74:	a9 87       	std	Y+9, r26	; 0x09
    1d76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d78:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7a:	78 85       	ldd	r23, Y+8	; 0x08
    1d7c:	89 85       	ldd	r24, Y+9	; 0x09
    1d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e8       	ldi	r20, 0x80	; 128
    1d86:	5f e3       	ldi	r21, 0x3F	; 63
    1d88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d8c:	88 23       	and	r24, r24
    1d8e:	2c f4       	brge	.+10     	; 0x1d9a <KEYPAD_getPressedKey+0x1c0>
		__ticks = 1;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9e 83       	std	Y+6, r25	; 0x06
    1d96:	8d 83       	std	Y+5, r24	; 0x05
    1d98:	3f c0       	rjmp	.+126    	; 0x1e18 <KEYPAD_getPressedKey+0x23e>
	else if (__tmp > 65535)
    1d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9c:	78 85       	ldd	r23, Y+8	; 0x08
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	3f ef       	ldi	r19, 0xFF	; 255
    1da6:	4f e7       	ldi	r20, 0x7F	; 127
    1da8:	57 e4       	ldi	r21, 0x47	; 71
    1daa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dae:	18 16       	cp	r1, r24
    1db0:	4c f5       	brge	.+82     	; 0x1e04 <KEYPAD_getPressedKey+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e2       	ldi	r20, 0x20	; 32
    1dc0:	51 e4       	ldi	r21, 0x41	; 65
    1dc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	bc 01       	movw	r22, r24
    1dcc:	cd 01       	movw	r24, r26
    1dce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	9e 83       	std	Y+6, r25	; 0x06
    1dd8:	8d 83       	std	Y+5, r24	; 0x05
    1dda:	0f c0       	rjmp	.+30     	; 0x1dfa <KEYPAD_getPressedKey+0x220>
    1ddc:	80 e9       	ldi	r24, 0x90	; 144
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	9c 83       	std	Y+4, r25	; 0x04
    1de2:	8b 83       	std	Y+3, r24	; 0x03
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	9c 81       	ldd	r25, Y+4	; 0x04
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <KEYPAD_getPressedKey+0x20e>
    1dec:	9c 83       	std	Y+4, r25	; 0x04
    1dee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df0:	8d 81       	ldd	r24, Y+5	; 0x05
    1df2:	9e 81       	ldd	r25, Y+6	; 0x06
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	69 f7       	brne	.-38     	; 0x1ddc <KEYPAD_getPressedKey+0x202>
    1e02:	14 c0       	rjmp	.+40     	; 0x1e2c <KEYPAD_getPressedKey+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e04:	6f 81       	ldd	r22, Y+7	; 0x07
    1e06:	78 85       	ldd	r23, Y+8	; 0x08
    1e08:	89 85       	ldd	r24, Y+9	; 0x09
    1e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	9e 83       	std	Y+6, r25	; 0x06
    1e16:	8d 83       	std	Y+5, r24	; 0x05
    1e18:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1c:	9a 83       	std	Y+2, r25	; 0x02
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	9a 81       	ldd	r25, Y+2	; 0x02
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <KEYPAD_getPressedKey+0x24a>
    1e28:	9a 83       	std	Y+2, r25	; 0x02
    1e2a:	89 83       	std	Y+1, r24	; 0x01

uint8 KEYPAD_getPressedKey(void) {
	uint8 row, col;
	KEYPAD_init();
	while (1) {
		for (row = 0; row < KEYPAD_ROWS; row++) {
    1e2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e2e:	8f 5f       	subi	r24, 0xFF	; 255
    1e30:	8e 8f       	std	Y+30, r24	; 0x1e
    1e32:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e34:	84 30       	cpi	r24, 0x04	; 4
    1e36:	08 f4       	brcc	.+2      	; 0x1e3a <KEYPAD_getPressedKey+0x260>
    1e38:	de ce       	rjmp	.-580    	; 0x1bf6 <KEYPAD_getPressedKey+0x1c>
    1e3a:	db ce       	rjmp	.-586    	; 0x1bf2 <KEYPAD_getPressedKey+0x18>

00001e3c <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void) {
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	2e 97       	sbiw	r28, 0x0e	; 14
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	61 e0       	ldi	r22, 0x01	; 1
    1e54:	41 e0       	ldi	r20, 0x01	; 1
    1e56:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	62 e0       	ldi	r22, 0x02	; 2
    1e5e:	41 e0       	ldi	r20, 0x01	; 1
    1e60:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_setupPinDirection>
#if LCD_BITS == 8
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
#elif LCD_BITS == 4
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID, PIN_OUTPUT);
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	63 e0       	ldi	r22, 0x03	; 3
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID+1, PIN_OUTPUT);
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	64 e0       	ldi	r22, 0x04	; 4
    1e72:	41 e0       	ldi	r20, 0x01	; 1
    1e74:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID+2, PIN_OUTPUT);
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	65 e0       	ldi	r22, 0x05	; 5
    1e7c:	41 e0       	ldi	r20, 0x01	; 1
    1e7e:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID+3, PIN_OUTPUT);
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	66 e0       	ldi	r22, 0x06	; 6
    1e86:	41 e0       	ldi	r20, 0x01	; 1
    1e88:	0e 94 00 0a 	call	0x1400	; 0x1400 <GPIO_setupPinDirection>
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	a0 ea       	ldi	r26, 0xA0	; 160
    1e92:	b1 e4       	ldi	r27, 0x41	; 65
    1e94:	8b 87       	std	Y+11, r24	; 0x0b
    1e96:	9c 87       	std	Y+12, r25	; 0x0c
    1e98:	ad 87       	std	Y+13, r26	; 0x0d
    1e9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	4a e7       	ldi	r20, 0x7A	; 122
    1eaa:	55 e4       	ldi	r21, 0x45	; 69
    1eac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	8f 83       	std	Y+7, r24	; 0x07
    1eb6:	98 87       	std	Y+8, r25	; 0x08
    1eb8:	a9 87       	std	Y+9, r26	; 0x09
    1eba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ebc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebe:	78 85       	ldd	r23, Y+8	; 0x08
    1ec0:	89 85       	ldd	r24, Y+9	; 0x09
    1ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e8       	ldi	r20, 0x80	; 128
    1eca:	5f e3       	ldi	r21, 0x3F	; 63
    1ecc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ed0:	88 23       	and	r24, r24
    1ed2:	2c f4       	brge	.+10     	; 0x1ede <LCD_init+0xa2>
		__ticks = 1;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	9e 83       	std	Y+6, r25	; 0x06
    1eda:	8d 83       	std	Y+5, r24	; 0x05
    1edc:	3f c0       	rjmp	.+126    	; 0x1f5c <LCD_init+0x120>
	else if (__tmp > 65535)
    1ede:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee0:	78 85       	ldd	r23, Y+8	; 0x08
    1ee2:	89 85       	ldd	r24, Y+9	; 0x09
    1ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	3f ef       	ldi	r19, 0xFF	; 255
    1eea:	4f e7       	ldi	r20, 0x7F	; 127
    1eec:	57 e4       	ldi	r21, 0x47	; 71
    1eee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ef2:	18 16       	cp	r1, r24
    1ef4:	4c f5       	brge	.+82     	; 0x1f48 <LCD_init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1efc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e2       	ldi	r20, 0x20	; 32
    1f04:	51 e4       	ldi	r21, 0x41	; 65
    1f06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9e 83       	std	Y+6, r25	; 0x06
    1f1c:	8d 83       	std	Y+5, r24	; 0x05
    1f1e:	0f c0       	rjmp	.+30     	; 0x1f3e <LCD_init+0x102>
    1f20:	80 e9       	ldi	r24, 0x90	; 144
    1f22:	91 e0       	ldi	r25, 0x01	; 1
    1f24:	9c 83       	std	Y+4, r25	; 0x04
    1f26:	8b 83       	std	Y+3, r24	; 0x03
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD_init+0xf0>
    1f30:	9c 83       	std	Y+4, r25	; 0x04
    1f32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f34:	8d 81       	ldd	r24, Y+5	; 0x05
    1f36:	9e 81       	ldd	r25, Y+6	; 0x06
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	69 f7       	brne	.-38     	; 0x1f20 <LCD_init+0xe4>
    1f46:	14 c0       	rjmp	.+40     	; 0x1f70 <LCD_init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f48:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4a:	78 85       	ldd	r23, Y+8	; 0x08
    1f4c:	89 85       	ldd	r24, Y+9	; 0x09
    1f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	9e 83       	std	Y+6, r25	; 0x06
    1f5a:	8d 83       	std	Y+5, r24	; 0x05
    1f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f60:	9a 83       	std	Y+2, r25	; 0x02
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <LCD_init+0x12c>
    1f6c:	9a 83       	std	Y+2, r25	; 0x02
    1f6e:	89 83       	std	Y+1, r24	; 0x01
#if LCD_BITS == 8
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_EIGHT_BIT_TWO_LINES_5x7);

#elif LCD_BITS == 4
	LCD_sendCommand(LCD_FOUR_BIT_TWO_LINES_INIT1);
    1f70:	83 e3       	ldi	r24, 0x33	; 51
    1f72:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <LCD_sendCommand>
	LCD_sendCommand(LCD_FOUR_BIT_TWO_LINES_INIT2);
    1f76:	82 e3       	ldi	r24, 0x32	; 50
    1f78:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <LCD_sendCommand>
	LCD_sendCommand(LCD_FOUR_BIT_TWO_LINES_5x7);
    1f7c:	88 e2       	ldi	r24, 0x28	; 40
    1f7e:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <LCD_sendCommand>
#endif
	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF); /* cursor off */
    1f82:	8c e0       	ldi	r24, 0x0C	; 12
    1f84:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY); /* clear LCD at the beginning */
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <LCD_sendCommand>
}
    1f8e:	2e 96       	adiw	r28, 0x0e	; 14
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command) {
    1fa0:	0f 93       	push	r16
    1fa2:	1f 93       	push	r17
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	c3 56       	subi	r28, 0x63	; 99
    1fae:	d0 40       	sbci	r29, 0x00	; 0
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
    1fba:	fe 01       	movw	r30, r28
    1fbc:	ed 59       	subi	r30, 0x9D	; 157
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	61 e0       	ldi	r22, 0x01	; 1
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
    1fcc:	fe 01       	movw	r30, r28
    1fce:	e1 5a       	subi	r30, 0xA1	; 161
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	a0 e8       	ldi	r26, 0x80	; 128
    1fd8:	bf e3       	ldi	r27, 0x3F	; 63
    1fda:	80 83       	st	Z, r24
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	a2 83       	std	Z+2, r26	; 0x02
    1fe0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe2:	8e 01       	movw	r16, r28
    1fe4:	05 5a       	subi	r16, 0xA5	; 165
    1fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e1 5a       	subi	r30, 0xA1	; 161
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	60 81       	ld	r22, Z
    1ff0:	71 81       	ldd	r23, Z+1	; 0x01
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	4a e7       	ldi	r20, 0x7A	; 122
    1ffc:	55 e4       	ldi	r21, 0x45	; 69
    1ffe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	f8 01       	movw	r30, r16
    2008:	80 83       	st	Z, r24
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	a2 83       	std	Z+2, r26	; 0x02
    200e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2010:	fe 01       	movw	r30, r28
    2012:	e5 5a       	subi	r30, 0xA5	; 165
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	60 81       	ld	r22, Z
    2018:	71 81       	ldd	r23, Z+1	; 0x01
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	93 81       	ldd	r25, Z+3	; 0x03
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e8       	ldi	r20, 0x80	; 128
    2024:	5f e3       	ldi	r21, 0x3F	; 63
    2026:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    202a:	88 23       	and	r24, r24
    202c:	44 f4       	brge	.+16     	; 0x203e <LCD_sendCommand+0x9e>
		__ticks = 1;
    202e:	fe 01       	movw	r30, r28
    2030:	e7 5a       	subi	r30, 0xA7	; 167
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	80 83       	st	Z, r24
    203c:	64 c0       	rjmp	.+200    	; 0x2106 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    203e:	fe 01       	movw	r30, r28
    2040:	e5 5a       	subi	r30, 0xA5	; 165
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	60 81       	ld	r22, Z
    2046:	71 81       	ldd	r23, Z+1	; 0x01
    2048:	82 81       	ldd	r24, Z+2	; 0x02
    204a:	93 81       	ldd	r25, Z+3	; 0x03
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	3f ef       	ldi	r19, 0xFF	; 255
    2050:	4f e7       	ldi	r20, 0x7F	; 127
    2052:	57 e4       	ldi	r21, 0x47	; 71
    2054:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2058:	18 16       	cp	r1, r24
    205a:	0c f0       	brlt	.+2      	; 0x205e <LCD_sendCommand+0xbe>
    205c:	43 c0       	rjmp	.+134    	; 0x20e4 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205e:	fe 01       	movw	r30, r28
    2060:	e1 5a       	subi	r30, 0xA1	; 161
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	60 81       	ld	r22, Z
    2066:	71 81       	ldd	r23, Z+1	; 0x01
    2068:	82 81       	ldd	r24, Z+2	; 0x02
    206a:	93 81       	ldd	r25, Z+3	; 0x03
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e2       	ldi	r20, 0x20	; 32
    2072:	51 e4       	ldi	r21, 0x41	; 65
    2074:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	8e 01       	movw	r16, r28
    207e:	07 5a       	subi	r16, 0xA7	; 167
    2080:	1f 4f       	sbci	r17, 0xFF	; 255
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	f8 01       	movw	r30, r16
    2090:	91 83       	std	Z+1, r25	; 0x01
    2092:	80 83       	st	Z, r24
    2094:	1f c0       	rjmp	.+62     	; 0x20d4 <LCD_sendCommand+0x134>
    2096:	fe 01       	movw	r30, r28
    2098:	e9 5a       	subi	r30, 0xA9	; 169
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	80 e9       	ldi	r24, 0x90	; 144
    209e:	91 e0       	ldi	r25, 0x01	; 1
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	80 83       	st	Z, r24
    20a4:	fe 01       	movw	r30, r28
    20a6:	e9 5a       	subi	r30, 0xA9	; 169
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 81       	ld	r24, Z
    20ac:	91 81       	ldd	r25, Z+1	; 0x01
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <LCD_sendCommand+0x10e>
    20b2:	fe 01       	movw	r30, r28
    20b4:	e9 5a       	subi	r30, 0xA9	; 169
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	91 83       	std	Z+1, r25	; 0x01
    20ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20bc:	de 01       	movw	r26, r28
    20be:	a7 5a       	subi	r26, 0xA7	; 167
    20c0:	bf 4f       	sbci	r27, 0xFF	; 255
    20c2:	fe 01       	movw	r30, r28
    20c4:	e7 5a       	subi	r30, 0xA7	; 167
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	80 81       	ld	r24, Z
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	11 96       	adiw	r26, 0x01	; 1
    20d0:	9c 93       	st	X, r25
    20d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d4:	fe 01       	movw	r30, r28
    20d6:	e7 5a       	subi	r30, 0xA7	; 167
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 81       	ld	r24, Z
    20dc:	91 81       	ldd	r25, Z+1	; 0x01
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	d1 f6       	brne	.-76     	; 0x2096 <LCD_sendCommand+0xf6>
    20e2:	27 c0       	rjmp	.+78     	; 0x2132 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e4:	8e 01       	movw	r16, r28
    20e6:	07 5a       	subi	r16, 0xA7	; 167
    20e8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ea:	fe 01       	movw	r30, r28
    20ec:	e5 5a       	subi	r30, 0xA5	; 165
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	60 81       	ld	r22, Z
    20f2:	71 81       	ldd	r23, Z+1	; 0x01
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	93 81       	ldd	r25, Z+3	; 0x03
    20f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	f8 01       	movw	r30, r16
    2102:	91 83       	std	Z+1, r25	; 0x01
    2104:	80 83       	st	Z, r24
    2106:	de 01       	movw	r26, r28
    2108:	ab 5a       	subi	r26, 0xAB	; 171
    210a:	bf 4f       	sbci	r27, 0xFF	; 255
    210c:	fe 01       	movw	r30, r28
    210e:	e7 5a       	subi	r30, 0xA7	; 167
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	80 81       	ld	r24, Z
    2114:	91 81       	ldd	r25, Z+1	; 0x01
    2116:	8d 93       	st	X+, r24
    2118:	9c 93       	st	X, r25
    211a:	fe 01       	movw	r30, r28
    211c:	eb 5a       	subi	r30, 0xAB	; 171
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	80 81       	ld	r24, Z
    2122:	91 81       	ldd	r25, Z+1	; 0x01
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	f1 f7       	brne	.-4      	; 0x2124 <LCD_sendCommand+0x184>
    2128:	fe 01       	movw	r30, r28
    212a:	eb 5a       	subi	r30, 0xAB	; 171
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	91 83       	std	Z+1, r25	; 0x01
    2130:	80 83       	st	Z, r24
	_delay_ms(1);

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	62 e0       	ldi	r22, 0x02	; 2
    2136:	41 e0       	ldi	r20, 0x01	; 1
    2138:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
    213c:	fe 01       	movw	r30, r28
    213e:	ef 5a       	subi	r30, 0xAF	; 175
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	a0 e8       	ldi	r26, 0x80	; 128
    2148:	bf e3       	ldi	r27, 0x3F	; 63
    214a:	80 83       	st	Z, r24
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	a2 83       	std	Z+2, r26	; 0x02
    2150:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2152:	8e 01       	movw	r16, r28
    2154:	03 5b       	subi	r16, 0xB3	; 179
    2156:	1f 4f       	sbci	r17, 0xFF	; 255
    2158:	fe 01       	movw	r30, r28
    215a:	ef 5a       	subi	r30, 0xAF	; 175
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	60 81       	ld	r22, Z
    2160:	71 81       	ldd	r23, Z+1	; 0x01
    2162:	82 81       	ldd	r24, Z+2	; 0x02
    2164:	93 81       	ldd	r25, Z+3	; 0x03
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	4a e7       	ldi	r20, 0x7A	; 122
    216c:	55 e4       	ldi	r21, 0x45	; 69
    216e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	f8 01       	movw	r30, r16
    2178:	80 83       	st	Z, r24
    217a:	91 83       	std	Z+1, r25	; 0x01
    217c:	a2 83       	std	Z+2, r26	; 0x02
    217e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2180:	fe 01       	movw	r30, r28
    2182:	e3 5b       	subi	r30, 0xB3	; 179
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e8       	ldi	r20, 0x80	; 128
    2194:	5f e3       	ldi	r21, 0x3F	; 63
    2196:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    219a:	88 23       	and	r24, r24
    219c:	44 f4       	brge	.+16     	; 0x21ae <LCD_sendCommand+0x20e>
		__ticks = 1;
    219e:	fe 01       	movw	r30, r28
    21a0:	e5 5b       	subi	r30, 0xB5	; 181
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	80 83       	st	Z, r24
    21ac:	64 c0       	rjmp	.+200    	; 0x2276 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    21ae:	fe 01       	movw	r30, r28
    21b0:	e3 5b       	subi	r30, 0xB3	; 179
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	82 81       	ldd	r24, Z+2	; 0x02
    21ba:	93 81       	ldd	r25, Z+3	; 0x03
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	3f ef       	ldi	r19, 0xFF	; 255
    21c0:	4f e7       	ldi	r20, 0x7F	; 127
    21c2:	57 e4       	ldi	r21, 0x47	; 71
    21c4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21c8:	18 16       	cp	r1, r24
    21ca:	0c f0       	brlt	.+2      	; 0x21ce <LCD_sendCommand+0x22e>
    21cc:	43 c0       	rjmp	.+134    	; 0x2254 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ce:	fe 01       	movw	r30, r28
    21d0:	ef 5a       	subi	r30, 0xAF	; 175
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	60 81       	ld	r22, Z
    21d6:	71 81       	ldd	r23, Z+1	; 0x01
    21d8:	82 81       	ldd	r24, Z+2	; 0x02
    21da:	93 81       	ldd	r25, Z+3	; 0x03
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e2       	ldi	r20, 0x20	; 32
    21e2:	51 e4       	ldi	r21, 0x41	; 65
    21e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	8e 01       	movw	r16, r28
    21ee:	05 5b       	subi	r16, 0xB5	; 181
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	f8 01       	movw	r30, r16
    2200:	91 83       	std	Z+1, r25	; 0x01
    2202:	80 83       	st	Z, r24
    2204:	1f c0       	rjmp	.+62     	; 0x2244 <LCD_sendCommand+0x2a4>
    2206:	fe 01       	movw	r30, r28
    2208:	e7 5b       	subi	r30, 0xB7	; 183
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 e9       	ldi	r24, 0x90	; 144
    220e:	91 e0       	ldi	r25, 0x01	; 1
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	80 83       	st	Z, r24
    2214:	fe 01       	movw	r30, r28
    2216:	e7 5b       	subi	r30, 0xB7	; 183
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 81       	ld	r24, Z
    221c:	91 81       	ldd	r25, Z+1	; 0x01
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	f1 f7       	brne	.-4      	; 0x221e <LCD_sendCommand+0x27e>
    2222:	fe 01       	movw	r30, r28
    2224:	e7 5b       	subi	r30, 0xB7	; 183
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222c:	de 01       	movw	r26, r28
    222e:	a5 5b       	subi	r26, 0xB5	; 181
    2230:	bf 4f       	sbci	r27, 0xFF	; 255
    2232:	fe 01       	movw	r30, r28
    2234:	e5 5b       	subi	r30, 0xB5	; 181
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	80 81       	ld	r24, Z
    223a:	91 81       	ldd	r25, Z+1	; 0x01
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	11 96       	adiw	r26, 0x01	; 1
    2240:	9c 93       	st	X, r25
    2242:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2244:	fe 01       	movw	r30, r28
    2246:	e5 5b       	subi	r30, 0xB5	; 181
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	80 81       	ld	r24, Z
    224c:	91 81       	ldd	r25, Z+1	; 0x01
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	d1 f6       	brne	.-76     	; 0x2206 <LCD_sendCommand+0x266>
    2252:	27 c0       	rjmp	.+78     	; 0x22a2 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2254:	8e 01       	movw	r16, r28
    2256:	05 5b       	subi	r16, 0xB5	; 181
    2258:	1f 4f       	sbci	r17, 0xFF	; 255
    225a:	fe 01       	movw	r30, r28
    225c:	e3 5b       	subi	r30, 0xB3	; 179
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	60 81       	ld	r22, Z
    2262:	71 81       	ldd	r23, Z+1	; 0x01
    2264:	82 81       	ldd	r24, Z+2	; 0x02
    2266:	93 81       	ldd	r25, Z+3	; 0x03
    2268:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	f8 01       	movw	r30, r16
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	80 83       	st	Z, r24
    2276:	de 01       	movw	r26, r28
    2278:	a9 5b       	subi	r26, 0xB9	; 185
    227a:	bf 4f       	sbci	r27, 0xFF	; 255
    227c:	fe 01       	movw	r30, r28
    227e:	e5 5b       	subi	r30, 0xB5	; 181
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	8d 93       	st	X+, r24
    2288:	9c 93       	st	X, r25
    228a:	fe 01       	movw	r30, r28
    228c:	e9 5b       	subi	r30, 0xB9	; 185
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	80 81       	ld	r24, Z
    2292:	91 81       	ldd	r25, Z+1	; 0x01
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <LCD_sendCommand+0x2f4>
    2298:	fe 01       	movw	r30, r28
    229a:	e9 5b       	subi	r30, 0xB9	; 185
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	91 83       	std	Z+1, r25	; 0x01
    22a0:	80 83       	st	Z, r24
	_delay_ms(1);
#if LCD_BITS == 8
	GPIO_writePort(LCD_DATA_PORT_ID, command);
#elif LCD_BITS == 4
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID, GET_BIT(command, 4));
    22a2:	fe 01       	movw	r30, r28
    22a4:	ed 59       	subi	r30, 0x9D	; 157
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	80 81       	ld	r24, Z
    22aa:	88 2f       	mov	r24, r24
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	80 71       	andi	r24, 0x10	; 16
    22b0:	90 70       	andi	r25, 0x00	; 0
    22b2:	95 95       	asr	r25
    22b4:	87 95       	ror	r24
    22b6:	95 95       	asr	r25
    22b8:	87 95       	ror	r24
    22ba:	95 95       	asr	r25
    22bc:	87 95       	ror	r24
    22be:	95 95       	asr	r25
    22c0:	87 95       	ror	r24
    22c2:	98 2f       	mov	r25, r24
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	63 e0       	ldi	r22, 0x03	; 3
    22c8:	49 2f       	mov	r20, r25
    22ca:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID+1, GET_BIT(command, 5));
    22ce:	fe 01       	movw	r30, r28
    22d0:	ed 59       	subi	r30, 0x9D	; 157
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	80 81       	ld	r24, Z
    22d6:	88 2f       	mov	r24, r24
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	80 72       	andi	r24, 0x20	; 32
    22dc:	90 70       	andi	r25, 0x00	; 0
    22de:	95 95       	asr	r25
    22e0:	87 95       	ror	r24
    22e2:	95 95       	asr	r25
    22e4:	87 95       	ror	r24
    22e6:	95 95       	asr	r25
    22e8:	87 95       	ror	r24
    22ea:	95 95       	asr	r25
    22ec:	87 95       	ror	r24
    22ee:	95 95       	asr	r25
    22f0:	87 95       	ror	r24
    22f2:	98 2f       	mov	r25, r24
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	64 e0       	ldi	r22, 0x04	; 4
    22f8:	49 2f       	mov	r20, r25
    22fa:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID+2, GET_BIT(command, 6));
    22fe:	fe 01       	movw	r30, r28
    2300:	ed 59       	subi	r30, 0x9D	; 157
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	80 81       	ld	r24, Z
    2306:	88 2f       	mov	r24, r24
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	80 74       	andi	r24, 0x40	; 64
    230c:	90 70       	andi	r25, 0x00	; 0
    230e:	08 2e       	mov	r0, r24
    2310:	89 2f       	mov	r24, r25
    2312:	00 0c       	add	r0, r0
    2314:	88 1f       	adc	r24, r24
    2316:	99 0b       	sbc	r25, r25
    2318:	00 0c       	add	r0, r0
    231a:	88 1f       	adc	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	98 2f       	mov	r25, r24
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	65 e0       	ldi	r22, 0x05	; 5
    2324:	49 2f       	mov	r20, r25
    2326:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID+3, GET_BIT(command, 7));
    232a:	fe 01       	movw	r30, r28
    232c:	ed 59       	subi	r30, 0x9D	; 157
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	80 81       	ld	r24, Z
    2332:	98 2f       	mov	r25, r24
    2334:	99 1f       	adc	r25, r25
    2336:	99 27       	eor	r25, r25
    2338:	99 1f       	adc	r25, r25
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	66 e0       	ldi	r22, 0x06	; 6
    233e:	49 2f       	mov	r20, r25
    2340:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
    2344:	fe 01       	movw	r30, r28
    2346:	ed 5b       	subi	r30, 0xBD	; 189
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	a0 e8       	ldi	r26, 0x80	; 128
    2350:	bf e3       	ldi	r27, 0x3F	; 63
    2352:	80 83       	st	Z, r24
    2354:	91 83       	std	Z+1, r25	; 0x01
    2356:	a2 83       	std	Z+2, r26	; 0x02
    2358:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235a:	8e 01       	movw	r16, r28
    235c:	01 5c       	subi	r16, 0xC1	; 193
    235e:	1f 4f       	sbci	r17, 0xFF	; 255
    2360:	fe 01       	movw	r30, r28
    2362:	ed 5b       	subi	r30, 0xBD	; 189
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	60 81       	ld	r22, Z
    2368:	71 81       	ldd	r23, Z+1	; 0x01
    236a:	82 81       	ldd	r24, Z+2	; 0x02
    236c:	93 81       	ldd	r25, Z+3	; 0x03
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	4a e7       	ldi	r20, 0x7A	; 122
    2374:	55 e4       	ldi	r21, 0x45	; 69
    2376:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	f8 01       	movw	r30, r16
    2380:	80 83       	st	Z, r24
    2382:	91 83       	std	Z+1, r25	; 0x01
    2384:	a2 83       	std	Z+2, r26	; 0x02
    2386:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2388:	fe 01       	movw	r30, r28
    238a:	ff 96       	adiw	r30, 0x3f	; 63
    238c:	60 81       	ld	r22, Z
    238e:	71 81       	ldd	r23, Z+1	; 0x01
    2390:	82 81       	ldd	r24, Z+2	; 0x02
    2392:	93 81       	ldd	r25, Z+3	; 0x03
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e8       	ldi	r20, 0x80	; 128
    239a:	5f e3       	ldi	r21, 0x3F	; 63
    239c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23a0:	88 23       	and	r24, r24
    23a2:	2c f4       	brge	.+10     	; 0x23ae <LCD_sendCommand+0x40e>
		__ticks = 1;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	9e af       	std	Y+62, r25	; 0x3e
    23aa:	8d af       	std	Y+61, r24	; 0x3d
    23ac:	46 c0       	rjmp	.+140    	; 0x243a <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    23ae:	fe 01       	movw	r30, r28
    23b0:	ff 96       	adiw	r30, 0x3f	; 63
    23b2:	60 81       	ld	r22, Z
    23b4:	71 81       	ldd	r23, Z+1	; 0x01
    23b6:	82 81       	ldd	r24, Z+2	; 0x02
    23b8:	93 81       	ldd	r25, Z+3	; 0x03
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	3f ef       	ldi	r19, 0xFF	; 255
    23be:	4f e7       	ldi	r20, 0x7F	; 127
    23c0:	57 e4       	ldi	r21, 0x47	; 71
    23c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23c6:	18 16       	cp	r1, r24
    23c8:	64 f5       	brge	.+88     	; 0x2422 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ca:	fe 01       	movw	r30, r28
    23cc:	ed 5b       	subi	r30, 0xBD	; 189
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	60 81       	ld	r22, Z
    23d2:	71 81       	ldd	r23, Z+1	; 0x01
    23d4:	82 81       	ldd	r24, Z+2	; 0x02
    23d6:	93 81       	ldd	r25, Z+3	; 0x03
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e2       	ldi	r20, 0x20	; 32
    23de:	51 e4       	ldi	r21, 0x41	; 65
    23e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	bc 01       	movw	r22, r24
    23ea:	cd 01       	movw	r24, r26
    23ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	9e af       	std	Y+62, r25	; 0x3e
    23f6:	8d af       	std	Y+61, r24	; 0x3d
    23f8:	0f c0       	rjmp	.+30     	; 0x2418 <LCD_sendCommand+0x478>
    23fa:	80 e9       	ldi	r24, 0x90	; 144
    23fc:	91 e0       	ldi	r25, 0x01	; 1
    23fe:	9c af       	std	Y+60, r25	; 0x3c
    2400:	8b af       	std	Y+59, r24	; 0x3b
    2402:	8b ad       	ldd	r24, Y+59	; 0x3b
    2404:	9c ad       	ldd	r25, Y+60	; 0x3c
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	f1 f7       	brne	.-4      	; 0x2406 <LCD_sendCommand+0x466>
    240a:	9c af       	std	Y+60, r25	; 0x3c
    240c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2410:	9e ad       	ldd	r25, Y+62	; 0x3e
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	9e af       	std	Y+62, r25	; 0x3e
    2416:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2418:	8d ad       	ldd	r24, Y+61	; 0x3d
    241a:	9e ad       	ldd	r25, Y+62	; 0x3e
    241c:	00 97       	sbiw	r24, 0x00	; 0
    241e:	69 f7       	brne	.-38     	; 0x23fa <LCD_sendCommand+0x45a>
    2420:	16 c0       	rjmp	.+44     	; 0x244e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2422:	fe 01       	movw	r30, r28
    2424:	ff 96       	adiw	r30, 0x3f	; 63
    2426:	60 81       	ld	r22, Z
    2428:	71 81       	ldd	r23, Z+1	; 0x01
    242a:	82 81       	ldd	r24, Z+2	; 0x02
    242c:	93 81       	ldd	r25, Z+3	; 0x03
    242e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	9e af       	std	Y+62, r25	; 0x3e
    2438:	8d af       	std	Y+61, r24	; 0x3d
    243a:	8d ad       	ldd	r24, Y+61	; 0x3d
    243c:	9e ad       	ldd	r25, Y+62	; 0x3e
    243e:	9a af       	std	Y+58, r25	; 0x3a
    2440:	89 af       	std	Y+57, r24	; 0x39
    2442:	89 ad       	ldd	r24, Y+57	; 0x39
    2444:	9a ad       	ldd	r25, Y+58	; 0x3a
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_sendCommand+0x4a6>
    244a:	9a af       	std	Y+58, r25	; 0x3a
    244c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	62 e0       	ldi	r22, 0x02	; 2
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	a0 e8       	ldi	r26, 0x80	; 128
    245e:	bf e3       	ldi	r27, 0x3F	; 63
    2460:	8d ab       	std	Y+53, r24	; 0x35
    2462:	9e ab       	std	Y+54, r25	; 0x36
    2464:	af ab       	std	Y+55, r26	; 0x37
    2466:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2468:	6d a9       	ldd	r22, Y+53	; 0x35
    246a:	7e a9       	ldd	r23, Y+54	; 0x36
    246c:	8f a9       	ldd	r24, Y+55	; 0x37
    246e:	98 ad       	ldd	r25, Y+56	; 0x38
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	4a e7       	ldi	r20, 0x7A	; 122
    2476:	55 e4       	ldi	r21, 0x45	; 69
    2478:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	89 ab       	std	Y+49, r24	; 0x31
    2482:	9a ab       	std	Y+50, r25	; 0x32
    2484:	ab ab       	std	Y+51, r26	; 0x33
    2486:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2488:	69 a9       	ldd	r22, Y+49	; 0x31
    248a:	7a a9       	ldd	r23, Y+50	; 0x32
    248c:	8b a9       	ldd	r24, Y+51	; 0x33
    248e:	9c a9       	ldd	r25, Y+52	; 0x34
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e8       	ldi	r20, 0x80	; 128
    2496:	5f e3       	ldi	r21, 0x3F	; 63
    2498:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    249c:	88 23       	and	r24, r24
    249e:	2c f4       	brge	.+10     	; 0x24aa <LCD_sendCommand+0x50a>
		__ticks = 1;
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	98 ab       	std	Y+48, r25	; 0x30
    24a6:	8f a7       	std	Y+47, r24	; 0x2f
    24a8:	3f c0       	rjmp	.+126    	; 0x2528 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    24aa:	69 a9       	ldd	r22, Y+49	; 0x31
    24ac:	7a a9       	ldd	r23, Y+50	; 0x32
    24ae:	8b a9       	ldd	r24, Y+51	; 0x33
    24b0:	9c a9       	ldd	r25, Y+52	; 0x34
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	3f ef       	ldi	r19, 0xFF	; 255
    24b6:	4f e7       	ldi	r20, 0x7F	; 127
    24b8:	57 e4       	ldi	r21, 0x47	; 71
    24ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24be:	18 16       	cp	r1, r24
    24c0:	4c f5       	brge	.+82     	; 0x2514 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c2:	6d a9       	ldd	r22, Y+53	; 0x35
    24c4:	7e a9       	ldd	r23, Y+54	; 0x36
    24c6:	8f a9       	ldd	r24, Y+55	; 0x37
    24c8:	98 ad       	ldd	r25, Y+56	; 0x38
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e2       	ldi	r20, 0x20	; 32
    24d0:	51 e4       	ldi	r21, 0x41	; 65
    24d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	bc 01       	movw	r22, r24
    24dc:	cd 01       	movw	r24, r26
    24de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	98 ab       	std	Y+48, r25	; 0x30
    24e8:	8f a7       	std	Y+47, r24	; 0x2f
    24ea:	0f c0       	rjmp	.+30     	; 0x250a <LCD_sendCommand+0x56a>
    24ec:	80 e9       	ldi	r24, 0x90	; 144
    24ee:	91 e0       	ldi	r25, 0x01	; 1
    24f0:	9e a7       	std	Y+46, r25	; 0x2e
    24f2:	8d a7       	std	Y+45, r24	; 0x2d
    24f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    24f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <LCD_sendCommand+0x558>
    24fc:	9e a7       	std	Y+46, r25	; 0x2e
    24fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2500:	8f a5       	ldd	r24, Y+47	; 0x2f
    2502:	98 a9       	ldd	r25, Y+48	; 0x30
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	98 ab       	std	Y+48, r25	; 0x30
    2508:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250a:	8f a5       	ldd	r24, Y+47	; 0x2f
    250c:	98 a9       	ldd	r25, Y+48	; 0x30
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	69 f7       	brne	.-38     	; 0x24ec <LCD_sendCommand+0x54c>
    2512:	14 c0       	rjmp	.+40     	; 0x253c <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2514:	69 a9       	ldd	r22, Y+49	; 0x31
    2516:	7a a9       	ldd	r23, Y+50	; 0x32
    2518:	8b a9       	ldd	r24, Y+51	; 0x33
    251a:	9c a9       	ldd	r25, Y+52	; 0x34
    251c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	98 ab       	std	Y+48, r25	; 0x30
    2526:	8f a7       	std	Y+47, r24	; 0x2f
    2528:	8f a5       	ldd	r24, Y+47	; 0x2f
    252a:	98 a9       	ldd	r25, Y+48	; 0x30
    252c:	9c a7       	std	Y+44, r25	; 0x2c
    252e:	8b a7       	std	Y+43, r24	; 0x2b
    2530:	8b a5       	ldd	r24, Y+43	; 0x2b
    2532:	9c a5       	ldd	r25, Y+44	; 0x2c
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <LCD_sendCommand+0x594>
    2538:	9c a7       	std	Y+44, r25	; 0x2c
    253a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	62 e0       	ldi	r22, 0x02	; 2
    2540:	41 e0       	ldi	r20, 0x01	; 1
    2542:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	a0 e8       	ldi	r26, 0x80	; 128
    254c:	bf e3       	ldi	r27, 0x3F	; 63
    254e:	8f a3       	std	Y+39, r24	; 0x27
    2550:	98 a7       	std	Y+40, r25	; 0x28
    2552:	a9 a7       	std	Y+41, r26	; 0x29
    2554:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2556:	6f a1       	ldd	r22, Y+39	; 0x27
    2558:	78 a5       	ldd	r23, Y+40	; 0x28
    255a:	89 a5       	ldd	r24, Y+41	; 0x29
    255c:	9a a5       	ldd	r25, Y+42	; 0x2a
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	4a e7       	ldi	r20, 0x7A	; 122
    2564:	55 e4       	ldi	r21, 0x45	; 69
    2566:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	8b a3       	std	Y+35, r24	; 0x23
    2570:	9c a3       	std	Y+36, r25	; 0x24
    2572:	ad a3       	std	Y+37, r26	; 0x25
    2574:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2576:	6b a1       	ldd	r22, Y+35	; 0x23
    2578:	7c a1       	ldd	r23, Y+36	; 0x24
    257a:	8d a1       	ldd	r24, Y+37	; 0x25
    257c:	9e a1       	ldd	r25, Y+38	; 0x26
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e8       	ldi	r20, 0x80	; 128
    2584:	5f e3       	ldi	r21, 0x3F	; 63
    2586:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    258a:	88 23       	and	r24, r24
    258c:	2c f4       	brge	.+10     	; 0x2598 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	9a a3       	std	Y+34, r25	; 0x22
    2594:	89 a3       	std	Y+33, r24	; 0x21
    2596:	3f c0       	rjmp	.+126    	; 0x2616 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2598:	6b a1       	ldd	r22, Y+35	; 0x23
    259a:	7c a1       	ldd	r23, Y+36	; 0x24
    259c:	8d a1       	ldd	r24, Y+37	; 0x25
    259e:	9e a1       	ldd	r25, Y+38	; 0x26
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	3f ef       	ldi	r19, 0xFF	; 255
    25a4:	4f e7       	ldi	r20, 0x7F	; 127
    25a6:	57 e4       	ldi	r21, 0x47	; 71
    25a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25ac:	18 16       	cp	r1, r24
    25ae:	4c f5       	brge	.+82     	; 0x2602 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b0:	6f a1       	ldd	r22, Y+39	; 0x27
    25b2:	78 a5       	ldd	r23, Y+40	; 0x28
    25b4:	89 a5       	ldd	r24, Y+41	; 0x29
    25b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e2       	ldi	r20, 0x20	; 32
    25be:	51 e4       	ldi	r21, 0x41	; 65
    25c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	bc 01       	movw	r22, r24
    25ca:	cd 01       	movw	r24, r26
    25cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9a a3       	std	Y+34, r25	; 0x22
    25d6:	89 a3       	std	Y+33, r24	; 0x21
    25d8:	0f c0       	rjmp	.+30     	; 0x25f8 <LCD_sendCommand+0x658>
    25da:	80 e9       	ldi	r24, 0x90	; 144
    25dc:	91 e0       	ldi	r25, 0x01	; 1
    25de:	98 a3       	std	Y+32, r25	; 0x20
    25e0:	8f 8f       	std	Y+31, r24	; 0x1f
    25e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25e4:	98 a1       	ldd	r25, Y+32	; 0x20
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <LCD_sendCommand+0x646>
    25ea:	98 a3       	std	Y+32, r25	; 0x20
    25ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ee:	89 a1       	ldd	r24, Y+33	; 0x21
    25f0:	9a a1       	ldd	r25, Y+34	; 0x22
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	9a a3       	std	Y+34, r25	; 0x22
    25f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f8:	89 a1       	ldd	r24, Y+33	; 0x21
    25fa:	9a a1       	ldd	r25, Y+34	; 0x22
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	69 f7       	brne	.-38     	; 0x25da <LCD_sendCommand+0x63a>
    2600:	14 c0       	rjmp	.+40     	; 0x262a <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2602:	6b a1       	ldd	r22, Y+35	; 0x23
    2604:	7c a1       	ldd	r23, Y+36	; 0x24
    2606:	8d a1       	ldd	r24, Y+37	; 0x25
    2608:	9e a1       	ldd	r25, Y+38	; 0x26
    260a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9a a3       	std	Y+34, r25	; 0x22
    2614:	89 a3       	std	Y+33, r24	; 0x21
    2616:	89 a1       	ldd	r24, Y+33	; 0x21
    2618:	9a a1       	ldd	r25, Y+34	; 0x22
    261a:	9e 8f       	std	Y+30, r25	; 0x1e
    261c:	8d 8f       	std	Y+29, r24	; 0x1d
    261e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2620:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <LCD_sendCommand+0x682>
    2626:	9e 8f       	std	Y+30, r25	; 0x1e
    2628:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID, GET_BIT(command, 0));
    262a:	fe 01       	movw	r30, r28
    262c:	ed 59       	subi	r30, 0x9D	; 157
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	80 81       	ld	r24, Z
    2632:	98 2f       	mov	r25, r24
    2634:	91 70       	andi	r25, 0x01	; 1
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	63 e0       	ldi	r22, 0x03	; 3
    263a:	49 2f       	mov	r20, r25
    263c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID+1, GET_BIT(command, 1));
    2640:	fe 01       	movw	r30, r28
    2642:	ed 59       	subi	r30, 0x9D	; 157
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	80 81       	ld	r24, Z
    2648:	88 2f       	mov	r24, r24
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	82 70       	andi	r24, 0x02	; 2
    264e:	90 70       	andi	r25, 0x00	; 0
    2650:	95 95       	asr	r25
    2652:	87 95       	ror	r24
    2654:	98 2f       	mov	r25, r24
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	64 e0       	ldi	r22, 0x04	; 4
    265a:	49 2f       	mov	r20, r25
    265c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID+2, GET_BIT(command, 2));
    2660:	fe 01       	movw	r30, r28
    2662:	ed 59       	subi	r30, 0x9D	; 157
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	80 81       	ld	r24, Z
    2668:	88 2f       	mov	r24, r24
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	84 70       	andi	r24, 0x04	; 4
    266e:	90 70       	andi	r25, 0x00	; 0
    2670:	95 95       	asr	r25
    2672:	87 95       	ror	r24
    2674:	95 95       	asr	r25
    2676:	87 95       	ror	r24
    2678:	98 2f       	mov	r25, r24
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	65 e0       	ldi	r22, 0x05	; 5
    267e:	49 2f       	mov	r20, r25
    2680:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID+3, GET_BIT(command, 3));
    2684:	fe 01       	movw	r30, r28
    2686:	ed 59       	subi	r30, 0x9D	; 157
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	80 81       	ld	r24, Z
    268c:	88 2f       	mov	r24, r24
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	88 70       	andi	r24, 0x08	; 8
    2692:	90 70       	andi	r25, 0x00	; 0
    2694:	95 95       	asr	r25
    2696:	87 95       	ror	r24
    2698:	95 95       	asr	r25
    269a:	87 95       	ror	r24
    269c:	95 95       	asr	r25
    269e:	87 95       	ror	r24
    26a0:	98 2f       	mov	r25, r24
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	66 e0       	ldi	r22, 0x06	; 6
    26a6:	49 2f       	mov	r20, r25
    26a8:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	a0 e8       	ldi	r26, 0x80	; 128
    26b2:	bf e3       	ldi	r27, 0x3F	; 63
    26b4:	89 8f       	std	Y+25, r24	; 0x19
    26b6:	9a 8f       	std	Y+26, r25	; 0x1a
    26b8:	ab 8f       	std	Y+27, r26	; 0x1b
    26ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26bc:	69 8d       	ldd	r22, Y+25	; 0x19
    26be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	4a e7       	ldi	r20, 0x7A	; 122
    26ca:	55 e4       	ldi	r21, 0x45	; 69
    26cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	8d 8b       	std	Y+21, r24	; 0x15
    26d6:	9e 8b       	std	Y+22, r25	; 0x16
    26d8:	af 8b       	std	Y+23, r26	; 0x17
    26da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26dc:	6d 89       	ldd	r22, Y+21	; 0x15
    26de:	7e 89       	ldd	r23, Y+22	; 0x16
    26e0:	8f 89       	ldd	r24, Y+23	; 0x17
    26e2:	98 8d       	ldd	r25, Y+24	; 0x18
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e8       	ldi	r20, 0x80	; 128
    26ea:	5f e3       	ldi	r21, 0x3F	; 63
    26ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26f0:	88 23       	and	r24, r24
    26f2:	2c f4       	brge	.+10     	; 0x26fe <LCD_sendCommand+0x75e>
		__ticks = 1;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	9c 8b       	std	Y+20, r25	; 0x14
    26fa:	8b 8b       	std	Y+19, r24	; 0x13
    26fc:	3f c0       	rjmp	.+126    	; 0x277c <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    26fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2700:	7e 89       	ldd	r23, Y+22	; 0x16
    2702:	8f 89       	ldd	r24, Y+23	; 0x17
    2704:	98 8d       	ldd	r25, Y+24	; 0x18
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	3f ef       	ldi	r19, 0xFF	; 255
    270a:	4f e7       	ldi	r20, 0x7F	; 127
    270c:	57 e4       	ldi	r21, 0x47	; 71
    270e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2712:	18 16       	cp	r1, r24
    2714:	4c f5       	brge	.+82     	; 0x2768 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2716:	69 8d       	ldd	r22, Y+25	; 0x19
    2718:	7a 8d       	ldd	r23, Y+26	; 0x1a
    271a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    271c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e2       	ldi	r20, 0x20	; 32
    2724:	51 e4       	ldi	r21, 0x41	; 65
    2726:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	bc 01       	movw	r22, r24
    2730:	cd 01       	movw	r24, r26
    2732:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9c 8b       	std	Y+20, r25	; 0x14
    273c:	8b 8b       	std	Y+19, r24	; 0x13
    273e:	0f c0       	rjmp	.+30     	; 0x275e <LCD_sendCommand+0x7be>
    2740:	80 e9       	ldi	r24, 0x90	; 144
    2742:	91 e0       	ldi	r25, 0x01	; 1
    2744:	9a 8b       	std	Y+18, r25	; 0x12
    2746:	89 8b       	std	Y+17, r24	; 0x11
    2748:	89 89       	ldd	r24, Y+17	; 0x11
    274a:	9a 89       	ldd	r25, Y+18	; 0x12
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	f1 f7       	brne	.-4      	; 0x274c <LCD_sendCommand+0x7ac>
    2750:	9a 8b       	std	Y+18, r25	; 0x12
    2752:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2754:	8b 89       	ldd	r24, Y+19	; 0x13
    2756:	9c 89       	ldd	r25, Y+20	; 0x14
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	9c 8b       	std	Y+20, r25	; 0x14
    275c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275e:	8b 89       	ldd	r24, Y+19	; 0x13
    2760:	9c 89       	ldd	r25, Y+20	; 0x14
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	69 f7       	brne	.-38     	; 0x2740 <LCD_sendCommand+0x7a0>
    2766:	14 c0       	rjmp	.+40     	; 0x2790 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2768:	6d 89       	ldd	r22, Y+21	; 0x15
    276a:	7e 89       	ldd	r23, Y+22	; 0x16
    276c:	8f 89       	ldd	r24, Y+23	; 0x17
    276e:	98 8d       	ldd	r25, Y+24	; 0x18
    2770:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	9c 8b       	std	Y+20, r25	; 0x14
    277a:	8b 8b       	std	Y+19, r24	; 0x13
    277c:	8b 89       	ldd	r24, Y+19	; 0x13
    277e:	9c 89       	ldd	r25, Y+20	; 0x14
    2780:	98 8b       	std	Y+16, r25	; 0x10
    2782:	8f 87       	std	Y+15, r24	; 0x0f
    2784:	8f 85       	ldd	r24, Y+15	; 0x0f
    2786:	98 89       	ldd	r25, Y+16	; 0x10
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	f1 f7       	brne	.-4      	; 0x2788 <LCD_sendCommand+0x7e8>
    278c:	98 8b       	std	Y+16, r25	; 0x10
    278e:	8f 87       	std	Y+15, r24	; 0x0f
#endif
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	62 e0       	ldi	r22, 0x02	; 2
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	a0 e8       	ldi	r26, 0x80	; 128
    27a0:	bf e3       	ldi	r27, 0x3F	; 63
    27a2:	8b 87       	std	Y+11, r24	; 0x0b
    27a4:	9c 87       	std	Y+12, r25	; 0x0c
    27a6:	ad 87       	std	Y+13, r26	; 0x0d
    27a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	4a e7       	ldi	r20, 0x7A	; 122
    27b8:	55 e4       	ldi	r21, 0x45	; 69
    27ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	8f 83       	std	Y+7, r24	; 0x07
    27c4:	98 87       	std	Y+8, r25	; 0x08
    27c6:	a9 87       	std	Y+9, r26	; 0x09
    27c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ca:	6f 81       	ldd	r22, Y+7	; 0x07
    27cc:	78 85       	ldd	r23, Y+8	; 0x08
    27ce:	89 85       	ldd	r24, Y+9	; 0x09
    27d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e8       	ldi	r20, 0x80	; 128
    27d8:	5f e3       	ldi	r21, 0x3F	; 63
    27da:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27de:	88 23       	and	r24, r24
    27e0:	2c f4       	brge	.+10     	; 0x27ec <LCD_sendCommand+0x84c>
		__ticks = 1;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	9e 83       	std	Y+6, r25	; 0x06
    27e8:	8d 83       	std	Y+5, r24	; 0x05
    27ea:	3f c0       	rjmp	.+126    	; 0x286a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    27ec:	6f 81       	ldd	r22, Y+7	; 0x07
    27ee:	78 85       	ldd	r23, Y+8	; 0x08
    27f0:	89 85       	ldd	r24, Y+9	; 0x09
    27f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	3f ef       	ldi	r19, 0xFF	; 255
    27f8:	4f e7       	ldi	r20, 0x7F	; 127
    27fa:	57 e4       	ldi	r21, 0x47	; 71
    27fc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2800:	18 16       	cp	r1, r24
    2802:	4c f5       	brge	.+82     	; 0x2856 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2804:	6b 85       	ldd	r22, Y+11	; 0x0b
    2806:	7c 85       	ldd	r23, Y+12	; 0x0c
    2808:	8d 85       	ldd	r24, Y+13	; 0x0d
    280a:	9e 85       	ldd	r25, Y+14	; 0x0e
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e2       	ldi	r20, 0x20	; 32
    2812:	51 e4       	ldi	r21, 0x41	; 65
    2814:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	bc 01       	movw	r22, r24
    281e:	cd 01       	movw	r24, r26
    2820:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	9e 83       	std	Y+6, r25	; 0x06
    282a:	8d 83       	std	Y+5, r24	; 0x05
    282c:	0f c0       	rjmp	.+30     	; 0x284c <LCD_sendCommand+0x8ac>
    282e:	80 e9       	ldi	r24, 0x90	; 144
    2830:	91 e0       	ldi	r25, 0x01	; 1
    2832:	9c 83       	std	Y+4, r25	; 0x04
    2834:	8b 83       	std	Y+3, r24	; 0x03
    2836:	8b 81       	ldd	r24, Y+3	; 0x03
    2838:	9c 81       	ldd	r25, Y+4	; 0x04
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <LCD_sendCommand+0x89a>
    283e:	9c 83       	std	Y+4, r25	; 0x04
    2840:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2842:	8d 81       	ldd	r24, Y+5	; 0x05
    2844:	9e 81       	ldd	r25, Y+6	; 0x06
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	9e 83       	std	Y+6, r25	; 0x06
    284a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284c:	8d 81       	ldd	r24, Y+5	; 0x05
    284e:	9e 81       	ldd	r25, Y+6	; 0x06
    2850:	00 97       	sbiw	r24, 0x00	; 0
    2852:	69 f7       	brne	.-38     	; 0x282e <LCD_sendCommand+0x88e>
    2854:	14 c0       	rjmp	.+40     	; 0x287e <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2856:	6f 81       	ldd	r22, Y+7	; 0x07
    2858:	78 85       	ldd	r23, Y+8	; 0x08
    285a:	89 85       	ldd	r24, Y+9	; 0x09
    285c:	9a 85       	ldd	r25, Y+10	; 0x0a
    285e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	9e 83       	std	Y+6, r25	; 0x06
    2868:	8d 83       	std	Y+5, r24	; 0x05
    286a:	8d 81       	ldd	r24, Y+5	; 0x05
    286c:	9e 81       	ldd	r25, Y+6	; 0x06
    286e:	9a 83       	std	Y+2, r25	; 0x02
    2870:	89 83       	std	Y+1, r24	; 0x01
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	9a 81       	ldd	r25, Y+2	; 0x02
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	f1 f7       	brne	.-4      	; 0x2876 <LCD_sendCommand+0x8d6>
    287a:	9a 83       	std	Y+2, r25	; 0x02
    287c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    287e:	cd 59       	subi	r28, 0x9D	; 157
    2880:	df 4f       	sbci	r29, 0xFF	; 255
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	1f 91       	pop	r17
    2892:	0f 91       	pop	r16
    2894:	08 95       	ret

00002896 <LCD_displayCharacter>:

/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data) {
    2896:	0f 93       	push	r16
    2898:	1f 93       	push	r17
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	c3 56       	subi	r28, 0x63	; 99
    28a4:	d0 40       	sbci	r29, 0x00	; 0
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	de bf       	out	0x3e, r29	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	cd bf       	out	0x3d, r28	; 61
    28b0:	fe 01       	movw	r30, r28
    28b2:	ed 59       	subi	r30, 0x9D	; 157
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	61 e0       	ldi	r22, 0x01	; 1
    28bc:	41 e0       	ldi	r20, 0x01	; 1
    28be:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
    28c2:	fe 01       	movw	r30, r28
    28c4:	e1 5a       	subi	r30, 0xA1	; 161
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	a0 e8       	ldi	r26, 0x80	; 128
    28ce:	bf e3       	ldi	r27, 0x3F	; 63
    28d0:	80 83       	st	Z, r24
    28d2:	91 83       	std	Z+1, r25	; 0x01
    28d4:	a2 83       	std	Z+2, r26	; 0x02
    28d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d8:	8e 01       	movw	r16, r28
    28da:	05 5a       	subi	r16, 0xA5	; 165
    28dc:	1f 4f       	sbci	r17, 0xFF	; 255
    28de:	fe 01       	movw	r30, r28
    28e0:	e1 5a       	subi	r30, 0xA1	; 161
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	60 81       	ld	r22, Z
    28e6:	71 81       	ldd	r23, Z+1	; 0x01
    28e8:	82 81       	ldd	r24, Z+2	; 0x02
    28ea:	93 81       	ldd	r25, Z+3	; 0x03
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	4a e7       	ldi	r20, 0x7A	; 122
    28f2:	55 e4       	ldi	r21, 0x45	; 69
    28f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	f8 01       	movw	r30, r16
    28fe:	80 83       	st	Z, r24
    2900:	91 83       	std	Z+1, r25	; 0x01
    2902:	a2 83       	std	Z+2, r26	; 0x02
    2904:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2906:	fe 01       	movw	r30, r28
    2908:	e5 5a       	subi	r30, 0xA5	; 165
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	60 81       	ld	r22, Z
    290e:	71 81       	ldd	r23, Z+1	; 0x01
    2910:	82 81       	ldd	r24, Z+2	; 0x02
    2912:	93 81       	ldd	r25, Z+3	; 0x03
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e8       	ldi	r20, 0x80	; 128
    291a:	5f e3       	ldi	r21, 0x3F	; 63
    291c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2920:	88 23       	and	r24, r24
    2922:	44 f4       	brge	.+16     	; 0x2934 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2924:	fe 01       	movw	r30, r28
    2926:	e7 5a       	subi	r30, 0xA7	; 167
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	91 83       	std	Z+1, r25	; 0x01
    2930:	80 83       	st	Z, r24
    2932:	64 c0       	rjmp	.+200    	; 0x29fc <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2934:	fe 01       	movw	r30, r28
    2936:	e5 5a       	subi	r30, 0xA5	; 165
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	60 81       	ld	r22, Z
    293c:	71 81       	ldd	r23, Z+1	; 0x01
    293e:	82 81       	ldd	r24, Z+2	; 0x02
    2940:	93 81       	ldd	r25, Z+3	; 0x03
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	3f ef       	ldi	r19, 0xFF	; 255
    2946:	4f e7       	ldi	r20, 0x7F	; 127
    2948:	57 e4       	ldi	r21, 0x47	; 71
    294a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    294e:	18 16       	cp	r1, r24
    2950:	0c f0       	brlt	.+2      	; 0x2954 <LCD_displayCharacter+0xbe>
    2952:	43 c0       	rjmp	.+134    	; 0x29da <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2954:	fe 01       	movw	r30, r28
    2956:	e1 5a       	subi	r30, 0xA1	; 161
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	60 81       	ld	r22, Z
    295c:	71 81       	ldd	r23, Z+1	; 0x01
    295e:	82 81       	ldd	r24, Z+2	; 0x02
    2960:	93 81       	ldd	r25, Z+3	; 0x03
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e2       	ldi	r20, 0x20	; 32
    2968:	51 e4       	ldi	r21, 0x41	; 65
    296a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	8e 01       	movw	r16, r28
    2974:	07 5a       	subi	r16, 0xA7	; 167
    2976:	1f 4f       	sbci	r17, 0xFF	; 255
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	f8 01       	movw	r30, r16
    2986:	91 83       	std	Z+1, r25	; 0x01
    2988:	80 83       	st	Z, r24
    298a:	1f c0       	rjmp	.+62     	; 0x29ca <LCD_displayCharacter+0x134>
    298c:	fe 01       	movw	r30, r28
    298e:	e9 5a       	subi	r30, 0xA9	; 169
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	80 e9       	ldi	r24, 0x90	; 144
    2994:	91 e0       	ldi	r25, 0x01	; 1
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
    299a:	fe 01       	movw	r30, r28
    299c:	e9 5a       	subi	r30, 0xA9	; 169
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 81       	ld	r24, Z
    29a2:	91 81       	ldd	r25, Z+1	; 0x01
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <LCD_displayCharacter+0x10e>
    29a8:	fe 01       	movw	r30, r28
    29aa:	e9 5a       	subi	r30, 0xA9	; 169
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b2:	de 01       	movw	r26, r28
    29b4:	a7 5a       	subi	r26, 0xA7	; 167
    29b6:	bf 4f       	sbci	r27, 0xFF	; 255
    29b8:	fe 01       	movw	r30, r28
    29ba:	e7 5a       	subi	r30, 0xA7	; 167
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 81       	ld	r24, Z
    29c0:	91 81       	ldd	r25, Z+1	; 0x01
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	11 96       	adiw	r26, 0x01	; 1
    29c6:	9c 93       	st	X, r25
    29c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ca:	fe 01       	movw	r30, r28
    29cc:	e7 5a       	subi	r30, 0xA7	; 167
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	80 81       	ld	r24, Z
    29d2:	91 81       	ldd	r25, Z+1	; 0x01
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	d1 f6       	brne	.-76     	; 0x298c <LCD_displayCharacter+0xf6>
    29d8:	27 c0       	rjmp	.+78     	; 0x2a28 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29da:	8e 01       	movw	r16, r28
    29dc:	07 5a       	subi	r16, 0xA7	; 167
    29de:	1f 4f       	sbci	r17, 0xFF	; 255
    29e0:	fe 01       	movw	r30, r28
    29e2:	e5 5a       	subi	r30, 0xA5	; 165
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	60 81       	ld	r22, Z
    29e8:	71 81       	ldd	r23, Z+1	; 0x01
    29ea:	82 81       	ldd	r24, Z+2	; 0x02
    29ec:	93 81       	ldd	r25, Z+3	; 0x03
    29ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	f8 01       	movw	r30, r16
    29f8:	91 83       	std	Z+1, r25	; 0x01
    29fa:	80 83       	st	Z, r24
    29fc:	de 01       	movw	r26, r28
    29fe:	ab 5a       	subi	r26, 0xAB	; 171
    2a00:	bf 4f       	sbci	r27, 0xFF	; 255
    2a02:	fe 01       	movw	r30, r28
    2a04:	e7 5a       	subi	r30, 0xA7	; 167
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	80 81       	ld	r24, Z
    2a0a:	91 81       	ldd	r25, Z+1	; 0x01
    2a0c:	8d 93       	st	X+, r24
    2a0e:	9c 93       	st	X, r25
    2a10:	fe 01       	movw	r30, r28
    2a12:	eb 5a       	subi	r30, 0xAB	; 171
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	80 81       	ld	r24, Z
    2a18:	91 81       	ldd	r25, Z+1	; 0x01
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <LCD_displayCharacter+0x184>
    2a1e:	fe 01       	movw	r30, r28
    2a20:	eb 5a       	subi	r30, 0xAB	; 171
    2a22:	ff 4f       	sbci	r31, 0xFF	; 255
    2a24:	91 83       	std	Z+1, r25	; 0x01
    2a26:	80 83       	st	Z, r24
	_delay_ms(1);

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	62 e0       	ldi	r22, 0x02	; 2
    2a2c:	41 e0       	ldi	r20, 0x01	; 1
    2a2e:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
    2a32:	fe 01       	movw	r30, r28
    2a34:	ef 5a       	subi	r30, 0xAF	; 175
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	a0 e8       	ldi	r26, 0x80	; 128
    2a3e:	bf e3       	ldi	r27, 0x3F	; 63
    2a40:	80 83       	st	Z, r24
    2a42:	91 83       	std	Z+1, r25	; 0x01
    2a44:	a2 83       	std	Z+2, r26	; 0x02
    2a46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a48:	8e 01       	movw	r16, r28
    2a4a:	03 5b       	subi	r16, 0xB3	; 179
    2a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4e:	fe 01       	movw	r30, r28
    2a50:	ef 5a       	subi	r30, 0xAF	; 175
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	4a e7       	ldi	r20, 0x7A	; 122
    2a62:	55 e4       	ldi	r21, 0x45	; 69
    2a64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	f8 01       	movw	r30, r16
    2a6e:	80 83       	st	Z, r24
    2a70:	91 83       	std	Z+1, r25	; 0x01
    2a72:	a2 83       	std	Z+2, r26	; 0x02
    2a74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a76:	fe 01       	movw	r30, r28
    2a78:	e3 5b       	subi	r30, 0xB3	; 179
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	60 81       	ld	r22, Z
    2a7e:	71 81       	ldd	r23, Z+1	; 0x01
    2a80:	82 81       	ldd	r24, Z+2	; 0x02
    2a82:	93 81       	ldd	r25, Z+3	; 0x03
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e8       	ldi	r20, 0x80	; 128
    2a8a:	5f e3       	ldi	r21, 0x3F	; 63
    2a8c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a90:	88 23       	and	r24, r24
    2a92:	44 f4       	brge	.+16     	; 0x2aa4 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2a94:	fe 01       	movw	r30, r28
    2a96:	e5 5b       	subi	r30, 0xB5	; 181
    2a98:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	91 83       	std	Z+1, r25	; 0x01
    2aa0:	80 83       	st	Z, r24
    2aa2:	64 c0       	rjmp	.+200    	; 0x2b6c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e3 5b       	subi	r30, 0xB3	; 179
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	60 81       	ld	r22, Z
    2aac:	71 81       	ldd	r23, Z+1	; 0x01
    2aae:	82 81       	ldd	r24, Z+2	; 0x02
    2ab0:	93 81       	ldd	r25, Z+3	; 0x03
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	3f ef       	ldi	r19, 0xFF	; 255
    2ab6:	4f e7       	ldi	r20, 0x7F	; 127
    2ab8:	57 e4       	ldi	r21, 0x47	; 71
    2aba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2abe:	18 16       	cp	r1, r24
    2ac0:	0c f0       	brlt	.+2      	; 0x2ac4 <LCD_displayCharacter+0x22e>
    2ac2:	43 c0       	rjmp	.+134    	; 0x2b4a <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	ef 5a       	subi	r30, 0xAF	; 175
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	60 81       	ld	r22, Z
    2acc:	71 81       	ldd	r23, Z+1	; 0x01
    2ace:	82 81       	ldd	r24, Z+2	; 0x02
    2ad0:	93 81       	ldd	r25, Z+3	; 0x03
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e2       	ldi	r20, 0x20	; 32
    2ad8:	51 e4       	ldi	r21, 0x41	; 65
    2ada:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	8e 01       	movw	r16, r28
    2ae4:	05 5b       	subi	r16, 0xB5	; 181
    2ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae8:	bc 01       	movw	r22, r24
    2aea:	cd 01       	movw	r24, r26
    2aec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	f8 01       	movw	r30, r16
    2af6:	91 83       	std	Z+1, r25	; 0x01
    2af8:	80 83       	st	Z, r24
    2afa:	1f c0       	rjmp	.+62     	; 0x2b3a <LCD_displayCharacter+0x2a4>
    2afc:	fe 01       	movw	r30, r28
    2afe:	e7 5b       	subi	r30, 0xB7	; 183
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	80 e9       	ldi	r24, 0x90	; 144
    2b04:	91 e0       	ldi	r25, 0x01	; 1
    2b06:	91 83       	std	Z+1, r25	; 0x01
    2b08:	80 83       	st	Z, r24
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	e7 5b       	subi	r30, 0xB7	; 183
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	80 81       	ld	r24, Z
    2b12:	91 81       	ldd	r25, Z+1	; 0x01
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	f1 f7       	brne	.-4      	; 0x2b14 <LCD_displayCharacter+0x27e>
    2b18:	fe 01       	movw	r30, r28
    2b1a:	e7 5b       	subi	r30, 0xB7	; 183
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	91 83       	std	Z+1, r25	; 0x01
    2b20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b22:	de 01       	movw	r26, r28
    2b24:	a5 5b       	subi	r26, 0xB5	; 181
    2b26:	bf 4f       	sbci	r27, 0xFF	; 255
    2b28:	fe 01       	movw	r30, r28
    2b2a:	e5 5b       	subi	r30, 0xB5	; 181
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	80 81       	ld	r24, Z
    2b30:	91 81       	ldd	r25, Z+1	; 0x01
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	11 96       	adiw	r26, 0x01	; 1
    2b36:	9c 93       	st	X, r25
    2b38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	e5 5b       	subi	r30, 0xB5	; 181
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	80 81       	ld	r24, Z
    2b42:	91 81       	ldd	r25, Z+1	; 0x01
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	d1 f6       	brne	.-76     	; 0x2afc <LCD_displayCharacter+0x266>
    2b48:	27 c0       	rjmp	.+78     	; 0x2b98 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b4a:	8e 01       	movw	r16, r28
    2b4c:	05 5b       	subi	r16, 0xB5	; 181
    2b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b50:	fe 01       	movw	r30, r28
    2b52:	e3 5b       	subi	r30, 0xB3	; 179
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	60 81       	ld	r22, Z
    2b58:	71 81       	ldd	r23, Z+1	; 0x01
    2b5a:	82 81       	ldd	r24, Z+2	; 0x02
    2b5c:	93 81       	ldd	r25, Z+3	; 0x03
    2b5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	f8 01       	movw	r30, r16
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	80 83       	st	Z, r24
    2b6c:	de 01       	movw	r26, r28
    2b6e:	a9 5b       	subi	r26, 0xB9	; 185
    2b70:	bf 4f       	sbci	r27, 0xFF	; 255
    2b72:	fe 01       	movw	r30, r28
    2b74:	e5 5b       	subi	r30, 0xB5	; 181
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	80 81       	ld	r24, Z
    2b7a:	91 81       	ldd	r25, Z+1	; 0x01
    2b7c:	8d 93       	st	X+, r24
    2b7e:	9c 93       	st	X, r25
    2b80:	fe 01       	movw	r30, r28
    2b82:	e9 5b       	subi	r30, 0xB9	; 185
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	80 81       	ld	r24, Z
    2b88:	91 81       	ldd	r25, Z+1	; 0x01
    2b8a:	01 97       	sbiw	r24, 0x01	; 1
    2b8c:	f1 f7       	brne	.-4      	; 0x2b8a <LCD_displayCharacter+0x2f4>
    2b8e:	fe 01       	movw	r30, r28
    2b90:	e9 5b       	subi	r30, 0xB9	; 185
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	91 83       	std	Z+1, r25	; 0x01
    2b96:	80 83       	st	Z, r24
	_delay_ms(1);
#if LCD_BITS == 8
	GPIO_writePort(LCD_DATA_PORT_ID, data);
#elif LCD_BITS == 4
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID, GET_BIT(data, 4));
    2b98:	fe 01       	movw	r30, r28
    2b9a:	ed 59       	subi	r30, 0x9D	; 157
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	80 81       	ld	r24, Z
    2ba0:	88 2f       	mov	r24, r24
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	80 71       	andi	r24, 0x10	; 16
    2ba6:	90 70       	andi	r25, 0x00	; 0
    2ba8:	95 95       	asr	r25
    2baa:	87 95       	ror	r24
    2bac:	95 95       	asr	r25
    2bae:	87 95       	ror	r24
    2bb0:	95 95       	asr	r25
    2bb2:	87 95       	ror	r24
    2bb4:	95 95       	asr	r25
    2bb6:	87 95       	ror	r24
    2bb8:	98 2f       	mov	r25, r24
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	63 e0       	ldi	r22, 0x03	; 3
    2bbe:	49 2f       	mov	r20, r25
    2bc0:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID+1, GET_BIT(data, 5));
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	ed 59       	subi	r30, 0x9D	; 157
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
    2bcc:	88 2f       	mov	r24, r24
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	80 72       	andi	r24, 0x20	; 32
    2bd2:	90 70       	andi	r25, 0x00	; 0
    2bd4:	95 95       	asr	r25
    2bd6:	87 95       	ror	r24
    2bd8:	95 95       	asr	r25
    2bda:	87 95       	ror	r24
    2bdc:	95 95       	asr	r25
    2bde:	87 95       	ror	r24
    2be0:	95 95       	asr	r25
    2be2:	87 95       	ror	r24
    2be4:	95 95       	asr	r25
    2be6:	87 95       	ror	r24
    2be8:	98 2f       	mov	r25, r24
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	64 e0       	ldi	r22, 0x04	; 4
    2bee:	49 2f       	mov	r20, r25
    2bf0:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID+2, GET_BIT(data, 6));
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	ed 59       	subi	r30, 0x9D	; 157
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	80 81       	ld	r24, Z
    2bfc:	88 2f       	mov	r24, r24
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	80 74       	andi	r24, 0x40	; 64
    2c02:	90 70       	andi	r25, 0x00	; 0
    2c04:	08 2e       	mov	r0, r24
    2c06:	89 2f       	mov	r24, r25
    2c08:	00 0c       	add	r0, r0
    2c0a:	88 1f       	adc	r24, r24
    2c0c:	99 0b       	sbc	r25, r25
    2c0e:	00 0c       	add	r0, r0
    2c10:	88 1f       	adc	r24, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	98 2f       	mov	r25, r24
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	65 e0       	ldi	r22, 0x05	; 5
    2c1a:	49 2f       	mov	r20, r25
    2c1c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID+3, GET_BIT(data, 7));
    2c20:	fe 01       	movw	r30, r28
    2c22:	ed 59       	subi	r30, 0x9D	; 157
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	80 81       	ld	r24, Z
    2c28:	98 2f       	mov	r25, r24
    2c2a:	99 1f       	adc	r25, r25
    2c2c:	99 27       	eor	r25, r25
    2c2e:	99 1f       	adc	r25, r25
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	66 e0       	ldi	r22, 0x06	; 6
    2c34:	49 2f       	mov	r20, r25
    2c36:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	ed 5b       	subi	r30, 0xBD	; 189
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	a0 e8       	ldi	r26, 0x80	; 128
    2c46:	bf e3       	ldi	r27, 0x3F	; 63
    2c48:	80 83       	st	Z, r24
    2c4a:	91 83       	std	Z+1, r25	; 0x01
    2c4c:	a2 83       	std	Z+2, r26	; 0x02
    2c4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c50:	8e 01       	movw	r16, r28
    2c52:	01 5c       	subi	r16, 0xC1	; 193
    2c54:	1f 4f       	sbci	r17, 0xFF	; 255
    2c56:	fe 01       	movw	r30, r28
    2c58:	ed 5b       	subi	r30, 0xBD	; 189
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	60 81       	ld	r22, Z
    2c5e:	71 81       	ldd	r23, Z+1	; 0x01
    2c60:	82 81       	ldd	r24, Z+2	; 0x02
    2c62:	93 81       	ldd	r25, Z+3	; 0x03
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	4a e7       	ldi	r20, 0x7A	; 122
    2c6a:	55 e4       	ldi	r21, 0x45	; 69
    2c6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	f8 01       	movw	r30, r16
    2c76:	80 83       	st	Z, r24
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	a2 83       	std	Z+2, r26	; 0x02
    2c7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c7e:	fe 01       	movw	r30, r28
    2c80:	ff 96       	adiw	r30, 0x3f	; 63
    2c82:	60 81       	ld	r22, Z
    2c84:	71 81       	ldd	r23, Z+1	; 0x01
    2c86:	82 81       	ldd	r24, Z+2	; 0x02
    2c88:	93 81       	ldd	r25, Z+3	; 0x03
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	40 e8       	ldi	r20, 0x80	; 128
    2c90:	5f e3       	ldi	r21, 0x3F	; 63
    2c92:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c96:	88 23       	and	r24, r24
    2c98:	2c f4       	brge	.+10     	; 0x2ca4 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	9e af       	std	Y+62, r25	; 0x3e
    2ca0:	8d af       	std	Y+61, r24	; 0x3d
    2ca2:	46 c0       	rjmp	.+140    	; 0x2d30 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	ff 96       	adiw	r30, 0x3f	; 63
    2ca8:	60 81       	ld	r22, Z
    2caa:	71 81       	ldd	r23, Z+1	; 0x01
    2cac:	82 81       	ldd	r24, Z+2	; 0x02
    2cae:	93 81       	ldd	r25, Z+3	; 0x03
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	3f ef       	ldi	r19, 0xFF	; 255
    2cb4:	4f e7       	ldi	r20, 0x7F	; 127
    2cb6:	57 e4       	ldi	r21, 0x47	; 71
    2cb8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2cbc:	18 16       	cp	r1, r24
    2cbe:	64 f5       	brge	.+88     	; 0x2d18 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	ed 5b       	subi	r30, 0xBD	; 189
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	60 81       	ld	r22, Z
    2cc8:	71 81       	ldd	r23, Z+1	; 0x01
    2cca:	82 81       	ldd	r24, Z+2	; 0x02
    2ccc:	93 81       	ldd	r25, Z+3	; 0x03
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	40 e2       	ldi	r20, 0x20	; 32
    2cd4:	51 e4       	ldi	r21, 0x41	; 65
    2cd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	bc 01       	movw	r22, r24
    2ce0:	cd 01       	movw	r24, r26
    2ce2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	9e af       	std	Y+62, r25	; 0x3e
    2cec:	8d af       	std	Y+61, r24	; 0x3d
    2cee:	0f c0       	rjmp	.+30     	; 0x2d0e <LCD_displayCharacter+0x478>
    2cf0:	80 e9       	ldi	r24, 0x90	; 144
    2cf2:	91 e0       	ldi	r25, 0x01	; 1
    2cf4:	9c af       	std	Y+60, r25	; 0x3c
    2cf6:	8b af       	std	Y+59, r24	; 0x3b
    2cf8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2cfa:	9c ad       	ldd	r25, Y+60	; 0x3c
    2cfc:	01 97       	sbiw	r24, 0x01	; 1
    2cfe:	f1 f7       	brne	.-4      	; 0x2cfc <LCD_displayCharacter+0x466>
    2d00:	9c af       	std	Y+60, r25	; 0x3c
    2d02:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d04:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d06:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d08:	01 97       	sbiw	r24, 0x01	; 1
    2d0a:	9e af       	std	Y+62, r25	; 0x3e
    2d0c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d10:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d12:	00 97       	sbiw	r24, 0x00	; 0
    2d14:	69 f7       	brne	.-38     	; 0x2cf0 <LCD_displayCharacter+0x45a>
    2d16:	16 c0       	rjmp	.+44     	; 0x2d44 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d18:	fe 01       	movw	r30, r28
    2d1a:	ff 96       	adiw	r30, 0x3f	; 63
    2d1c:	60 81       	ld	r22, Z
    2d1e:	71 81       	ldd	r23, Z+1	; 0x01
    2d20:	82 81       	ldd	r24, Z+2	; 0x02
    2d22:	93 81       	ldd	r25, Z+3	; 0x03
    2d24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	9e af       	std	Y+62, r25	; 0x3e
    2d2e:	8d af       	std	Y+61, r24	; 0x3d
    2d30:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d32:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d34:	9a af       	std	Y+58, r25	; 0x3a
    2d36:	89 af       	std	Y+57, r24	; 0x39
    2d38:	89 ad       	ldd	r24, Y+57	; 0x39
    2d3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <LCD_displayCharacter+0x4a6>
    2d40:	9a af       	std	Y+58, r25	; 0x3a
    2d42:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	62 e0       	ldi	r22, 0x02	; 2
    2d48:	40 e0       	ldi	r20, 0x00	; 0
    2d4a:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	a0 e8       	ldi	r26, 0x80	; 128
    2d54:	bf e3       	ldi	r27, 0x3F	; 63
    2d56:	8d ab       	std	Y+53, r24	; 0x35
    2d58:	9e ab       	std	Y+54, r25	; 0x36
    2d5a:	af ab       	std	Y+55, r26	; 0x37
    2d5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5e:	6d a9       	ldd	r22, Y+53	; 0x35
    2d60:	7e a9       	ldd	r23, Y+54	; 0x36
    2d62:	8f a9       	ldd	r24, Y+55	; 0x37
    2d64:	98 ad       	ldd	r25, Y+56	; 0x38
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	4a e7       	ldi	r20, 0x7A	; 122
    2d6c:	55 e4       	ldi	r21, 0x45	; 69
    2d6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	89 ab       	std	Y+49, r24	; 0x31
    2d78:	9a ab       	std	Y+50, r25	; 0x32
    2d7a:	ab ab       	std	Y+51, r26	; 0x33
    2d7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d7e:	69 a9       	ldd	r22, Y+49	; 0x31
    2d80:	7a a9       	ldd	r23, Y+50	; 0x32
    2d82:	8b a9       	ldd	r24, Y+51	; 0x33
    2d84:	9c a9       	ldd	r25, Y+52	; 0x34
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	40 e8       	ldi	r20, 0x80	; 128
    2d8c:	5f e3       	ldi	r21, 0x3F	; 63
    2d8e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d92:	88 23       	and	r24, r24
    2d94:	2c f4       	brge	.+10     	; 0x2da0 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	98 ab       	std	Y+48, r25	; 0x30
    2d9c:	8f a7       	std	Y+47, r24	; 0x2f
    2d9e:	3f c0       	rjmp	.+126    	; 0x2e1e <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2da0:	69 a9       	ldd	r22, Y+49	; 0x31
    2da2:	7a a9       	ldd	r23, Y+50	; 0x32
    2da4:	8b a9       	ldd	r24, Y+51	; 0x33
    2da6:	9c a9       	ldd	r25, Y+52	; 0x34
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	3f ef       	ldi	r19, 0xFF	; 255
    2dac:	4f e7       	ldi	r20, 0x7F	; 127
    2dae:	57 e4       	ldi	r21, 0x47	; 71
    2db0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2db4:	18 16       	cp	r1, r24
    2db6:	4c f5       	brge	.+82     	; 0x2e0a <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db8:	6d a9       	ldd	r22, Y+53	; 0x35
    2dba:	7e a9       	ldd	r23, Y+54	; 0x36
    2dbc:	8f a9       	ldd	r24, Y+55	; 0x37
    2dbe:	98 ad       	ldd	r25, Y+56	; 0x38
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	40 e2       	ldi	r20, 0x20	; 32
    2dc6:	51 e4       	ldi	r21, 0x41	; 65
    2dc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	bc 01       	movw	r22, r24
    2dd2:	cd 01       	movw	r24, r26
    2dd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	98 ab       	std	Y+48, r25	; 0x30
    2dde:	8f a7       	std	Y+47, r24	; 0x2f
    2de0:	0f c0       	rjmp	.+30     	; 0x2e00 <LCD_displayCharacter+0x56a>
    2de2:	80 e9       	ldi	r24, 0x90	; 144
    2de4:	91 e0       	ldi	r25, 0x01	; 1
    2de6:	9e a7       	std	Y+46, r25	; 0x2e
    2de8:	8d a7       	std	Y+45, r24	; 0x2d
    2dea:	8d a5       	ldd	r24, Y+45	; 0x2d
    2dec:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	f1 f7       	brne	.-4      	; 0x2dee <LCD_displayCharacter+0x558>
    2df2:	9e a7       	std	Y+46, r25	; 0x2e
    2df4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2df8:	98 a9       	ldd	r25, Y+48	; 0x30
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	98 ab       	std	Y+48, r25	; 0x30
    2dfe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e00:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e02:	98 a9       	ldd	r25, Y+48	; 0x30
    2e04:	00 97       	sbiw	r24, 0x00	; 0
    2e06:	69 f7       	brne	.-38     	; 0x2de2 <LCD_displayCharacter+0x54c>
    2e08:	14 c0       	rjmp	.+40     	; 0x2e32 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e0a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e0c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e0e:	8b a9       	ldd	r24, Y+51	; 0x33
    2e10:	9c a9       	ldd	r25, Y+52	; 0x34
    2e12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	98 ab       	std	Y+48, r25	; 0x30
    2e1c:	8f a7       	std	Y+47, r24	; 0x2f
    2e1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e20:	98 a9       	ldd	r25, Y+48	; 0x30
    2e22:	9c a7       	std	Y+44, r25	; 0x2c
    2e24:	8b a7       	std	Y+43, r24	; 0x2b
    2e26:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e28:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	f1 f7       	brne	.-4      	; 0x2e2a <LCD_displayCharacter+0x594>
    2e2e:	9c a7       	std	Y+44, r25	; 0x2c
    2e30:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	62 e0       	ldi	r22, 0x02	; 2
    2e36:	41 e0       	ldi	r20, 0x01	; 1
    2e38:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	a0 e8       	ldi	r26, 0x80	; 128
    2e42:	bf e3       	ldi	r27, 0x3F	; 63
    2e44:	8f a3       	std	Y+39, r24	; 0x27
    2e46:	98 a7       	std	Y+40, r25	; 0x28
    2e48:	a9 a7       	std	Y+41, r26	; 0x29
    2e4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e4c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e4e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e50:	89 a5       	ldd	r24, Y+41	; 0x29
    2e52:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	4a e7       	ldi	r20, 0x7A	; 122
    2e5a:	55 e4       	ldi	r21, 0x45	; 69
    2e5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	8b a3       	std	Y+35, r24	; 0x23
    2e66:	9c a3       	std	Y+36, r25	; 0x24
    2e68:	ad a3       	std	Y+37, r26	; 0x25
    2e6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e70:	8d a1       	ldd	r24, Y+37	; 0x25
    2e72:	9e a1       	ldd	r25, Y+38	; 0x26
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e8       	ldi	r20, 0x80	; 128
    2e7a:	5f e3       	ldi	r21, 0x3F	; 63
    2e7c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e80:	88 23       	and	r24, r24
    2e82:	2c f4       	brge	.+10     	; 0x2e8e <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	9a a3       	std	Y+34, r25	; 0x22
    2e8a:	89 a3       	std	Y+33, r24	; 0x21
    2e8c:	3f c0       	rjmp	.+126    	; 0x2f0c <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2e8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e90:	7c a1       	ldd	r23, Y+36	; 0x24
    2e92:	8d a1       	ldd	r24, Y+37	; 0x25
    2e94:	9e a1       	ldd	r25, Y+38	; 0x26
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	3f ef       	ldi	r19, 0xFF	; 255
    2e9a:	4f e7       	ldi	r20, 0x7F	; 127
    2e9c:	57 e4       	ldi	r21, 0x47	; 71
    2e9e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ea2:	18 16       	cp	r1, r24
    2ea4:	4c f5       	brge	.+82     	; 0x2ef8 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ea8:	78 a5       	ldd	r23, Y+40	; 0x28
    2eaa:	89 a5       	ldd	r24, Y+41	; 0x29
    2eac:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e2       	ldi	r20, 0x20	; 32
    2eb4:	51 e4       	ldi	r21, 0x41	; 65
    2eb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	bc 01       	movw	r22, r24
    2ec0:	cd 01       	movw	r24, r26
    2ec2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	9a a3       	std	Y+34, r25	; 0x22
    2ecc:	89 a3       	std	Y+33, r24	; 0x21
    2ece:	0f c0       	rjmp	.+30     	; 0x2eee <LCD_displayCharacter+0x658>
    2ed0:	80 e9       	ldi	r24, 0x90	; 144
    2ed2:	91 e0       	ldi	r25, 0x01	; 1
    2ed4:	98 a3       	std	Y+32, r25	; 0x20
    2ed6:	8f 8f       	std	Y+31, r24	; 0x1f
    2ed8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eda:	98 a1       	ldd	r25, Y+32	; 0x20
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <LCD_displayCharacter+0x646>
    2ee0:	98 a3       	std	Y+32, r25	; 0x20
    2ee2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ee6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	9a a3       	std	Y+34, r25	; 0x22
    2eec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eee:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef2:	00 97       	sbiw	r24, 0x00	; 0
    2ef4:	69 f7       	brne	.-38     	; 0x2ed0 <LCD_displayCharacter+0x63a>
    2ef6:	14 c0       	rjmp	.+40     	; 0x2f20 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef8:	6b a1       	ldd	r22, Y+35	; 0x23
    2efa:	7c a1       	ldd	r23, Y+36	; 0x24
    2efc:	8d a1       	ldd	r24, Y+37	; 0x25
    2efe:	9e a1       	ldd	r25, Y+38	; 0x26
    2f00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	9a a3       	std	Y+34, r25	; 0x22
    2f0a:	89 a3       	std	Y+33, r24	; 0x21
    2f0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f10:	9e 8f       	std	Y+30, r25	; 0x1e
    2f12:	8d 8f       	std	Y+29, r24	; 0x1d
    2f14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	f1 f7       	brne	.-4      	; 0x2f18 <LCD_displayCharacter+0x682>
    2f1c:	9e 8f       	std	Y+30, r25	; 0x1e
    2f1e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID, GET_BIT(data, 0));
    2f20:	fe 01       	movw	r30, r28
    2f22:	ed 59       	subi	r30, 0x9D	; 157
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	80 81       	ld	r24, Z
    2f28:	98 2f       	mov	r25, r24
    2f2a:	91 70       	andi	r25, 0x01	; 1
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	63 e0       	ldi	r22, 0x03	; 3
    2f30:	49 2f       	mov	r20, r25
    2f32:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID+1, GET_BIT(data, 1));
    2f36:	fe 01       	movw	r30, r28
    2f38:	ed 59       	subi	r30, 0x9D	; 157
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	80 81       	ld	r24, Z
    2f3e:	88 2f       	mov	r24, r24
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	82 70       	andi	r24, 0x02	; 2
    2f44:	90 70       	andi	r25, 0x00	; 0
    2f46:	95 95       	asr	r25
    2f48:	87 95       	ror	r24
    2f4a:	98 2f       	mov	r25, r24
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	64 e0       	ldi	r22, 0x04	; 4
    2f50:	49 2f       	mov	r20, r25
    2f52:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID+2, GET_BIT(data, 2));
    2f56:	fe 01       	movw	r30, r28
    2f58:	ed 59       	subi	r30, 0x9D	; 157
    2f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5c:	80 81       	ld	r24, Z
    2f5e:	88 2f       	mov	r24, r24
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	84 70       	andi	r24, 0x04	; 4
    2f64:	90 70       	andi	r25, 0x00	; 0
    2f66:	95 95       	asr	r25
    2f68:	87 95       	ror	r24
    2f6a:	95 95       	asr	r25
    2f6c:	87 95       	ror	r24
    2f6e:	98 2f       	mov	r25, r24
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	65 e0       	ldi	r22, 0x05	; 5
    2f74:	49 2f       	mov	r20, r25
    2f76:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_START_PIN_ID+3, GET_BIT(data, 3));
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	ed 59       	subi	r30, 0x9D	; 157
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	80 81       	ld	r24, Z
    2f82:	88 2f       	mov	r24, r24
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	88 70       	andi	r24, 0x08	; 8
    2f88:	90 70       	andi	r25, 0x00	; 0
    2f8a:	95 95       	asr	r25
    2f8c:	87 95       	ror	r24
    2f8e:	95 95       	asr	r25
    2f90:	87 95       	ror	r24
    2f92:	95 95       	asr	r25
    2f94:	87 95       	ror	r24
    2f96:	98 2f       	mov	r25, r24
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	66 e0       	ldi	r22, 0x06	; 6
    2f9c:	49 2f       	mov	r20, r25
    2f9e:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	a0 e8       	ldi	r26, 0x80	; 128
    2fa8:	bf e3       	ldi	r27, 0x3F	; 63
    2faa:	89 8f       	std	Y+25, r24	; 0x19
    2fac:	9a 8f       	std	Y+26, r25	; 0x1a
    2fae:	ab 8f       	std	Y+27, r26	; 0x1b
    2fb0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb2:	69 8d       	ldd	r22, Y+25	; 0x19
    2fb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	4a e7       	ldi	r20, 0x7A	; 122
    2fc0:	55 e4       	ldi	r21, 0x45	; 69
    2fc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	8d 8b       	std	Y+21, r24	; 0x15
    2fcc:	9e 8b       	std	Y+22, r25	; 0x16
    2fce:	af 8b       	std	Y+23, r26	; 0x17
    2fd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2fd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2fd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e8       	ldi	r20, 0x80	; 128
    2fe0:	5f e3       	ldi	r21, 0x3F	; 63
    2fe2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fe6:	88 23       	and	r24, r24
    2fe8:	2c f4       	brge	.+10     	; 0x2ff4 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	9c 8b       	std	Y+20, r25	; 0x14
    2ff0:	8b 8b       	std	Y+19, r24	; 0x13
    2ff2:	3f c0       	rjmp	.+126    	; 0x3072 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2ff4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    2ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	3f ef       	ldi	r19, 0xFF	; 255
    3000:	4f e7       	ldi	r20, 0x7F	; 127
    3002:	57 e4       	ldi	r21, 0x47	; 71
    3004:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3008:	18 16       	cp	r1, r24
    300a:	4c f5       	brge	.+82     	; 0x305e <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    300c:	69 8d       	ldd	r22, Y+25	; 0x19
    300e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3010:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3012:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 e2       	ldi	r20, 0x20	; 32
    301a:	51 e4       	ldi	r21, 0x41	; 65
    301c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	bc 01       	movw	r22, r24
    3026:	cd 01       	movw	r24, r26
    3028:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	9c 8b       	std	Y+20, r25	; 0x14
    3032:	8b 8b       	std	Y+19, r24	; 0x13
    3034:	0f c0       	rjmp	.+30     	; 0x3054 <LCD_displayCharacter+0x7be>
    3036:	80 e9       	ldi	r24, 0x90	; 144
    3038:	91 e0       	ldi	r25, 0x01	; 1
    303a:	9a 8b       	std	Y+18, r25	; 0x12
    303c:	89 8b       	std	Y+17, r24	; 0x11
    303e:	89 89       	ldd	r24, Y+17	; 0x11
    3040:	9a 89       	ldd	r25, Y+18	; 0x12
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	f1 f7       	brne	.-4      	; 0x3042 <LCD_displayCharacter+0x7ac>
    3046:	9a 8b       	std	Y+18, r25	; 0x12
    3048:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304a:	8b 89       	ldd	r24, Y+19	; 0x13
    304c:	9c 89       	ldd	r25, Y+20	; 0x14
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	9c 8b       	std	Y+20, r25	; 0x14
    3052:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3054:	8b 89       	ldd	r24, Y+19	; 0x13
    3056:	9c 89       	ldd	r25, Y+20	; 0x14
    3058:	00 97       	sbiw	r24, 0x00	; 0
    305a:	69 f7       	brne	.-38     	; 0x3036 <LCD_displayCharacter+0x7a0>
    305c:	14 c0       	rjmp	.+40     	; 0x3086 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    305e:	6d 89       	ldd	r22, Y+21	; 0x15
    3060:	7e 89       	ldd	r23, Y+22	; 0x16
    3062:	8f 89       	ldd	r24, Y+23	; 0x17
    3064:	98 8d       	ldd	r25, Y+24	; 0x18
    3066:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	9c 8b       	std	Y+20, r25	; 0x14
    3070:	8b 8b       	std	Y+19, r24	; 0x13
    3072:	8b 89       	ldd	r24, Y+19	; 0x13
    3074:	9c 89       	ldd	r25, Y+20	; 0x14
    3076:	98 8b       	std	Y+16, r25	; 0x10
    3078:	8f 87       	std	Y+15, r24	; 0x0f
    307a:	8f 85       	ldd	r24, Y+15	; 0x0f
    307c:	98 89       	ldd	r25, Y+16	; 0x10
    307e:	01 97       	sbiw	r24, 0x01	; 1
    3080:	f1 f7       	brne	.-4      	; 0x307e <LCD_displayCharacter+0x7e8>
    3082:	98 8b       	std	Y+16, r25	; 0x10
    3084:	8f 87       	std	Y+15, r24	; 0x0f
#endif
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	62 e0       	ldi	r22, 0x02	; 2
    308a:	40 e0       	ldi	r20, 0x00	; 0
    308c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_writePin>
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	a0 e8       	ldi	r26, 0x80	; 128
    3096:	bf e3       	ldi	r27, 0x3F	; 63
    3098:	8b 87       	std	Y+11, r24	; 0x0b
    309a:	9c 87       	std	Y+12, r25	; 0x0c
    309c:	ad 87       	std	Y+13, r26	; 0x0d
    309e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	4a e7       	ldi	r20, 0x7A	; 122
    30ae:	55 e4       	ldi	r21, 0x45	; 69
    30b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	8f 83       	std	Y+7, r24	; 0x07
    30ba:	98 87       	std	Y+8, r25	; 0x08
    30bc:	a9 87       	std	Y+9, r26	; 0x09
    30be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30c0:	6f 81       	ldd	r22, Y+7	; 0x07
    30c2:	78 85       	ldd	r23, Y+8	; 0x08
    30c4:	89 85       	ldd	r24, Y+9	; 0x09
    30c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	40 e8       	ldi	r20, 0x80	; 128
    30ce:	5f e3       	ldi	r21, 0x3F	; 63
    30d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    30d4:	88 23       	and	r24, r24
    30d6:	2c f4       	brge	.+10     	; 0x30e2 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	9e 83       	std	Y+6, r25	; 0x06
    30de:	8d 83       	std	Y+5, r24	; 0x05
    30e0:	3f c0       	rjmp	.+126    	; 0x3160 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    30e2:	6f 81       	ldd	r22, Y+7	; 0x07
    30e4:	78 85       	ldd	r23, Y+8	; 0x08
    30e6:	89 85       	ldd	r24, Y+9	; 0x09
    30e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	3f ef       	ldi	r19, 0xFF	; 255
    30ee:	4f e7       	ldi	r20, 0x7F	; 127
    30f0:	57 e4       	ldi	r21, 0x47	; 71
    30f2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    30f6:	18 16       	cp	r1, r24
    30f8:	4c f5       	brge	.+82     	; 0x314c <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    30fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    30fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3100:	9e 85       	ldd	r25, Y+14	; 0x0e
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	40 e2       	ldi	r20, 0x20	; 32
    3108:	51 e4       	ldi	r21, 0x41	; 65
    310a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	bc 01       	movw	r22, r24
    3114:	cd 01       	movw	r24, r26
    3116:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	9e 83       	std	Y+6, r25	; 0x06
    3120:	8d 83       	std	Y+5, r24	; 0x05
    3122:	0f c0       	rjmp	.+30     	; 0x3142 <LCD_displayCharacter+0x8ac>
    3124:	80 e9       	ldi	r24, 0x90	; 144
    3126:	91 e0       	ldi	r25, 0x01	; 1
    3128:	9c 83       	std	Y+4, r25	; 0x04
    312a:	8b 83       	std	Y+3, r24	; 0x03
    312c:	8b 81       	ldd	r24, Y+3	; 0x03
    312e:	9c 81       	ldd	r25, Y+4	; 0x04
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	f1 f7       	brne	.-4      	; 0x3130 <LCD_displayCharacter+0x89a>
    3134:	9c 83       	std	Y+4, r25	; 0x04
    3136:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3138:	8d 81       	ldd	r24, Y+5	; 0x05
    313a:	9e 81       	ldd	r25, Y+6	; 0x06
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	9e 83       	std	Y+6, r25	; 0x06
    3140:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3142:	8d 81       	ldd	r24, Y+5	; 0x05
    3144:	9e 81       	ldd	r25, Y+6	; 0x06
    3146:	00 97       	sbiw	r24, 0x00	; 0
    3148:	69 f7       	brne	.-38     	; 0x3124 <LCD_displayCharacter+0x88e>
    314a:	14 c0       	rjmp	.+40     	; 0x3174 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    314c:	6f 81       	ldd	r22, Y+7	; 0x07
    314e:	78 85       	ldd	r23, Y+8	; 0x08
    3150:	89 85       	ldd	r24, Y+9	; 0x09
    3152:	9a 85       	ldd	r25, Y+10	; 0x0a
    3154:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	9e 83       	std	Y+6, r25	; 0x06
    315e:	8d 83       	std	Y+5, r24	; 0x05
    3160:	8d 81       	ldd	r24, Y+5	; 0x05
    3162:	9e 81       	ldd	r25, Y+6	; 0x06
    3164:	9a 83       	std	Y+2, r25	; 0x02
    3166:	89 83       	std	Y+1, r24	; 0x01
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	9a 81       	ldd	r25, Y+2	; 0x02
    316c:	01 97       	sbiw	r24, 0x01	; 1
    316e:	f1 f7       	brne	.-4      	; 0x316c <LCD_displayCharacter+0x8d6>
    3170:	9a 83       	std	Y+2, r25	; 0x02
    3172:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3174:	cd 59       	subi	r28, 0x9D	; 157
    3176:	df 4f       	sbci	r29, 0xFF	; 255
    3178:	0f b6       	in	r0, 0x3f	; 63
    317a:	f8 94       	cli
    317c:	de bf       	out	0x3e, r29	; 62
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	cd bf       	out	0x3d, r28	; 61
    3182:	cf 91       	pop	r28
    3184:	df 91       	pop	r29
    3186:	1f 91       	pop	r17
    3188:	0f 91       	pop	r16
    318a:	08 95       	ret

0000318c <LCD_displayString>:

/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str) {
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	00 d0       	rcall	.+0      	; 0x3192 <LCD_displayString+0x6>
    3192:	0f 92       	push	r0
    3194:	cd b7       	in	r28, 0x3d	; 61
    3196:	de b7       	in	r29, 0x3e	; 62
    3198:	9b 83       	std	Y+3, r25	; 0x03
    319a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    319c:	19 82       	std	Y+1, r1	; 0x01
    319e:	0e c0       	rjmp	.+28     	; 0x31bc <LCD_displayString+0x30>
	while (Str[i] != '\0') {
		LCD_displayCharacter(Str[i]);
    31a0:	89 81       	ldd	r24, Y+1	; 0x01
    31a2:	28 2f       	mov	r18, r24
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	8a 81       	ldd	r24, Y+2	; 0x02
    31a8:	9b 81       	ldd	r25, Y+3	; 0x03
    31aa:	fc 01       	movw	r30, r24
    31ac:	e2 0f       	add	r30, r18
    31ae:	f3 1f       	adc	r31, r19
    31b0:	80 81       	ld	r24, Z
    31b2:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayCharacter>
		i++;
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	8f 5f       	subi	r24, 0xFF	; 255
    31ba:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str) {
	uint8 i = 0;
	while (Str[i] != '\0') {
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	28 2f       	mov	r18, r24
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	8a 81       	ldd	r24, Y+2	; 0x02
    31c4:	9b 81       	ldd	r25, Y+3	; 0x03
    31c6:	fc 01       	movw	r30, r24
    31c8:	e2 0f       	add	r30, r18
    31ca:	f3 1f       	adc	r31, r19
    31cc:	80 81       	ld	r24, Z
    31ce:	88 23       	and	r24, r24
    31d0:	39 f7       	brne	.-50     	; 0x31a0 <LCD_displayString+0x14>
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	cf 91       	pop	r28
    31da:	df 91       	pop	r29
    31dc:	08 95       	ret

000031de <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row, uint8 col) {
    31de:	df 93       	push	r29
    31e0:	cf 93       	push	r28
    31e2:	00 d0       	rcall	.+0      	; 0x31e4 <LCD_moveCursor+0x6>
    31e4:	00 d0       	rcall	.+0      	; 0x31e6 <LCD_moveCursor+0x8>
    31e6:	0f 92       	push	r0
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
    31ec:	8a 83       	std	Y+2, r24	; 0x02
    31ee:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch (row) {
    31f0:	8a 81       	ldd	r24, Y+2	; 0x02
    31f2:	28 2f       	mov	r18, r24
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	3d 83       	std	Y+5, r19	; 0x05
    31f8:	2c 83       	std	Y+4, r18	; 0x04
    31fa:	8c 81       	ldd	r24, Y+4	; 0x04
    31fc:	9d 81       	ldd	r25, Y+5	; 0x05
    31fe:	81 30       	cpi	r24, 0x01	; 1
    3200:	91 05       	cpc	r25, r1
    3202:	c1 f0       	breq	.+48     	; 0x3234 <LCD_moveCursor+0x56>
    3204:	2c 81       	ldd	r18, Y+4	; 0x04
    3206:	3d 81       	ldd	r19, Y+5	; 0x05
    3208:	22 30       	cpi	r18, 0x02	; 2
    320a:	31 05       	cpc	r19, r1
    320c:	2c f4       	brge	.+10     	; 0x3218 <LCD_moveCursor+0x3a>
    320e:	8c 81       	ldd	r24, Y+4	; 0x04
    3210:	9d 81       	ldd	r25, Y+5	; 0x05
    3212:	00 97       	sbiw	r24, 0x00	; 0
    3214:	61 f0       	breq	.+24     	; 0x322e <LCD_moveCursor+0x50>
    3216:	19 c0       	rjmp	.+50     	; 0x324a <LCD_moveCursor+0x6c>
    3218:	2c 81       	ldd	r18, Y+4	; 0x04
    321a:	3d 81       	ldd	r19, Y+5	; 0x05
    321c:	22 30       	cpi	r18, 0x02	; 2
    321e:	31 05       	cpc	r19, r1
    3220:	69 f0       	breq	.+26     	; 0x323c <LCD_moveCursor+0x5e>
    3222:	8c 81       	ldd	r24, Y+4	; 0x04
    3224:	9d 81       	ldd	r25, Y+5	; 0x05
    3226:	83 30       	cpi	r24, 0x03	; 3
    3228:	91 05       	cpc	r25, r1
    322a:	61 f0       	breq	.+24     	; 0x3244 <LCD_moveCursor+0x66>
    322c:	0e c0       	rjmp	.+28     	; 0x324a <LCD_moveCursor+0x6c>
	case 0:
		lcd_memory_address = col;
    322e:	8b 81       	ldd	r24, Y+3	; 0x03
    3230:	89 83       	std	Y+1, r24	; 0x01
    3232:	0b c0       	rjmp	.+22     	; 0x324a <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    3234:	8b 81       	ldd	r24, Y+3	; 0x03
    3236:	80 5c       	subi	r24, 0xC0	; 192
    3238:	89 83       	std	Y+1, r24	; 0x01
    323a:	07 c0       	rjmp	.+14     	; 0x324a <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    323c:	8b 81       	ldd	r24, Y+3	; 0x03
    323e:	80 5f       	subi	r24, 0xF0	; 240
    3240:	89 83       	std	Y+1, r24	; 0x01
    3242:	03 c0       	rjmp	.+6      	; 0x324a <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	80 5b       	subi	r24, 0xB0	; 176
    3248:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	80 68       	ori	r24, 0x80	; 128
    324e:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <LCD_sendCommand>
}
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	cf 91       	pop	r28
    325e:	df 91       	pop	r29
    3260:	08 95       	ret

00003262 <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    3262:	df 93       	push	r29
    3264:	cf 93       	push	r28
    3266:	00 d0       	rcall	.+0      	; 0x3268 <LCD_displayStringRowColumn+0x6>
    3268:	00 d0       	rcall	.+0      	; 0x326a <LCD_displayStringRowColumn+0x8>
    326a:	cd b7       	in	r28, 0x3d	; 61
    326c:	de b7       	in	r29, 0x3e	; 62
    326e:	89 83       	std	Y+1, r24	; 0x01
    3270:	6a 83       	std	Y+2, r22	; 0x02
    3272:	5c 83       	std	Y+4, r21	; 0x04
    3274:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* go to to the required LCD position */
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	6a 81       	ldd	r22, Y+2	; 0x02
    327a:	0e 94 ef 18 	call	0x31de	; 0x31de <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    327e:	8b 81       	ldd	r24, Y+3	; 0x03
    3280:	9c 81       	ldd	r25, Y+4	; 0x04
    3282:	0e 94 c6 18 	call	0x318c	; 0x318c <LCD_displayString>
}
    3286:	0f 90       	pop	r0
    3288:	0f 90       	pop	r0
    328a:	0f 90       	pop	r0
    328c:	0f 90       	pop	r0
    328e:	cf 91       	pop	r28
    3290:	df 91       	pop	r29
    3292:	08 95       	ret

00003294 <LCD_shiftDisplayRight>:

void LCD_shiftDisplayRight(void){
    3294:	df 93       	push	r29
    3296:	cf 93       	push	r28
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_RIGHT);
    329c:	8c e1       	ldi	r24, 0x1C	; 28
    329e:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <LCD_sendCommand>
}
    32a2:	cf 91       	pop	r28
    32a4:	df 91       	pop	r29
    32a6:	08 95       	ret

000032a8 <LCD_shiftDisplayLeft>:

void LCD_shiftDisplayLeft(void){
    32a8:	df 93       	push	r29
    32aa:	cf 93       	push	r28
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_LEFT);
    32b0:	88 e1       	ldi	r24, 0x18	; 24
    32b2:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <LCD_sendCommand>
}
    32b6:	cf 91       	pop	r28
    32b8:	df 91       	pop	r29
    32ba:	08 95       	ret

000032bc <LCD_intgerToString>:

/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data) {
    32bc:	df 93       	push	r29
    32be:	cf 93       	push	r28
    32c0:	cd b7       	in	r28, 0x3d	; 61
    32c2:	de b7       	in	r29, 0x3e	; 62
    32c4:	62 97       	sbiw	r28, 0x12	; 18
    32c6:	0f b6       	in	r0, 0x3f	; 63
    32c8:	f8 94       	cli
    32ca:	de bf       	out	0x3e, r29	; 62
    32cc:	0f be       	out	0x3f, r0	; 63
    32ce:	cd bf       	out	0x3d, r28	; 61
    32d0:	9a 8b       	std	Y+18, r25	; 0x12
    32d2:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data, buff, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    32d4:	89 89       	ldd	r24, Y+17	; 0x11
    32d6:	9a 89       	ldd	r25, Y+18	; 0x12
    32d8:	9e 01       	movw	r18, r28
    32da:	2f 5f       	subi	r18, 0xFF	; 255
    32dc:	3f 4f       	sbci	r19, 0xFF	; 255
    32de:	b9 01       	movw	r22, r18
    32e0:	4a e0       	ldi	r20, 0x0A	; 10
    32e2:	50 e0       	ldi	r21, 0x00	; 0
    32e4:	0e 94 3b 1a 	call	0x3476	; 0x3476 <itoa>
	LCD_displayString(buff); /* Display the string */
    32e8:	ce 01       	movw	r24, r28
    32ea:	01 96       	adiw	r24, 0x01	; 1
    32ec:	0e 94 c6 18 	call	0x318c	; 0x318c <LCD_displayString>
}
    32f0:	62 96       	adiw	r28, 0x12	; 18
    32f2:	0f b6       	in	r0, 0x3f	; 63
    32f4:	f8 94       	cli
    32f6:	de bf       	out	0x3e, r29	; 62
    32f8:	0f be       	out	0x3f, r0	; 63
    32fa:	cd bf       	out	0x3d, r28	; 61
    32fc:	cf 91       	pop	r28
    32fe:	df 91       	pop	r29
    3300:	08 95       	ret

00003302 <LCD_floatToString>:

/*
 * Description :
 * Display the required float value on the screen
 */
void LCD_floatToString(float data) {
    3302:	df 93       	push	r29
    3304:	cf 93       	push	r28
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	28 97       	sbiw	r28, 0x08	; 8
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	f8 94       	cli
    3310:	de bf       	out	0x3e, r29	; 62
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	cd bf       	out	0x3d, r28	; 61
    3316:	6d 83       	std	Y+5, r22	; 0x05
    3318:	7e 83       	std	Y+6, r23	; 0x06
    331a:	8f 83       	std	Y+7, r24	; 0x07
    331c:	98 87       	std	Y+8, r25	; 0x08
	int decimalValue = (int) data;
    331e:	6d 81       	ldd	r22, Y+5	; 0x05
    3320:	7e 81       	ldd	r23, Y+6	; 0x06
    3322:	8f 81       	ldd	r24, Y+7	; 0x07
    3324:	98 85       	ldd	r25, Y+8	; 0x08
    3326:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	9c 83       	std	Y+4, r25	; 0x04
    3330:	8b 83       	std	Y+3, r24	; 0x03
	int floatValue = (data - decimalValue) * 100;
    3332:	8b 81       	ldd	r24, Y+3	; 0x03
    3334:	9c 81       	ldd	r25, Y+4	; 0x04
    3336:	aa 27       	eor	r26, r26
    3338:	97 fd       	sbrc	r25, 7
    333a:	a0 95       	com	r26
    333c:	ba 2f       	mov	r27, r26
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    3346:	9b 01       	movw	r18, r22
    3348:	ac 01       	movw	r20, r24
    334a:	6d 81       	ldd	r22, Y+5	; 0x05
    334c:	7e 81       	ldd	r23, Y+6	; 0x06
    334e:	8f 81       	ldd	r24, Y+7	; 0x07
    3350:	98 85       	ldd	r25, Y+8	; 0x08
    3352:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	bc 01       	movw	r22, r24
    335c:	cd 01       	movw	r24, r26
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	48 ec       	ldi	r20, 0xC8	; 200
    3364:	52 e4       	ldi	r21, 0x42	; 66
    3366:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	bc 01       	movw	r22, r24
    3370:	cd 01       	movw	r24, r26
    3372:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	9a 83       	std	Y+2, r25	; 0x02
    337c:	89 83       	std	Y+1, r24	; 0x01
	LCD_intgerToString(decimalValue);
    337e:	8b 81       	ldd	r24, Y+3	; 0x03
    3380:	9c 81       	ldd	r25, Y+4	; 0x04
    3382:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_intgerToString>
	LCD_displayCharacter('.');
    3386:	8e e2       	ldi	r24, 0x2E	; 46
    3388:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayCharacter>
	LCD_intgerToString(floatValue);
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	9a 81       	ldd	r25, Y+2	; 0x02
    3390:	0e 94 5e 19 	call	0x32bc	; 0x32bc <LCD_intgerToString>
}
    3394:	28 96       	adiw	r28, 0x08	; 8
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
    33a0:	cf 91       	pop	r28
    33a2:	df 91       	pop	r29
    33a4:	08 95       	ret

000033a6 <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void) {
    33a6:	df 93       	push	r29
    33a8:	cf 93       	push	r28
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY); /* Send clear display command */
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <LCD_sendCommand>
}
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	08 95       	ret

000033ba <__divmodhi4>:
    33ba:	97 fb       	bst	r25, 7
    33bc:	09 2e       	mov	r0, r25
    33be:	07 26       	eor	r0, r23
    33c0:	0a d0       	rcall	.+20     	; 0x33d6 <__divmodhi4_neg1>
    33c2:	77 fd       	sbrc	r23, 7
    33c4:	04 d0       	rcall	.+8      	; 0x33ce <__divmodhi4_neg2>
    33c6:	0c d0       	rcall	.+24     	; 0x33e0 <__udivmodhi4>
    33c8:	06 d0       	rcall	.+12     	; 0x33d6 <__divmodhi4_neg1>
    33ca:	00 20       	and	r0, r0
    33cc:	1a f4       	brpl	.+6      	; 0x33d4 <__divmodhi4_exit>

000033ce <__divmodhi4_neg2>:
    33ce:	70 95       	com	r23
    33d0:	61 95       	neg	r22
    33d2:	7f 4f       	sbci	r23, 0xFF	; 255

000033d4 <__divmodhi4_exit>:
    33d4:	08 95       	ret

000033d6 <__divmodhi4_neg1>:
    33d6:	f6 f7       	brtc	.-4      	; 0x33d4 <__divmodhi4_exit>
    33d8:	90 95       	com	r25
    33da:	81 95       	neg	r24
    33dc:	9f 4f       	sbci	r25, 0xFF	; 255
    33de:	08 95       	ret

000033e0 <__udivmodhi4>:
    33e0:	aa 1b       	sub	r26, r26
    33e2:	bb 1b       	sub	r27, r27
    33e4:	51 e1       	ldi	r21, 0x11	; 17
    33e6:	07 c0       	rjmp	.+14     	; 0x33f6 <__udivmodhi4_ep>

000033e8 <__udivmodhi4_loop>:
    33e8:	aa 1f       	adc	r26, r26
    33ea:	bb 1f       	adc	r27, r27
    33ec:	a6 17       	cp	r26, r22
    33ee:	b7 07       	cpc	r27, r23
    33f0:	10 f0       	brcs	.+4      	; 0x33f6 <__udivmodhi4_ep>
    33f2:	a6 1b       	sub	r26, r22
    33f4:	b7 0b       	sbc	r27, r23

000033f6 <__udivmodhi4_ep>:
    33f6:	88 1f       	adc	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	5a 95       	dec	r21
    33fc:	a9 f7       	brne	.-22     	; 0x33e8 <__udivmodhi4_loop>
    33fe:	80 95       	com	r24
    3400:	90 95       	com	r25
    3402:	bc 01       	movw	r22, r24
    3404:	cd 01       	movw	r24, r26
    3406:	08 95       	ret

00003408 <__prologue_saves__>:
    3408:	2f 92       	push	r2
    340a:	3f 92       	push	r3
    340c:	4f 92       	push	r4
    340e:	5f 92       	push	r5
    3410:	6f 92       	push	r6
    3412:	7f 92       	push	r7
    3414:	8f 92       	push	r8
    3416:	9f 92       	push	r9
    3418:	af 92       	push	r10
    341a:	bf 92       	push	r11
    341c:	cf 92       	push	r12
    341e:	df 92       	push	r13
    3420:	ef 92       	push	r14
    3422:	ff 92       	push	r15
    3424:	0f 93       	push	r16
    3426:	1f 93       	push	r17
    3428:	cf 93       	push	r28
    342a:	df 93       	push	r29
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
    3430:	ca 1b       	sub	r28, r26
    3432:	db 0b       	sbc	r29, r27
    3434:	0f b6       	in	r0, 0x3f	; 63
    3436:	f8 94       	cli
    3438:	de bf       	out	0x3e, r29	; 62
    343a:	0f be       	out	0x3f, r0	; 63
    343c:	cd bf       	out	0x3d, r28	; 61
    343e:	09 94       	ijmp

00003440 <__epilogue_restores__>:
    3440:	2a 88       	ldd	r2, Y+18	; 0x12
    3442:	39 88       	ldd	r3, Y+17	; 0x11
    3444:	48 88       	ldd	r4, Y+16	; 0x10
    3446:	5f 84       	ldd	r5, Y+15	; 0x0f
    3448:	6e 84       	ldd	r6, Y+14	; 0x0e
    344a:	7d 84       	ldd	r7, Y+13	; 0x0d
    344c:	8c 84       	ldd	r8, Y+12	; 0x0c
    344e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3450:	aa 84       	ldd	r10, Y+10	; 0x0a
    3452:	b9 84       	ldd	r11, Y+9	; 0x09
    3454:	c8 84       	ldd	r12, Y+8	; 0x08
    3456:	df 80       	ldd	r13, Y+7	; 0x07
    3458:	ee 80       	ldd	r14, Y+6	; 0x06
    345a:	fd 80       	ldd	r15, Y+5	; 0x05
    345c:	0c 81       	ldd	r16, Y+4	; 0x04
    345e:	1b 81       	ldd	r17, Y+3	; 0x03
    3460:	aa 81       	ldd	r26, Y+2	; 0x02
    3462:	b9 81       	ldd	r27, Y+1	; 0x01
    3464:	ce 0f       	add	r28, r30
    3466:	d1 1d       	adc	r29, r1
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	f8 94       	cli
    346c:	de bf       	out	0x3e, r29	; 62
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	cd bf       	out	0x3d, r28	; 61
    3472:	ed 01       	movw	r28, r26
    3474:	08 95       	ret

00003476 <itoa>:
    3476:	fb 01       	movw	r30, r22
    3478:	9f 01       	movw	r18, r30
    347a:	e8 94       	clt
    347c:	42 30       	cpi	r20, 0x02	; 2
    347e:	c4 f0       	brlt	.+48     	; 0x34b0 <itoa+0x3a>
    3480:	45 32       	cpi	r20, 0x25	; 37
    3482:	b4 f4       	brge	.+44     	; 0x34b0 <itoa+0x3a>
    3484:	4a 30       	cpi	r20, 0x0A	; 10
    3486:	29 f4       	brne	.+10     	; 0x3492 <itoa+0x1c>
    3488:	97 fb       	bst	r25, 7
    348a:	1e f4       	brtc	.+6      	; 0x3492 <itoa+0x1c>
    348c:	90 95       	com	r25
    348e:	81 95       	neg	r24
    3490:	9f 4f       	sbci	r25, 0xFF	; 255
    3492:	64 2f       	mov	r22, r20
    3494:	77 27       	eor	r23, r23
    3496:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__udivmodhi4>
    349a:	80 5d       	subi	r24, 0xD0	; 208
    349c:	8a 33       	cpi	r24, 0x3A	; 58
    349e:	0c f0       	brlt	.+2      	; 0x34a2 <itoa+0x2c>
    34a0:	89 5d       	subi	r24, 0xD9	; 217
    34a2:	81 93       	st	Z+, r24
    34a4:	cb 01       	movw	r24, r22
    34a6:	00 97       	sbiw	r24, 0x00	; 0
    34a8:	a1 f7       	brne	.-24     	; 0x3492 <itoa+0x1c>
    34aa:	16 f4       	brtc	.+4      	; 0x34b0 <itoa+0x3a>
    34ac:	5d e2       	ldi	r21, 0x2D	; 45
    34ae:	51 93       	st	Z+, r21
    34b0:	10 82       	st	Z, r1
    34b2:	c9 01       	movw	r24, r18
    34b4:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <strrev>

000034b8 <strrev>:
    34b8:	dc 01       	movw	r26, r24
    34ba:	fc 01       	movw	r30, r24
    34bc:	67 2f       	mov	r22, r23
    34be:	71 91       	ld	r23, Z+
    34c0:	77 23       	and	r23, r23
    34c2:	e1 f7       	brne	.-8      	; 0x34bc <strrev+0x4>
    34c4:	32 97       	sbiw	r30, 0x02	; 2
    34c6:	04 c0       	rjmp	.+8      	; 0x34d0 <strrev+0x18>
    34c8:	7c 91       	ld	r23, X
    34ca:	6d 93       	st	X+, r22
    34cc:	70 83       	st	Z, r23
    34ce:	62 91       	ld	r22, -Z
    34d0:	ae 17       	cp	r26, r30
    34d2:	bf 07       	cpc	r27, r31
    34d4:	c8 f3       	brcs	.-14     	; 0x34c8 <strrev+0x10>
    34d6:	08 95       	ret

000034d8 <_exit>:
    34d8:	f8 94       	cli

000034da <__stop_program>:
    34da:	ff cf       	rjmp	.-2      	; 0x34da <__stop_program>
