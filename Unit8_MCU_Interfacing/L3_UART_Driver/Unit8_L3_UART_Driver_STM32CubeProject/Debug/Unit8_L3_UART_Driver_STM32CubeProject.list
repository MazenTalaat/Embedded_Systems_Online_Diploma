
Unit8_L3_UART_Driver_STM32CubeProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ac4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bf4  08000bfc  00010bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bf4  08000bf4  00010bfc  2**0
                  CONTENTS
  4 .ARM          00000000  08000bf4  08000bf4  00010bfc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bf4  08000bfc  00010bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bf4  08000bf4  00010bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bf8  08000bf8  00010bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  08000bfc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000bfc  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010bfc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010c25  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e6b  00000000  00000000  00010c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000407  00000000  00000000  00011ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000006c4  00000000  00000000  00011eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000140  00000000  00000000  000125a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000000f8  00000000  00000000  000126e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000103d  00000000  00000000  000127d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000a5f  00000000  00000000  00013815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00004899  00000000  00000000  00014274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000003a8  00000000  00000000  00018b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bdc 	.word	0x08000bdc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000bdc 	.word	0x08000bdc

08000170 <MCAL_GPIO_init>:
// Functions Definitions
//*****************************************************************************
// @brief Setup the mode of the required pin/port.
// @param[in]  GPIOx  The port to be configured.
// @param[in]  pinConfig  The pin/port configuration.
void MCAL_GPIO_init(GPIO_TypeDef *GPIOx, GPIO_PinConfig *pinConfig) {
 8000170:	b590      	push	{r4, r7, lr}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	uint32 portConfigValue = (uint32) 0;
 800017a:	2300      	movs	r3, #0
 800017c:	60fb      	str	r3, [r7, #12]
	uint8 pinConfigValue = (uint8) 0;
 800017e:	2300      	movs	r3, #0
 8000180:	72fb      	strb	r3, [r7, #11]
	uint8 i = 0;
 8000182:	2300      	movs	r3, #0
 8000184:	72bb      	strb	r3, [r7, #10]
	// Configure port
	if (pinConfig->GPIO_pinNumber == GPIO_PIN_All) {
 8000186:	683b      	ldr	r3, [r7, #0]
 8000188:	881b      	ldrh	r3, [r3, #0]
 800018a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800018e:	4293      	cmp	r3, r2
 8000190:	d15a      	bne.n	8000248 <MCAL_GPIO_init+0xd8>
		// Reset GPIO_ODR
		MCAL_GPIO_writePort(GPIOx, LOGIC_LOW);
 8000192:	2100      	movs	r1, #0
 8000194:	6878      	ldr	r0, [r7, #4]
 8000196:	f000 f8f9 	bl	800038c <MCAL_GPIO_writePort>
		// Setting the 32 Bits for CRH and CRL Registers
		for (i = 0; i < 32; i += 4) {
 800019a:	2300      	movs	r3, #0
 800019c:	72bb      	strb	r3, [r7, #10]
 800019e:	e036      	b.n	800020e <MCAL_GPIO_init+0x9e>
			// OUTPUT MODE
			if (isOutput(pinConfig)) {
 80001a0:	6838      	ldr	r0, [r7, #0]
 80001a2:	f000 f901 	bl	80003a8 <isOutput>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d010      	beq.n	80001ce <MCAL_GPIO_init+0x5e>
				portConfigValue |= (((((pinConfig->GPIO_pinMode
 80001ac:	683b      	ldr	r3, [r7, #0]
 80001ae:	789b      	ldrb	r3, [r3, #2]
						- GPIO_MODE_OFFSET) << GPIO_CRLH_CNF_SHIFT)
 80001b0:	3b04      	subs	r3, #4
 80001b2:	009b      	lsls	r3, r3, #2
						| pinConfig->GPIO_pinOutputSpeed) & 0x0F) << i);
 80001b4:	683a      	ldr	r2, [r7, #0]
 80001b6:	78d2      	ldrb	r2, [r2, #3]
 80001b8:	4313      	orrs	r3, r2
 80001ba:	f003 020f 	and.w	r2, r3, #15
 80001be:	7abb      	ldrb	r3, [r7, #10]
 80001c0:	fa02 f303 	lsl.w	r3, r2, r3
 80001c4:	461a      	mov	r2, r3
				portConfigValue |= (((((pinConfig->GPIO_pinMode
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	4313      	orrs	r3, r2
 80001ca:	60fb      	str	r3, [r7, #12]
 80001cc:	e01c      	b.n	8000208 <MCAL_GPIO_init+0x98>
			}
			// INPUT MODE
			else {
				if (pinConfig->GPIO_pinMode == GPIO_MODE_IN_ANALOG
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	789b      	ldrb	r3, [r3, #2]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d003      	beq.n	80001de <MCAL_GPIO_init+0x6e>
						|| pinConfig->GPIO_pinMode == GPIO_MODE_IN_FLOATING) {
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	789b      	ldrb	r3, [r3, #2]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d10c      	bne.n	80001f8 <MCAL_GPIO_init+0x88>
					portConfigValue |= ((((pinConfig->GPIO_pinMode
 80001de:	683b      	ldr	r3, [r7, #0]
 80001e0:	789b      	ldrb	r3, [r3, #2]
							<< GPIO_CRLH_CNF_SHIFT) | 0x00) & 0x0F) << i);
 80001e2:	009b      	lsls	r3, r3, #2
 80001e4:	f003 020f 	and.w	r2, r3, #15
 80001e8:	7abb      	ldrb	r3, [r7, #10]
 80001ea:	fa02 f303 	lsl.w	r3, r2, r3
 80001ee:	461a      	mov	r2, r3
					portConfigValue |= ((((pinConfig->GPIO_pinMode
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	4313      	orrs	r3, r2
 80001f4:	60fb      	str	r3, [r7, #12]
 80001f6:	e007      	b.n	8000208 <MCAL_GPIO_init+0x98>
				} else {
					portConfigValue |= ((((GPIO_MODE_IN_PULL_UP
							<< GPIO_CRLH_CNF_SHIFT) | 0x00) & 0x0F) << i);
 80001f8:	7abb      	ldrb	r3, [r7, #10]
 80001fa:	2208      	movs	r2, #8
 80001fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000200:	461a      	mov	r2, r3
					portConfigValue |= ((((GPIO_MODE_IN_PULL_UP
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	4313      	orrs	r3, r2
 8000206:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < 32; i += 4) {
 8000208:	7abb      	ldrb	r3, [r7, #10]
 800020a:	3304      	adds	r3, #4
 800020c:	72bb      	strb	r3, [r7, #10]
 800020e:	7abb      	ldrb	r3, [r7, #10]
 8000210:	2b1f      	cmp	r3, #31
 8000212:	d9c5      	bls.n	80001a0 <MCAL_GPIO_init+0x30>
				}
			}
		}
		// Configure the whole port using CRL and CRH
		GPIOx->CRL = portConfigValue;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	68fa      	ldr	r2, [r7, #12]
 8000218:	601a      	str	r2, [r3, #0]
		GPIOx->CRH = portConfigValue;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	68fa      	ldr	r2, [r7, #12]
 800021e:	605a      	str	r2, [r3, #4]
		// Configure input pull-up or pull-down
		// Table 20. Port bit configuration table
		// PxODR register -> 1 for pull-up, 0 for pull-down
		if (pinConfig->GPIO_pinMode == GPIO_MODE_IN_PULL_UP) {
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	789b      	ldrb	r3, [r3, #2]
 8000224:	2b02      	cmp	r3, #2
 8000226:	d105      	bne.n	8000234 <MCAL_GPIO_init+0xc4>
			MCAL_GPIO_writePort(GPIOx, 0xFFFF);
 8000228:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800022c:	6878      	ldr	r0, [r7, #4]
 800022e:	f000 f8ad 	bl	800038c <MCAL_GPIO_writePort>
			GPIOx->CRH &= ~(0xF << getCRLH_Position(pinConfig->GPIO_pinNumber));
			GPIOx->CRH |= (pinConfigValue
					<< getCRLH_Position(pinConfig->GPIO_pinNumber));
		}
	}
}
 8000232:	e089      	b.n	8000348 <MCAL_GPIO_init+0x1d8>
		} else if (pinConfig->GPIO_pinMode == GPIO_MODE_IN_PULL_DOWN) {
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	789b      	ldrb	r3, [r3, #2]
 8000238:	2b03      	cmp	r3, #3
 800023a:	f040 8085 	bne.w	8000348 <MCAL_GPIO_init+0x1d8>
			MCAL_GPIO_writePort(GPIOx, LOGIC_LOW);
 800023e:	2100      	movs	r1, #0
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f000 f8a3 	bl	800038c <MCAL_GPIO_writePort>
}
 8000246:	e07f      	b.n	8000348 <MCAL_GPIO_init+0x1d8>
		MCAL_GPIO_writePin(GPIOx, pinConfig->GPIO_pinNumber,
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	2200      	movs	r2, #0
 800024e:	4619      	mov	r1, r3
 8000250:	6878      	ldr	r0, [r7, #4]
 8000252:	f000 f87d 	bl	8000350 <MCAL_GPIO_writePin>
		if (isOutput(pinConfig)) {
 8000256:	6838      	ldr	r0, [r7, #0]
 8000258:	f000 f8a6 	bl	80003a8 <isOutput>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d00e      	beq.n	8000280 <MCAL_GPIO_init+0x110>
			pinConfigValue = ((((pinConfig->GPIO_pinMode - GPIO_MODE_OFFSET)
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	789b      	ldrb	r3, [r3, #2]
 8000266:	3b04      	subs	r3, #4
					<< GPIO_CRLH_CNF_SHIFT) | pinConfig->GPIO_pinOutputSpeed)
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	b25a      	sxtb	r2, r3
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	78db      	ldrb	r3, [r3, #3]
 8000270:	b25b      	sxtb	r3, r3
 8000272:	4313      	orrs	r3, r2
 8000274:	b25b      	sxtb	r3, r3
					& 0x0F);
 8000276:	b2db      	uxtb	r3, r3
			pinConfigValue = ((((pinConfig->GPIO_pinMode - GPIO_MODE_OFFSET)
 8000278:	f003 030f 	and.w	r3, r3, #15
 800027c:	72fb      	strb	r3, [r7, #11]
 800027e:	e024      	b.n	80002ca <MCAL_GPIO_init+0x15a>
			if (pinConfig->GPIO_pinMode == GPIO_MODE_IN_ANALOG
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	789b      	ldrb	r3, [r3, #2]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d003      	beq.n	8000290 <MCAL_GPIO_init+0x120>
					|| pinConfig->GPIO_pinMode == GPIO_MODE_IN_FLOATING) {
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	789b      	ldrb	r3, [r3, #2]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d107      	bne.n	80002a0 <MCAL_GPIO_init+0x130>
				pinConfigValue = (((pinConfig->GPIO_pinMode
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	789b      	ldrb	r3, [r3, #2]
						<< GPIO_CRLH_CNF_SHIFT) | 0x00) & 0x0F);
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	b2db      	uxtb	r3, r3
				pinConfigValue = (((pinConfig->GPIO_pinMode
 8000298:	f003 030f 	and.w	r3, r3, #15
 800029c:	72fb      	strb	r3, [r7, #11]
 800029e:	e014      	b.n	80002ca <MCAL_GPIO_init+0x15a>
				pinConfigValue = (((GPIO_MODE_IN_PULL_UP << GPIO_CRLH_CNF_SHIFT)
 80002a0:	2308      	movs	r3, #8
 80002a2:	72fb      	strb	r3, [r7, #11]
				if (pinConfig->GPIO_pinMode == GPIO_MODE_IN_PULL_DOWN) {
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	789b      	ldrb	r3, [r3, #2]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d107      	bne.n	80002bc <MCAL_GPIO_init+0x14c>
					MCAL_GPIO_writePin(GPIOx, pinConfig->GPIO_pinNumber,
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	881b      	ldrh	r3, [r3, #0]
 80002b0:	2200      	movs	r2, #0
 80002b2:	4619      	mov	r1, r3
 80002b4:	6878      	ldr	r0, [r7, #4]
 80002b6:	f000 f84b 	bl	8000350 <MCAL_GPIO_writePin>
 80002ba:	e006      	b.n	80002ca <MCAL_GPIO_init+0x15a>
					MCAL_GPIO_writePin(GPIOx, pinConfig->GPIO_pinNumber,
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	881b      	ldrh	r3, [r3, #0]
 80002c0:	2201      	movs	r2, #1
 80002c2:	4619      	mov	r1, r3
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f000 f843 	bl	8000350 <MCAL_GPIO_writePin>
		if (pinConfig->GPIO_pinNumber <= GPIO_PIN_7) {
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	2b80      	cmp	r3, #128	; 0x80
 80002d0:	d81d      	bhi.n	800030e <MCAL_GPIO_init+0x19e>
			GPIOx->CRL &= ~(0xF << getCRLH_Position(pinConfig->GPIO_pinNumber));
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	881b      	ldrh	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 f882 	bl	80003e0 <getCRLH_Position>
 80002dc:	4603      	mov	r3, r0
 80002de:	461a      	mov	r2, r3
 80002e0:	230f      	movs	r3, #15
 80002e2:	4093      	lsls	r3, r2
 80002e4:	43da      	mvns	r2, r3
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	401a      	ands	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	601a      	str	r2, [r3, #0]
					<< getCRLH_Position(pinConfig->GPIO_pinNumber));
 80002f0:	7afc      	ldrb	r4, [r7, #11]
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 f872 	bl	80003e0 <getCRLH_Position>
 80002fc:	4603      	mov	r3, r0
 80002fe:	fa04 f203 	lsl.w	r2, r4, r3
			GPIOx->CRL |= (pinConfigValue
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	431a      	orrs	r2, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	601a      	str	r2, [r3, #0]
}
 800030c:	e01c      	b.n	8000348 <MCAL_GPIO_init+0x1d8>
			GPIOx->CRH &= ~(0xF << getCRLH_Position(pinConfig->GPIO_pinNumber));
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	4618      	mov	r0, r3
 8000314:	f000 f864 	bl	80003e0 <getCRLH_Position>
 8000318:	4603      	mov	r3, r0
 800031a:	461a      	mov	r2, r3
 800031c:	230f      	movs	r3, #15
 800031e:	4093      	lsls	r3, r2
 8000320:	43da      	mvns	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	401a      	ands	r2, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	605a      	str	r2, [r3, #4]
					<< getCRLH_Position(pinConfig->GPIO_pinNumber));
 800032c:	7afc      	ldrb	r4, [r7, #11]
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	881b      	ldrh	r3, [r3, #0]
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f854 	bl	80003e0 <getCRLH_Position>
 8000338:	4603      	mov	r3, r0
 800033a:	fa04 f203 	lsl.w	r2, r4, r3
			GPIOx->CRH |= (pinConfigValue
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	431a      	orrs	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	605a      	str	r2, [r3, #4]
}
 8000348:	bf00      	nop
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	bd90      	pop	{r4, r7, pc}

08000350 <MCAL_GPIO_writePin>:

// @brief Set a pin to a value.
// @param[in]  GPIOx  The port to be used.
// @param[in]  pinNumber  The pin number.
// @param[in]  value  The value to be set.
void MCAL_GPIO_writePin(GPIO_TypeDef *GPIOx, uint16 pinNumber, uint8 value) {
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	807b      	strh	r3, [r7, #2]
 800035c:	4613      	mov	r3, r2
 800035e:	707b      	strb	r3, [r7, #1]
	if (value == LOGIC_LOW) {
 8000360:	787b      	ldrb	r3, [r7, #1]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d107      	bne.n	8000376 <MCAL_GPIO_writePin+0x26>
		GPIOx->ODR &= ~pinNumber;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	68db      	ldr	r3, [r3, #12]
 800036a:	887a      	ldrh	r2, [r7, #2]
 800036c:	43d2      	mvns	r2, r2
 800036e:	401a      	ands	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	60da      	str	r2, [r3, #12]
	} else {
		GPIOx->ODR |= pinNumber;
	}
}
 8000374:	e005      	b.n	8000382 <MCAL_GPIO_writePin+0x32>
		GPIOx->ODR |= pinNumber;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	68da      	ldr	r2, [r3, #12]
 800037a:	887b      	ldrh	r3, [r7, #2]
 800037c:	431a      	orrs	r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	60da      	str	r2, [r3, #12]
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <MCAL_GPIO_writePort>:

// @brief Set a port to a value.
// @param[in]  GPIOx  The port to be set.
// @param[in]  value  The value to be set.
void MCAL_GPIO_writePort(GPIO_TypeDef *GPIOx, uint16 value) {
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	460b      	mov	r3, r1
 8000396:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32) value;
 8000398:	887a      	ldrh	r2, [r7, #2]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	60da      	str	r2, [r3, #12]
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <isOutput>:
// Helper Functions Definitions
//*****************************************************************************
// @brief Check if the configuration is output.
// @param[in]  pinConfig  The pin/port configuration.
// @return The 1 or 0.
static int isOutput(GPIO_PinConfig *pinConfig) {
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	if (pinConfig->GPIO_pinMode == GPIO_MODE_OUT_PUSH_PULL
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	789b      	ldrb	r3, [r3, #2]
 80003b4:	2b04      	cmp	r3, #4
 80003b6:	d00b      	beq.n	80003d0 <isOutput+0x28>
			|| pinConfig->GPIO_pinMode == GPIO_MODE_OUT_OPEN_DRAIN
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	789b      	ldrb	r3, [r3, #2]
 80003bc:	2b05      	cmp	r3, #5
 80003be:	d007      	beq.n	80003d0 <isOutput+0x28>
			|| pinConfig->GPIO_pinMode == GPIO_MODE_OUT_AF_PUSH_PULL
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	789b      	ldrb	r3, [r3, #2]
 80003c4:	2b06      	cmp	r3, #6
 80003c6:	d003      	beq.n	80003d0 <isOutput+0x28>
			|| pinConfig->GPIO_pinMode == GPIO_MODE_OUT_AF_OPEN_DRAIN) {
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	789b      	ldrb	r3, [r3, #2]
 80003cc:	2b07      	cmp	r3, #7
 80003ce:	d101      	bne.n	80003d4 <isOutput+0x2c>
		return 1;
 80003d0:	2301      	movs	r3, #1
 80003d2:	e000      	b.n	80003d6 <isOutput+0x2e>
	} else {
		return 0;
 80003d4:	2300      	movs	r3, #0
	}
	return 0;
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <getCRLH_Position>:

// @brief Get the shift position in CRL and CRH registers.
// @param[in]  pinNumber  The pin number.
// @return The shift position value.
static uint8 getCRLH_Position(uint16 pinNumber) {
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	80fb      	strh	r3, [r7, #6]
	switch (pinNumber) {
 80003ea:	88fb      	ldrh	r3, [r7, #6]
 80003ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003f0:	f000 80a5 	beq.w	800053e <getCRLH_Position+0x15e>
 80003f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003f8:	f300 80a3 	bgt.w	8000542 <getCRLH_Position+0x162>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	f000 809b 	beq.w	800053a <getCRLH_Position+0x15a>
 8000404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000408:	f300 809b 	bgt.w	8000542 <getCRLH_Position+0x162>
 800040c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000410:	f000 8091 	beq.w	8000536 <getCRLH_Position+0x156>
 8000414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000418:	f300 8093 	bgt.w	8000542 <getCRLH_Position+0x162>
 800041c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000420:	f000 8087 	beq.w	8000532 <getCRLH_Position+0x152>
 8000424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000428:	f300 808b 	bgt.w	8000542 <getCRLH_Position+0x162>
 800042c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000430:	d07d      	beq.n	800052e <getCRLH_Position+0x14e>
 8000432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000436:	f300 8084 	bgt.w	8000542 <getCRLH_Position+0x162>
 800043a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800043e:	d074      	beq.n	800052a <getCRLH_Position+0x14a>
 8000440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000444:	dc7d      	bgt.n	8000542 <getCRLH_Position+0x162>
 8000446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800044a:	d06c      	beq.n	8000526 <getCRLH_Position+0x146>
 800044c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000450:	dc77      	bgt.n	8000542 <getCRLH_Position+0x162>
 8000452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000456:	d064      	beq.n	8000522 <getCRLH_Position+0x142>
 8000458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800045c:	dc71      	bgt.n	8000542 <getCRLH_Position+0x162>
 800045e:	2b80      	cmp	r3, #128	; 0x80
 8000460:	d05d      	beq.n	800051e <getCRLH_Position+0x13e>
 8000462:	2b80      	cmp	r3, #128	; 0x80
 8000464:	dc6d      	bgt.n	8000542 <getCRLH_Position+0x162>
 8000466:	2b20      	cmp	r3, #32
 8000468:	dc48      	bgt.n	80004fc <getCRLH_Position+0x11c>
 800046a:	2b00      	cmp	r3, #0
 800046c:	dd69      	ble.n	8000542 <getCRLH_Position+0x162>
 800046e:	3b01      	subs	r3, #1
 8000470:	2b1f      	cmp	r3, #31
 8000472:	d866      	bhi.n	8000542 <getCRLH_Position+0x162>
 8000474:	a201      	add	r2, pc, #4	; (adr r2, 800047c <getCRLH_Position+0x9c>)
 8000476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047a:	bf00      	nop
 800047c:	08000503 	.word	0x08000503
 8000480:	08000507 	.word	0x08000507
 8000484:	08000543 	.word	0x08000543
 8000488:	0800050b 	.word	0x0800050b
 800048c:	08000543 	.word	0x08000543
 8000490:	08000543 	.word	0x08000543
 8000494:	08000543 	.word	0x08000543
 8000498:	0800050f 	.word	0x0800050f
 800049c:	08000543 	.word	0x08000543
 80004a0:	08000543 	.word	0x08000543
 80004a4:	08000543 	.word	0x08000543
 80004a8:	08000543 	.word	0x08000543
 80004ac:	08000543 	.word	0x08000543
 80004b0:	08000543 	.word	0x08000543
 80004b4:	08000543 	.word	0x08000543
 80004b8:	08000513 	.word	0x08000513
 80004bc:	08000543 	.word	0x08000543
 80004c0:	08000543 	.word	0x08000543
 80004c4:	08000543 	.word	0x08000543
 80004c8:	08000543 	.word	0x08000543
 80004cc:	08000543 	.word	0x08000543
 80004d0:	08000543 	.word	0x08000543
 80004d4:	08000543 	.word	0x08000543
 80004d8:	08000543 	.word	0x08000543
 80004dc:	08000543 	.word	0x08000543
 80004e0:	08000543 	.word	0x08000543
 80004e4:	08000543 	.word	0x08000543
 80004e8:	08000543 	.word	0x08000543
 80004ec:	08000543 	.word	0x08000543
 80004f0:	08000543 	.word	0x08000543
 80004f4:	08000543 	.word	0x08000543
 80004f8:	08000517 	.word	0x08000517
 80004fc:	2b40      	cmp	r3, #64	; 0x40
 80004fe:	d00c      	beq.n	800051a <getCRLH_Position+0x13a>
 8000500:	e01f      	b.n	8000542 <getCRLH_Position+0x162>
	case GPIO_PIN_0:
		return 0;
 8000502:	2300      	movs	r3, #0
 8000504:	e01e      	b.n	8000544 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_1:
		return 4;
 8000506:	2304      	movs	r3, #4
 8000508:	e01c      	b.n	8000544 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_2:
		return 8;
 800050a:	2308      	movs	r3, #8
 800050c:	e01a      	b.n	8000544 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_3:
		return 12;
 800050e:	230c      	movs	r3, #12
 8000510:	e018      	b.n	8000544 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_4:
		return 16;
 8000512:	2310      	movs	r3, #16
 8000514:	e016      	b.n	8000544 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_5:
		return 20;
 8000516:	2314      	movs	r3, #20
 8000518:	e014      	b.n	8000544 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_6:
		return 24;
 800051a:	2318      	movs	r3, #24
 800051c:	e012      	b.n	8000544 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_7:
		return 28;
 800051e:	231c      	movs	r3, #28
 8000520:	e010      	b.n	8000544 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_8:
		return 0;
 8000522:	2300      	movs	r3, #0
 8000524:	e00e      	b.n	8000544 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_9:
		return 4;
 8000526:	2304      	movs	r3, #4
 8000528:	e00c      	b.n	8000544 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_10:
		return 8;
 800052a:	2308      	movs	r3, #8
 800052c:	e00a      	b.n	8000544 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_11:
		return 12;
 800052e:	230c      	movs	r3, #12
 8000530:	e008      	b.n	8000544 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_12:
		return 16;
 8000532:	2310      	movs	r3, #16
 8000534:	e006      	b.n	8000544 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_13:
		return 20;
 8000536:	2314      	movs	r3, #20
 8000538:	e004      	b.n	8000544 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_14:
		return 24;
 800053a:	2318      	movs	r3, #24
 800053c:	e002      	b.n	8000544 <getCRLH_Position+0x164>
		break;

	case GPIO_PIN_15:
		return 28;
 800053e:	231c      	movs	r3, #28
 8000540:	e000      	b.n	8000544 <getCRLH_Position+0x164>
		break;
	}
	return 0;
 8000542:	2300      	movs	r3, #0
}
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <MCAL_RCC_getSysCLKFreq>:
//*****************************************************************************
// Functions Definitions
//*****************************************************************************
// @brief Read the system clock frequency.
// @return The system clock frequency value.
uint32 MCAL_RCC_getSysCLKFreq(void) {
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable
	switch ((RCC->CFGR >> 2 & 0b11)) {
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <MCAL_RCC_getSysCLKFreq+0x38>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	089b      	lsrs	r3, r3, #2
 800055a:	f003 0303 	and.w	r3, r3, #3
 800055e:	2b02      	cmp	r3, #2
 8000560:	d00a      	beq.n	8000578 <MCAL_RCC_getSysCLKFreq+0x28>
 8000562:	2b02      	cmp	r3, #2
 8000564:	d80a      	bhi.n	800057c <MCAL_RCC_getSysCLKFreq+0x2c>
 8000566:	2b00      	cmp	r3, #0
 8000568:	d002      	beq.n	8000570 <MCAL_RCC_getSysCLKFreq+0x20>
 800056a:	2b01      	cmp	r3, #1
 800056c:	d002      	beq.n	8000574 <MCAL_RCC_getSysCLKFreq+0x24>
 800056e:	e005      	b.n	800057c <MCAL_RCC_getSysCLKFreq+0x2c>
	case 0b00:
		return HSI_CLOCK;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <MCAL_RCC_getSysCLKFreq+0x3c>)
 8000572:	e004      	b.n	800057e <MCAL_RCC_getSysCLKFreq+0x2e>
		break;
	case 0b01:
		return HSE_CLOCK;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MCAL_RCC_getSysCLKFreq+0x40>)
 8000576:	e002      	b.n	800057e <MCAL_RCC_getSysCLKFreq+0x2e>
		break;
	case 0b10:
		//TODO need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000UL;
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <MCAL_RCC_getSysCLKFreq+0x40>)
 800057a:	e000      	b.n	800057e <MCAL_RCC_getSysCLKFreq+0x2e>
		break;
	default:
		return FALSE;
 800057c:	2300      	movs	r3, #0
		break;
	}

}
 800057e:	4618      	mov	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000
 800058c:	007a1200 	.word	0x007a1200
 8000590:	00f42400 	.word	0x00f42400

08000594 <MCAL_RCC_getHCLKFreq>:

// @brief Read the AHB clock frequency.
// @return The AHB clock frequency value.
uint32 MCAL_RCC_getHCLKFreq(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	// Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_getSysCLKFreq()
 8000598:	f7ff ffda 	bl	8000550 <MCAL_RCC_getSysCLKFreq>
 800059c:	4602      	mov	r2, r0
			* (RCC_AHB_PRESCALER_MAPPING((RCC->CFGR>>4) & 0b1111)));
 800059e:	4b27      	ldr	r3, [pc, #156]	; (800063c <MCAL_RCC_getHCLKFreq+0xa8>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	091b      	lsrs	r3, r3, #4
 80005a4:	f003 030f 	and.w	r3, r3, #15
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d042      	beq.n	8000632 <MCAL_RCC_getHCLKFreq+0x9e>
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <MCAL_RCC_getHCLKFreq+0xa8>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	091b      	lsrs	r3, r3, #4
 80005b2:	f003 030f 	and.w	r3, r3, #15
 80005b6:	2b08      	cmp	r3, #8
 80005b8:	d039      	beq.n	800062e <MCAL_RCC_getHCLKFreq+0x9a>
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <MCAL_RCC_getHCLKFreq+0xa8>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	091b      	lsrs	r3, r3, #4
 80005c0:	f003 030f 	and.w	r3, r3, #15
 80005c4:	2b09      	cmp	r3, #9
 80005c6:	d030      	beq.n	800062a <MCAL_RCC_getHCLKFreq+0x96>
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MCAL_RCC_getHCLKFreq+0xa8>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	091b      	lsrs	r3, r3, #4
 80005ce:	f003 030f 	and.w	r3, r3, #15
 80005d2:	2b0b      	cmp	r3, #11
 80005d4:	d027      	beq.n	8000626 <MCAL_RCC_getHCLKFreq+0x92>
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MCAL_RCC_getHCLKFreq+0xa8>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	091b      	lsrs	r3, r3, #4
 80005dc:	f003 030f 	and.w	r3, r3, #15
 80005e0:	2b0c      	cmp	r3, #12
 80005e2:	d01e      	beq.n	8000622 <MCAL_RCC_getHCLKFreq+0x8e>
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <MCAL_RCC_getHCLKFreq+0xa8>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	091b      	lsrs	r3, r3, #4
 80005ea:	f003 030f 	and.w	r3, r3, #15
 80005ee:	2b0d      	cmp	r3, #13
 80005f0:	d015      	beq.n	800061e <MCAL_RCC_getHCLKFreq+0x8a>
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <MCAL_RCC_getHCLKFreq+0xa8>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	091b      	lsrs	r3, r3, #4
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b0e      	cmp	r3, #14
 80005fe:	d00b      	beq.n	8000618 <MCAL_RCC_getHCLKFreq+0x84>
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MCAL_RCC_getHCLKFreq+0xa8>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	f003 030f 	and.w	r3, r3, #15
 800060a:	2b0f      	cmp	r3, #15
 800060c:	d102      	bne.n	8000614 <MCAL_RCC_getHCLKFreq+0x80>
 800060e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000612:	e00f      	b.n	8000634 <MCAL_RCC_getHCLKFreq+0xa0>
 8000614:	2300      	movs	r3, #0
 8000616:	e00d      	b.n	8000634 <MCAL_RCC_getHCLKFreq+0xa0>
 8000618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800061c:	e00a      	b.n	8000634 <MCAL_RCC_getHCLKFreq+0xa0>
 800061e:	2380      	movs	r3, #128	; 0x80
 8000620:	e008      	b.n	8000634 <MCAL_RCC_getHCLKFreq+0xa0>
 8000622:	2340      	movs	r3, #64	; 0x40
 8000624:	e006      	b.n	8000634 <MCAL_RCC_getHCLKFreq+0xa0>
 8000626:	2310      	movs	r3, #16
 8000628:	e004      	b.n	8000634 <MCAL_RCC_getHCLKFreq+0xa0>
 800062a:	2308      	movs	r3, #8
 800062c:	e002      	b.n	8000634 <MCAL_RCC_getHCLKFreq+0xa0>
 800062e:	2302      	movs	r3, #2
 8000630:	e000      	b.n	8000634 <MCAL_RCC_getHCLKFreq+0xa0>
 8000632:	2301      	movs	r3, #1
 8000634:	fb02 f303 	mul.w	r3, r2, r3
}
 8000638:	4618      	mov	r0, r3
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000

08000640 <MCAL_RCC_getPCLK1Freq>:

// @brief Read the APB1 clock frequency.
// @return The APB1 clock frequency value.
uint32 MCAL_RCC_getPCLK1Freq(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_getHCLKFreq()
 8000644:	f7ff ffa6 	bl	8000594 <MCAL_RCC_getHCLKFreq>
 8000648:	4602      	mov	r2, r0
			* (RCC_APB_PRESCALER_MAPPING((RCC->CFGR>>8) & 0b111)));
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MCAL_RCC_getPCLK1Freq+0x70>)
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	f003 0307 	and.w	r3, r3, #7
 8000654:	2b00      	cmp	r3, #0
 8000656:	d025      	beq.n	80006a4 <MCAL_RCC_getPCLK1Freq+0x64>
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MCAL_RCC_getPCLK1Freq+0x70>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	2b04      	cmp	r3, #4
 8000664:	d01c      	beq.n	80006a0 <MCAL_RCC_getPCLK1Freq+0x60>
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MCAL_RCC_getPCLK1Freq+0x70>)
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	0a1b      	lsrs	r3, r3, #8
 800066c:	f003 0307 	and.w	r3, r3, #7
 8000670:	2b05      	cmp	r3, #5
 8000672:	d013      	beq.n	800069c <MCAL_RCC_getPCLK1Freq+0x5c>
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MCAL_RCC_getPCLK1Freq+0x70>)
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	2b06      	cmp	r3, #6
 8000680:	d00a      	beq.n	8000698 <MCAL_RCC_getPCLK1Freq+0x58>
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MCAL_RCC_getPCLK1Freq+0x70>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	0a1b      	lsrs	r3, r3, #8
 8000688:	f003 0307 	and.w	r3, r3, #7
 800068c:	2b07      	cmp	r3, #7
 800068e:	d101      	bne.n	8000694 <MCAL_RCC_getPCLK1Freq+0x54>
 8000690:	2310      	movs	r3, #16
 8000692:	e008      	b.n	80006a6 <MCAL_RCC_getPCLK1Freq+0x66>
 8000694:	2300      	movs	r3, #0
 8000696:	e006      	b.n	80006a6 <MCAL_RCC_getPCLK1Freq+0x66>
 8000698:	2308      	movs	r3, #8
 800069a:	e004      	b.n	80006a6 <MCAL_RCC_getPCLK1Freq+0x66>
 800069c:	2304      	movs	r3, #4
 800069e:	e002      	b.n	80006a6 <MCAL_RCC_getPCLK1Freq+0x66>
 80006a0:	2302      	movs	r3, #2
 80006a2:	e000      	b.n	80006a6 <MCAL_RCC_getPCLK1Freq+0x66>
 80006a4:	2301      	movs	r3, #1
 80006a6:	fb02 f303 	mul.w	r3, r2, r3
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40021000 	.word	0x40021000

080006b4 <MCAL_RCC_getPCLK2Freq>:

// @brief Read the APB2 clock frequency.
// @return The APB2 clock frequency value.
uint32 MCAL_RCC_getPCLK2Freq(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	// Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_getHCLKFreq()
 80006b8:	f7ff ff6c 	bl	8000594 <MCAL_RCC_getHCLKFreq>
 80006bc:	4602      	mov	r2, r0
			* (RCC_APB_PRESCALER_MAPPING((RCC->CFGR>>11) & 0b111)));
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <MCAL_RCC_getPCLK2Freq+0x70>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	0adb      	lsrs	r3, r3, #11
 80006c4:	f003 0307 	and.w	r3, r3, #7
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d025      	beq.n	8000718 <MCAL_RCC_getPCLK2Freq+0x64>
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MCAL_RCC_getPCLK2Freq+0x70>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	0adb      	lsrs	r3, r3, #11
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	d01c      	beq.n	8000714 <MCAL_RCC_getPCLK2Freq+0x60>
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MCAL_RCC_getPCLK2Freq+0x70>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	0adb      	lsrs	r3, r3, #11
 80006e0:	f003 0307 	and.w	r3, r3, #7
 80006e4:	2b05      	cmp	r3, #5
 80006e6:	d013      	beq.n	8000710 <MCAL_RCC_getPCLK2Freq+0x5c>
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MCAL_RCC_getPCLK2Freq+0x70>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	0adb      	lsrs	r3, r3, #11
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	2b06      	cmp	r3, #6
 80006f4:	d00a      	beq.n	800070c <MCAL_RCC_getPCLK2Freq+0x58>
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MCAL_RCC_getPCLK2Freq+0x70>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	0adb      	lsrs	r3, r3, #11
 80006fc:	f003 0307 	and.w	r3, r3, #7
 8000700:	2b07      	cmp	r3, #7
 8000702:	d101      	bne.n	8000708 <MCAL_RCC_getPCLK2Freq+0x54>
 8000704:	2310      	movs	r3, #16
 8000706:	e008      	b.n	800071a <MCAL_RCC_getPCLK2Freq+0x66>
 8000708:	2300      	movs	r3, #0
 800070a:	e006      	b.n	800071a <MCAL_RCC_getPCLK2Freq+0x66>
 800070c:	2308      	movs	r3, #8
 800070e:	e004      	b.n	800071a <MCAL_RCC_getPCLK2Freq+0x66>
 8000710:	2304      	movs	r3, #4
 8000712:	e002      	b.n	800071a <MCAL_RCC_getPCLK2Freq+0x66>
 8000714:	2302      	movs	r3, #2
 8000716:	e000      	b.n	800071a <MCAL_RCC_getPCLK2Freq+0x66>
 8000718:	2301      	movs	r3, #1
 800071a:	fb02 f303 	mul.w	r3, r2, r3
}
 800071e:	4618      	mov	r0, r3
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000

08000728 <MCAL_UART_init>:
void (*UART_GP_IRQ_callBack[3])(void);

//*****************************************************************************
// Functions Definitions
//*****************************************************************************
void MCAL_UART_init(USART_TypeDef *USARTx, UART_Config *UART_config) {
 8000728:	b5b0      	push	{r4, r5, r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
	// Enable clock for the corresponding USART
	if (USARTx == USART1)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a70      	ldr	r2, [pc, #448]	; (80008f8 <MCAL_UART_init+0x1d0>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d106      	bne.n	8000748 <MCAL_UART_init+0x20>
		RCC_USART1_CLK_EN();
 800073a:	4b70      	ldr	r3, [pc, #448]	; (80008fc <MCAL_UART_init+0x1d4>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a6f      	ldr	r2, [pc, #444]	; (80008fc <MCAL_UART_init+0x1d4>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000744:	6193      	str	r3, [r2, #24]
 8000746:	e014      	b.n	8000772 <MCAL_UART_init+0x4a>

	else if (USARTx == USART2)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a6d      	ldr	r2, [pc, #436]	; (8000900 <MCAL_UART_init+0x1d8>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d106      	bne.n	800075e <MCAL_UART_init+0x36>
		RCC_USART2_CLK_EN();
 8000750:	4b6a      	ldr	r3, [pc, #424]	; (80008fc <MCAL_UART_init+0x1d4>)
 8000752:	69db      	ldr	r3, [r3, #28]
 8000754:	4a69      	ldr	r2, [pc, #420]	; (80008fc <MCAL_UART_init+0x1d4>)
 8000756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800075a:	61d3      	str	r3, [r2, #28]
 800075c:	e009      	b.n	8000772 <MCAL_UART_init+0x4a>

	else if (USARTx == USART3)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a68      	ldr	r2, [pc, #416]	; (8000904 <MCAL_UART_init+0x1dc>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d105      	bne.n	8000772 <MCAL_UART_init+0x4a>
		RCC_USART3_CLK_EN();
 8000766:	4b65      	ldr	r3, [pc, #404]	; (80008fc <MCAL_UART_init+0x1d4>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a64      	ldr	r2, [pc, #400]	; (80008fc <MCAL_UART_init+0x1d4>)
 800076c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000770:	61d3      	str	r3, [r2, #28]

	// Enable the USART by writing the UE bit in USART_CR1 register to 1.
	// Bit 13 UE: USART enable
	USARTx->CR1 |= (1 << 13);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	60da      	str	r2, [r3, #12]

	// Program the M bit in USART_CR1 to define the word length.
	// Bit 12 M: Word length
	USARTx->CR1 |= UART_config->payloadLength;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	683a      	ldr	r2, [r7, #0]
 8000784:	7a12      	ldrb	r2, [r2, #8]
 8000786:	431a      	orrs	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	60da      	str	r2, [r3, #12]

	// Bit 10 PCE: Parity control enable
	// Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_config->parity;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	7a52      	ldrb	r2, [r2, #9]
 8000794:	431a      	orrs	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	60da      	str	r2, [r3, #12]

	// Bit 8 PEIE: PE interrupt enable
	// Bit 7 TXEIE: TXE interrupt enable
	// Bit 6 TCIE: Transmission complete interrupt enable
	// Bit 5 RXNEIE: RXNE interrupt enable
	USARTx->CR1 |= UART_config->IRQ_enable;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	7b12      	ldrb	r2, [r2, #12]
 80007a2:	431a      	orrs	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	60da      	str	r2, [r3, #12]

	// Bit 3 TE: Transmitter enable
	// Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_config->mode;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	7812      	ldrb	r2, [r2, #0]
 80007b0:	431a      	orrs	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	60da      	str	r2, [r3, #12]

	// Program the number of stop bits in USART_CR2.
	// Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_config->stopBits;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	691b      	ldr	r3, [r3, #16]
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	7a92      	ldrb	r2, [r2, #10]
 80007be:	431a      	orrs	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	611a      	str	r2, [r3, #16]

	// Bit 9 CTSE: CTS enable
	// Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_config->hwFlowCtl;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	7ad2      	ldrb	r2, [r2, #11]
 80007cc:	431a      	orrs	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	615a      	str	r2, [r3, #20]

	// Select the desired baud rate using the USART_BRR register.
	if (USARTx == USART1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a48      	ldr	r2, [pc, #288]	; (80008f8 <MCAL_UART_init+0x1d0>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d12d      	bne.n	8000836 <MCAL_UART_init+0x10e>
		USARTx->BRR = UART_BRR_REG(MCAL_RCC_getPCLK1Freq(),
 80007da:	f7ff ff31 	bl	8000640 <MCAL_RCC_getPCLK1Freq>
 80007de:	4602      	mov	r2, r0
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	011b      	lsls	r3, r3, #4
 80007e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ea:	011c      	lsls	r4, r3, #4
 80007ec:	f7ff ff28 	bl	8000640 <MCAL_RCC_getPCLK1Freq>
 80007f0:	4602      	mov	r2, r0
 80007f2:	4613      	mov	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	009a      	lsls	r2, r3, #2
 80007fa:	441a      	add	r2, r3
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	fbb2 f5f3 	udiv	r5, r2, r3
 8000806:	f7ff ff1b 	bl	8000640 <MCAL_RCC_getPCLK1Freq>
 800080a:	4602      	mov	r2, r0
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	011b      	lsls	r3, r3, #4
 8000812:	fbb2 f3f3 	udiv	r3, r2, r3
 8000816:	2264      	movs	r2, #100	; 0x64
 8000818:	fb02 f303 	mul.w	r3, r2, r3
 800081c:	1aeb      	subs	r3, r5, r3
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	4a39      	ldr	r2, [pc, #228]	; (8000908 <MCAL_UART_init+0x1e0>)
 8000822:	fba2 2303 	umull	r2, r3, r2, r3
 8000826:	095b      	lsrs	r3, r3, #5
 8000828:	f003 030f 	and.w	r3, r3, #15
 800082c:	ea44 0203 	orr.w	r2, r4, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	e02c      	b.n	8000890 <MCAL_UART_init+0x168>
				UART_config->baudRate);
	else
		USARTx->BRR = UART_BRR_REG(MCAL_RCC_getPCLK2Freq(),
 8000836:	f7ff ff3d 	bl	80006b4 <MCAL_RCC_getPCLK2Freq>
 800083a:	4602      	mov	r2, r0
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	011b      	lsls	r3, r3, #4
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	011c      	lsls	r4, r3, #4
 8000848:	f7ff ff34 	bl	80006b4 <MCAL_RCC_getPCLK2Freq>
 800084c:	4602      	mov	r2, r0
 800084e:	4613      	mov	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	009a      	lsls	r2, r3, #2
 8000856:	441a      	add	r2, r3
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	fbb2 f5f3 	udiv	r5, r2, r3
 8000862:	f7ff ff27 	bl	80006b4 <MCAL_RCC_getPCLK2Freq>
 8000866:	4602      	mov	r2, r0
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	011b      	lsls	r3, r3, #4
 800086e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000872:	2264      	movs	r2, #100	; 0x64
 8000874:	fb02 f303 	mul.w	r3, r2, r3
 8000878:	1aeb      	subs	r3, r5, r3
 800087a:	011b      	lsls	r3, r3, #4
 800087c:	4a22      	ldr	r2, [pc, #136]	; (8000908 <MCAL_UART_init+0x1e0>)
 800087e:	fba2 2303 	umull	r2, r3, r2, r3
 8000882:	095b      	lsrs	r3, r3, #5
 8000884:	f003 030f 	and.w	r3, r3, #15
 8000888:	ea44 0203 	orr.w	r2, r4, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	609a      	str	r2, [r3, #8]
				UART_config->baudRate);

	if (UART_config->IRQ_enable) {
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	7b1b      	ldrb	r3, [r3, #12]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d02b      	beq.n	80008f0 <MCAL_UART_init+0x1c8>
		// Enable NVIC For USARTx IRQ
		if (USARTx == USART1){
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <MCAL_UART_init+0x1d0>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d10a      	bne.n	80008b6 <MCAL_UART_init+0x18e>
			NVIC_IRQ37_USART1_ENABLE;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MCAL_UART_init+0x1e4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a19      	ldr	r2, [pc, #100]	; (800090c <MCAL_UART_init+0x1e4>)
 80008a6:	f043 0320 	orr.w	r3, r3, #32
 80008aa:	6013      	str	r3, [r2, #0]
			// Set callback
			UART_GP_IRQ_callBack[0] = UART_config->P_IRQ_callBack;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	691b      	ldr	r3, [r3, #16]
 80008b0:	4a17      	ldr	r2, [pc, #92]	; (8000910 <MCAL_UART_init+0x1e8>)
 80008b2:	6013      	str	r3, [r2, #0]
			NVIC_IRQ39_USART3_ENABLE;
			// Set callback
			UART_GP_IRQ_callBack[2] = UART_config->P_IRQ_callBack;
		}
	}
}
 80008b4:	e01c      	b.n	80008f0 <MCAL_UART_init+0x1c8>
		else if (USARTx == USART2){
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a11      	ldr	r2, [pc, #68]	; (8000900 <MCAL_UART_init+0x1d8>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d10a      	bne.n	80008d4 <MCAL_UART_init+0x1ac>
			NVIC_IRQ38_USART2_ENABLE;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <MCAL_UART_init+0x1e4>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <MCAL_UART_init+0x1e4>)
 80008c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c8:	6013      	str	r3, [r2, #0]
			UART_GP_IRQ_callBack[1] = UART_config->P_IRQ_callBack;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	691b      	ldr	r3, [r3, #16]
 80008ce:	4a10      	ldr	r2, [pc, #64]	; (8000910 <MCAL_UART_init+0x1e8>)
 80008d0:	6053      	str	r3, [r2, #4]
}
 80008d2:	e00d      	b.n	80008f0 <MCAL_UART_init+0x1c8>
		else if (USARTx == USART3){
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <MCAL_UART_init+0x1dc>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d109      	bne.n	80008f0 <MCAL_UART_init+0x1c8>
			NVIC_IRQ39_USART3_ENABLE;
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MCAL_UART_init+0x1e4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0a      	ldr	r2, [pc, #40]	; (800090c <MCAL_UART_init+0x1e4>)
 80008e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e6:	6013      	str	r3, [r2, #0]
			UART_GP_IRQ_callBack[2] = UART_config->P_IRQ_callBack;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	691b      	ldr	r3, [r3, #16]
 80008ec:	4a08      	ldr	r2, [pc, #32]	; (8000910 <MCAL_UART_init+0x1e8>)
 80008ee:	6093      	str	r3, [r2, #8]
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bdb0      	pop	{r4, r5, r7, pc}
 80008f8:	40013800 	.word	0x40013800
 80008fc:	40021000 	.word	0x40021000
 8000900:	40004400 	.word	0x40004400
 8000904:	40004800 	.word	0x40004800
 8000908:	51eb851f 	.word	0x51eb851f
 800090c:	e000e104 	.word	0xe000e104
 8000910:	2000001c 	.word	0x2000001c

08000914 <MCAL_UART_GPIO_setPins>:
		RCC_USART3_RESET();
		NVIC_IRQ39_USART3_DISABLE;
	}
}

void MCAL_UART_GPIO_setPins(USART_TypeDef *USARTx, UART_Config *UART_config) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
	GPIO_PinConfig pinConfig;
	RCC_AFIO_CLK_EN();
 800091e:	4b38      	ldr	r3, [pc, #224]	; (8000a00 <MCAL_UART_GPIO_setPins+0xec>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	4a37      	ldr	r2, [pc, #220]	; (8000a00 <MCAL_UART_GPIO_setPins+0xec>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6193      	str	r3, [r2, #24]

	if (USARTx == USART1) {
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a35      	ldr	r2, [pc, #212]	; (8000a04 <MCAL_UART_GPIO_setPins+0xf0>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d11e      	bne.n	8000970 <MCAL_UART_GPIO_setPins+0x5c>
		//PA9 TX
		//PA10 RX
		//PA11 CTS
		//PA12 RTS
		RCC_GPIOA_CLK_EN();
 8000932:	4b33      	ldr	r3, [pc, #204]	; (8000a00 <MCAL_UART_GPIO_setPins+0xec>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	4a32      	ldr	r2, [pc, #200]	; (8000a00 <MCAL_UART_GPIO_setPins+0xec>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6193      	str	r3, [r2, #24]

		//PA9 TX
		pinConfig.GPIO_pinNumber = GPIO_PIN_9;
 800093e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000942:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_pinMode = GPIO_MODE_OUT_AF_PUSH_PULL;
 8000944:	2306      	movs	r3, #6
 8000946:	73bb      	strb	r3, [r7, #14]
		pinConfig.GPIO_pinOutputSpeed = GPIO_OUTPUT_SPEED_10MHZ;
 8000948:	2301      	movs	r3, #1
 800094a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOA, &pinConfig);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4619      	mov	r1, r3
 8000952:	482d      	ldr	r0, [pc, #180]	; (8000a08 <MCAL_UART_GPIO_setPins+0xf4>)
 8000954:	f7ff fc0c 	bl	8000170 <MCAL_GPIO_init>

		//PA10 RX
		pinConfig.GPIO_pinNumber = GPIO_PIN_10;
 8000958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095c:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_pinMode = GPIO_MODE_IN_FLOATING;
 800095e:	2301      	movs	r3, #1
 8000960:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_init(GPIOA, &pinConfig);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4619      	mov	r1, r3
 8000968:	4827      	ldr	r0, [pc, #156]	; (8000a08 <MCAL_UART_GPIO_setPins+0xf4>)
 800096a:	f7ff fc01 	bl	8000170 <MCAL_GPIO_init>
			pinConfig.GPIO_pinMode = GPIO_MODE_OUT_AF_PUSH_PULL;
			pinConfig.GPIO_pinOutputSpeed = GPIO_OUTPUT_SPEED_10MHZ;
			MCAL_GPIO_init(GPIOB, &pinConfig);
		}
	}
}
 800096e:	e042      	b.n	80009f6 <MCAL_UART_GPIO_setPins+0xe2>
	} else if (USARTx == USART2) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a26      	ldr	r2, [pc, #152]	; (8000a0c <MCAL_UART_GPIO_setPins+0xf8>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d11c      	bne.n	80009b2 <MCAL_UART_GPIO_setPins+0x9e>
		RCC_GPIOA_CLK_EN();
 8000978:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <MCAL_UART_GPIO_setPins+0xec>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a20      	ldr	r2, [pc, #128]	; (8000a00 <MCAL_UART_GPIO_setPins+0xec>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	6193      	str	r3, [r2, #24]
		pinConfig.GPIO_pinNumber = GPIO_PIN_2;
 8000984:	2304      	movs	r3, #4
 8000986:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_pinMode = GPIO_MODE_OUT_AF_PUSH_PULL;
 8000988:	2306      	movs	r3, #6
 800098a:	73bb      	strb	r3, [r7, #14]
		pinConfig.GPIO_pinOutputSpeed = GPIO_OUTPUT_SPEED_10MHZ;
 800098c:	2301      	movs	r3, #1
 800098e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOA, &pinConfig);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4619      	mov	r1, r3
 8000996:	481c      	ldr	r0, [pc, #112]	; (8000a08 <MCAL_UART_GPIO_setPins+0xf4>)
 8000998:	f7ff fbea 	bl	8000170 <MCAL_GPIO_init>
		pinConfig.GPIO_pinNumber = GPIO_PIN_3;
 800099c:	2308      	movs	r3, #8
 800099e:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_pinMode = GPIO_MODE_IN_FLOATING;
 80009a0:	2301      	movs	r3, #1
 80009a2:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_init(GPIOA, &pinConfig);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	4817      	ldr	r0, [pc, #92]	; (8000a08 <MCAL_UART_GPIO_setPins+0xf4>)
 80009ac:	f7ff fbe0 	bl	8000170 <MCAL_GPIO_init>
}
 80009b0:	e021      	b.n	80009f6 <MCAL_UART_GPIO_setPins+0xe2>
	} else if (USARTx == USART3) {
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <MCAL_UART_GPIO_setPins+0xfc>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d11d      	bne.n	80009f6 <MCAL_UART_GPIO_setPins+0xe2>
		RCC_GPIOB_CLK_EN();
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MCAL_UART_GPIO_setPins+0xec>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <MCAL_UART_GPIO_setPins+0xec>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6193      	str	r3, [r2, #24]
		pinConfig.GPIO_pinNumber = GPIO_PIN_10;
 80009c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ca:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_pinMode = GPIO_MODE_OUT_AF_PUSH_PULL;
 80009cc:	2306      	movs	r3, #6
 80009ce:	73bb      	strb	r3, [r7, #14]
		pinConfig.GPIO_pinOutputSpeed = GPIO_OUTPUT_SPEED_10MHZ;
 80009d0:	2301      	movs	r3, #1
 80009d2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOB, &pinConfig);
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	4619      	mov	r1, r3
 80009da:	480e      	ldr	r0, [pc, #56]	; (8000a14 <MCAL_UART_GPIO_setPins+0x100>)
 80009dc:	f7ff fbc8 	bl	8000170 <MCAL_GPIO_init>
		pinConfig.GPIO_pinNumber = GPIO_PIN_11;
 80009e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009e4:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_pinMode = GPIO_MODE_IN_FLOATING;
 80009e6:	2301      	movs	r3, #1
 80009e8:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_init(GPIOB, &pinConfig);
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	4619      	mov	r1, r3
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <MCAL_UART_GPIO_setPins+0x100>)
 80009f2:	f7ff fbbd 	bl	8000170 <MCAL_GPIO_init>
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40013800 	.word	0x40013800
 8000a08:	40010800 	.word	0x40010800
 8000a0c:	40004400 	.word	0x40004400
 8000a10:	40004800 	.word	0x40004800
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <MCAL_UART_sendData>:

void MCAL_UART_sendData(USART_TypeDef *USARTx, UART_Config *UART_config,
		uint16 *pTxBuffer, uint8 pollingEn) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	70fb      	strb	r3, [r7, #3]

	// Wait until TXE flag is set in the SR
	if (pollingEn)
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d006      	beq.n	8000a3a <MCAL_UART_sendData+0x22>
		while (!(USARTx->SR & 1 << 7))
 8000a2c:	bf00      	nop
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d0f9      	beq.n	8000a2e <MCAL_UART_sendData+0x16>
	if (UART_config->payloadLength == UART_PAYLOAD_LENGTH_9BITS) {
		//if 9 bits, load the DR with 2 bytes masking the bits other than first 9 bits
		USARTx->DR = (*pTxBuffer & (uint16) 0x01FF);
	} else {
		//This is 8bit data transfer
		USARTx->DR = (*pTxBuffer & (uint8) 0xFF);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	605a      	str	r2, [r3, #4]
	}
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <MCAL_UART_receiveData>:

void MCAL_UART_receiveData(USART_TypeDef *USARTx, UART_Config *UART_config,
		uint16 *pRxBuffer, uint8 pollingEn) {
 8000a4e:	b480      	push	{r7}
 8000a50:	b085      	sub	sp, #20
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	70fb      	strb	r3, [r7, #3]
	// Wait until RXNE flag is set in the SR
	if (pollingEn) {
 8000a5c:	78fb      	ldrb	r3, [r7, #3]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d006      	beq.n	8000a70 <MCAL_UART_receiveData+0x22>
		while (!(USARTx->SR & 1 << 5))
 8000a62:	bf00      	nop
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f003 0320 	and.w	r3, r3, #32
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0f9      	beq.n	8000a64 <MCAL_UART_receiveData+0x16>
			*((uint16*) pRxBuffer) = (USARTx->DR & (uint8) 0xFF);
		}

	} else {
		//This is 8bit data
		if (UART_config->parity == UART_PARITY_NONE) {
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	7a5b      	ldrb	r3, [r3, #9]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d107      	bne.n	8000a88 <MCAL_UART_receiveData+0x3a>
			// No parity, so all 8 bits are considered data
			*((uint16*) pRxBuffer) = (USARTx->DR & (uint8) 0xFF);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	801a      	strh	r2, [r3, #0]
		} else {
			// Parity is used, so 7 bits will be of user data and 1 bit is parity
			*((uint16*) pRxBuffer) = (USARTx->DR & (uint8) 0X7F);
		}
	}
}
 8000a86:	e007      	b.n	8000a98 <MCAL_UART_receiveData+0x4a>
			*((uint16*) pRxBuffer) = (USARTx->DR & (uint8) 0X7F);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	801a      	strh	r2, [r3, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
	...

08000aa4 <USART1_IRQHandler>:

//*****************************************************************************
// IRQHandler Definitions
//*****************************************************************************
void USART1_IRQHandler(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	UART_GP_IRQ_callBack[0]();
 8000aa8:	4b02      	ldr	r3, [pc, #8]	; (8000ab4 <USART1_IRQHandler+0x10>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4798      	blx	r3
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000001c 	.word	0x2000001c

08000ab8 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	UART_GP_IRQ_callBack[1]();
 8000abc:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <USART2_IRQHandler+0x10>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	4798      	blx	r3

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000001c 	.word	0x2000001c

08000acc <USART3_IRQHandler>:
void USART3_IRQHandler(void) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	UART_GP_IRQ_callBack[2]();
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <USART3_IRQHandler+0x10>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	4798      	blx	r3
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000001c 	.word	0x2000001c

08000ae0 <main>:
#include "stm32f103c6_usart.h"

int main(void) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
	uint16 buff = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	82fb      	strh	r3, [r7, #22]
	UART_Config uart1;

	uart1.baudRate = UART_BAUDRATE_115200;
 8000aea:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000aee:	607b      	str	r3, [r7, #4]
	uart1.hwFlowCtl = UART_HWFLOWCTL_NONE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	72fb      	strb	r3, [r7, #11]
	uart1.IRQ_enable = UART_IRQ_ENABLE_NONE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	733b      	strb	r3, [r7, #12]
	uart1.parity = UART_PARITY_NONE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	727b      	strb	r3, [r7, #9]
	uart1.payloadLength = UART_PAYLOAD_LENGTH_8BITS;
 8000afc:	2300      	movs	r3, #0
 8000afe:	723b      	strb	r3, [r7, #8]
	uart1.stopBits = UART_STOPBITS_1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	72bb      	strb	r3, [r7, #10]
	uart1.mode = UART_MODE_TX_RX;
 8000b04:	230c      	movs	r3, #12
 8000b06:	703b      	strb	r3, [r7, #0]

	MCAL_UART_init(USART1, &uart1);
 8000b08:	463b      	mov	r3, r7
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480b      	ldr	r0, [pc, #44]	; (8000b3c <main+0x5c>)
 8000b0e:	f7ff fe0b 	bl	8000728 <MCAL_UART_init>
	MCAL_UART_GPIO_setPins(USART1, &uart1);
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	4809      	ldr	r0, [pc, #36]	; (8000b3c <main+0x5c>)
 8000b18:	f7ff fefc 	bl	8000914 <MCAL_UART_GPIO_setPins>

	for (;;) {
		// Loop-back
		MCAL_UART_receiveData(USART1, &uart1, &buff, TRUE);
 8000b1c:	f107 0216 	add.w	r2, r7, #22
 8000b20:	4639      	mov	r1, r7
 8000b22:	2301      	movs	r3, #1
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <main+0x5c>)
 8000b26:	f7ff ff92 	bl	8000a4e <MCAL_UART_receiveData>
		MCAL_UART_sendData(USART1, &uart1, &buff, TRUE);
 8000b2a:	f107 0216 	add.w	r2, r7, #22
 8000b2e:	4639      	mov	r1, r7
 8000b30:	2301      	movs	r3, #1
 8000b32:	4802      	ldr	r0, [pc, #8]	; (8000b3c <main+0x5c>)
 8000b34:	f7ff ff70 	bl	8000a18 <MCAL_UART_sendData>
		MCAL_UART_receiveData(USART1, &uart1, &buff, TRUE);
 8000b38:	e7f0      	b.n	8000b1c <main+0x3c>
 8000b3a:	bf00      	nop
 8000b3c:	40013800 	.word	0x40013800

08000b40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b42:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b44:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4a:	490d      	ldr	r1, [pc, #52]	; (8000b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <LoopForever+0xe>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b60:	4c0a      	ldr	r4, [pc, #40]	; (8000b8c <LoopForever+0x16>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b6e:	f000 f811 	bl	8000b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b72:	f7ff ffb5 	bl	8000ae0 <main>

08000b76 <LoopForever>:

LoopForever:
  b LoopForever
 8000b76:	e7fe      	b.n	8000b76 <LoopForever>
  ldr   r0, =_estack
 8000b78:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b84:	08000bfc 	.word	0x08000bfc
  ldr r2, =_sbss
 8000b88:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b8c:	20000028 	.word	0x20000028

08000b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_2_IRQHandler>
	...

08000b94 <__libc_init_array>:
 8000b94:	b570      	push	{r4, r5, r6, lr}
 8000b96:	2600      	movs	r6, #0
 8000b98:	4d0c      	ldr	r5, [pc, #48]	; (8000bcc <__libc_init_array+0x38>)
 8000b9a:	4c0d      	ldr	r4, [pc, #52]	; (8000bd0 <__libc_init_array+0x3c>)
 8000b9c:	1b64      	subs	r4, r4, r5
 8000b9e:	10a4      	asrs	r4, r4, #2
 8000ba0:	42a6      	cmp	r6, r4
 8000ba2:	d109      	bne.n	8000bb8 <__libc_init_array+0x24>
 8000ba4:	f000 f81a 	bl	8000bdc <_init>
 8000ba8:	2600      	movs	r6, #0
 8000baa:	4d0a      	ldr	r5, [pc, #40]	; (8000bd4 <__libc_init_array+0x40>)
 8000bac:	4c0a      	ldr	r4, [pc, #40]	; (8000bd8 <__libc_init_array+0x44>)
 8000bae:	1b64      	subs	r4, r4, r5
 8000bb0:	10a4      	asrs	r4, r4, #2
 8000bb2:	42a6      	cmp	r6, r4
 8000bb4:	d105      	bne.n	8000bc2 <__libc_init_array+0x2e>
 8000bb6:	bd70      	pop	{r4, r5, r6, pc}
 8000bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bbc:	4798      	blx	r3
 8000bbe:	3601      	adds	r6, #1
 8000bc0:	e7ee      	b.n	8000ba0 <__libc_init_array+0xc>
 8000bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bc6:	4798      	blx	r3
 8000bc8:	3601      	adds	r6, #1
 8000bca:	e7f2      	b.n	8000bb2 <__libc_init_array+0x1e>
 8000bcc:	08000bf4 	.word	0x08000bf4
 8000bd0:	08000bf4 	.word	0x08000bf4
 8000bd4:	08000bf4 	.word	0x08000bf4
 8000bd8:	08000bf8 	.word	0x08000bf8

08000bdc <_init>:
 8000bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bde:	bf00      	nop
 8000be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000be2:	bc08      	pop	{r3}
 8000be4:	469e      	mov	lr, r3
 8000be6:	4770      	bx	lr

08000be8 <_fini>:
 8000be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bea:	bf00      	nop
 8000bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bee:	bc08      	pop	{r3}
 8000bf0:	469e      	mov	lr, r3
 8000bf2:	4770      	bx	lr
