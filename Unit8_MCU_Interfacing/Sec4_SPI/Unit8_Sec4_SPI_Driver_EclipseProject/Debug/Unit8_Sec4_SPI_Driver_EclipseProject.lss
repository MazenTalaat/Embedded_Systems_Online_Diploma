
Unit8_Sec4_SPI_Driver_EclipseProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002986  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00002986  00002a1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800170  00800170  00002b2a  2**0
                  ALLOC
  3 .debug_aranges 000002b0  00000000  00000000  00002b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000464  00000000  00000000  00002dda  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e77  00000000  00000000  0000323e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001511  00000000  00000000  000060b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000229d  00000000  00000000  000075c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000380  00000000  00000000  00009864  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006f9  00000000  00000000  00009be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000090e  00000000  00000000  0000a2dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  0000abeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 07 14 	call	0x280e	; 0x280e <main>
      8a:	0c 94 c1 14 	jmp	0x2982	; 0x2982 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 45 14 	jmp	0x288a	; 0x288a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 45 14 	jmp	0x288a	; 0x288a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 71 14 	jmp	0x28e2	; 0x28e2 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e0 59       	subi	r30, 0x90	; 144
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <MCAL_GPIO_init>:
// Functions Definitions
//*****************************************************************************
// @brief Setup the mode of the required pin/port.
// @param[in]  GPIOx  The port to be configured.
// @param[in]  pinConfig  The pin/port configuration.
void MCAL_GPIO_init(GPIO_TypeDef *GPIOx, GPIO_PinConfig *pinConfig) {
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	28 97       	sbiw	r28, 0x08	; 8
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	9a 83       	std	Y+2, r25	; 0x02
     cb6:	89 83       	std	Y+1, r24	; 0x01
     cb8:	7c 83       	std	Y+4, r23	; 0x04
     cba:	6b 83       	std	Y+3, r22	; 0x03
	if (pinConfig->GPIO_pinNumber == GPIO_PIN_All) {
     cbc:	eb 81       	ldd	r30, Y+3	; 0x03
     cbe:	fc 81       	ldd	r31, Y+4	; 0x04
     cc0:	80 81       	ld	r24, Z
     cc2:	8f 3f       	cpi	r24, 0xFF	; 255
     cc4:	59 f5       	brne	.+86     	; 0xd1c <MCAL_GPIO_init+0x7c>
		switch (pinConfig->GPIO_pinMode) {
     cc6:	eb 81       	ldd	r30, Y+3	; 0x03
     cc8:	fc 81       	ldd	r31, Y+4	; 0x04
     cca:	81 81       	ldd	r24, Z+1	; 0x01
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	38 87       	std	Y+8, r19	; 0x08
     cd2:	2f 83       	std	Y+7, r18	; 0x07
     cd4:	8f 81       	ldd	r24, Y+7	; 0x07
     cd6:	98 85       	ldd	r25, Y+8	; 0x08
     cd8:	82 30       	cpi	r24, 0x02	; 2
     cda:	91 05       	cpc	r25, r1
     cdc:	99 f0       	breq	.+38     	; 0xd04 <MCAL_GPIO_init+0x64>
     cde:	2f 81       	ldd	r18, Y+7	; 0x07
     ce0:	38 85       	ldd	r19, Y+8	; 0x08
     ce2:	23 30       	cpi	r18, 0x03	; 3
     ce4:	31 05       	cpc	r19, r1
     ce6:	a9 f0       	breq	.+42     	; 0xd12 <MCAL_GPIO_init+0x72>
     ce8:	8f 81       	ldd	r24, Y+7	; 0x07
     cea:	98 85       	ldd	r25, Y+8	; 0x08
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	91 05       	cpc	r25, r1
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <MCAL_GPIO_init+0x54>
     cf2:	64 c0       	rjmp	.+200    	; 0xdbc <MCAL_GPIO_init+0x11c>
		case GPIO_MODE_IN_PULL_UP:
			// DDR -> 0 Input
			// PORT -> 1 Pull-up
			GPIOx->DDR = (uint8) 0x00;
     cf4:	e9 81       	ldd	r30, Y+1	; 0x01
     cf6:	fa 81       	ldd	r31, Y+2	; 0x02
     cf8:	11 82       	std	Z+1, r1	; 0x01
			GPIOx->PORT = (uint8) 0xFF;
     cfa:	e9 81       	ldd	r30, Y+1	; 0x01
     cfc:	fa 81       	ldd	r31, Y+2	; 0x02
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	82 83       	std	Z+2, r24	; 0x02
     d02:	5c c0       	rjmp	.+184    	; 0xdbc <MCAL_GPIO_init+0x11c>
			break;
		case GPIO_MODE_IN_FLOATING:
			// DDR -> 0 Input
			// PORT -> 0 Pull-down
			GPIOx->DDR = (uint8) 0x00;
     d04:	e9 81       	ldd	r30, Y+1	; 0x01
     d06:	fa 81       	ldd	r31, Y+2	; 0x02
     d08:	11 82       	std	Z+1, r1	; 0x01
			GPIOx->PORT = (uint8) 0x00;
     d0a:	e9 81       	ldd	r30, Y+1	; 0x01
     d0c:	fa 81       	ldd	r31, Y+2	; 0x02
     d0e:	12 82       	std	Z+2, r1	; 0x02
     d10:	55 c0       	rjmp	.+170    	; 0xdbc <MCAL_GPIO_init+0x11c>
			break;
		case GPIO_MODE_OUT:
			// DDR -> 1 Output
			GPIOx->DDR = (uint8) 0xFF;
     d12:	e9 81       	ldd	r30, Y+1	; 0x01
     d14:	fa 81       	ldd	r31, Y+2	; 0x02
     d16:	8f ef       	ldi	r24, 0xFF	; 255
     d18:	81 83       	std	Z+1, r24	; 0x01
     d1a:	50 c0       	rjmp	.+160    	; 0xdbc <MCAL_GPIO_init+0x11c>
			break;
		default:
			break;
		}
	} else {
		switch (pinConfig->GPIO_pinMode) {
     d1c:	eb 81       	ldd	r30, Y+3	; 0x03
     d1e:	fc 81       	ldd	r31, Y+4	; 0x04
     d20:	81 81       	ldd	r24, Z+1	; 0x01
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	3e 83       	std	Y+6, r19	; 0x06
     d28:	2d 83       	std	Y+5, r18	; 0x05
     d2a:	8d 81       	ldd	r24, Y+5	; 0x05
     d2c:	9e 81       	ldd	r25, Y+6	; 0x06
     d2e:	82 30       	cpi	r24, 0x02	; 2
     d30:	91 05       	cpc	r25, r1
     d32:	09 f1       	breq	.+66     	; 0xd76 <MCAL_GPIO_init+0xd6>
     d34:	2d 81       	ldd	r18, Y+5	; 0x05
     d36:	3e 81       	ldd	r19, Y+6	; 0x06
     d38:	23 30       	cpi	r18, 0x03	; 3
     d3a:	31 05       	cpc	r19, r1
     d3c:	a9 f1       	breq	.+106    	; 0xda8 <MCAL_GPIO_init+0x108>
     d3e:	8d 81       	ldd	r24, Y+5	; 0x05
     d40:	9e 81       	ldd	r25, Y+6	; 0x06
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	91 05       	cpc	r25, r1
     d46:	d1 f5       	brne	.+116    	; 0xdbc <MCAL_GPIO_init+0x11c>
		case GPIO_MODE_IN_PULL_UP:
			// DDR -> 0 Input
			// PORT -> 1 Pull-up
			GPIOx->DDR &= ~pinConfig->GPIO_pinNumber;
     d48:	e9 81       	ldd	r30, Y+1	; 0x01
     d4a:	fa 81       	ldd	r31, Y+2	; 0x02
     d4c:	81 81       	ldd	r24, Z+1	; 0x01
     d4e:	98 2f       	mov	r25, r24
     d50:	eb 81       	ldd	r30, Y+3	; 0x03
     d52:	fc 81       	ldd	r31, Y+4	; 0x04
     d54:	80 81       	ld	r24, Z
     d56:	80 95       	com	r24
     d58:	89 23       	and	r24, r25
     d5a:	e9 81       	ldd	r30, Y+1	; 0x01
     d5c:	fa 81       	ldd	r31, Y+2	; 0x02
     d5e:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT |= pinConfig->GPIO_pinNumber;
     d60:	e9 81       	ldd	r30, Y+1	; 0x01
     d62:	fa 81       	ldd	r31, Y+2	; 0x02
     d64:	92 81       	ldd	r25, Z+2	; 0x02
     d66:	eb 81       	ldd	r30, Y+3	; 0x03
     d68:	fc 81       	ldd	r31, Y+4	; 0x04
     d6a:	80 81       	ld	r24, Z
     d6c:	89 2b       	or	r24, r25
     d6e:	e9 81       	ldd	r30, Y+1	; 0x01
     d70:	fa 81       	ldd	r31, Y+2	; 0x02
     d72:	82 83       	std	Z+2, r24	; 0x02
     d74:	23 c0       	rjmp	.+70     	; 0xdbc <MCAL_GPIO_init+0x11c>
			break;
		case GPIO_MODE_IN_FLOATING:
			// DDR -> 0 Input
			// PORT -> 0 Pull-down
			GPIOx->DDR &= ~pinConfig->GPIO_pinNumber;
     d76:	e9 81       	ldd	r30, Y+1	; 0x01
     d78:	fa 81       	ldd	r31, Y+2	; 0x02
     d7a:	81 81       	ldd	r24, Z+1	; 0x01
     d7c:	98 2f       	mov	r25, r24
     d7e:	eb 81       	ldd	r30, Y+3	; 0x03
     d80:	fc 81       	ldd	r31, Y+4	; 0x04
     d82:	80 81       	ld	r24, Z
     d84:	80 95       	com	r24
     d86:	89 23       	and	r24, r25
     d88:	e9 81       	ldd	r30, Y+1	; 0x01
     d8a:	fa 81       	ldd	r31, Y+2	; 0x02
     d8c:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT &= ~pinConfig->GPIO_pinNumber;
     d8e:	e9 81       	ldd	r30, Y+1	; 0x01
     d90:	fa 81       	ldd	r31, Y+2	; 0x02
     d92:	82 81       	ldd	r24, Z+2	; 0x02
     d94:	98 2f       	mov	r25, r24
     d96:	eb 81       	ldd	r30, Y+3	; 0x03
     d98:	fc 81       	ldd	r31, Y+4	; 0x04
     d9a:	80 81       	ld	r24, Z
     d9c:	80 95       	com	r24
     d9e:	89 23       	and	r24, r25
     da0:	e9 81       	ldd	r30, Y+1	; 0x01
     da2:	fa 81       	ldd	r31, Y+2	; 0x02
     da4:	82 83       	std	Z+2, r24	; 0x02
     da6:	0a c0       	rjmp	.+20     	; 0xdbc <MCAL_GPIO_init+0x11c>
			break;
		case GPIO_MODE_OUT:
			// DDR -> 1 Output
			GPIOx->DDR |= pinConfig->GPIO_pinNumber;
     da8:	e9 81       	ldd	r30, Y+1	; 0x01
     daa:	fa 81       	ldd	r31, Y+2	; 0x02
     dac:	91 81       	ldd	r25, Z+1	; 0x01
     dae:	eb 81       	ldd	r30, Y+3	; 0x03
     db0:	fc 81       	ldd	r31, Y+4	; 0x04
     db2:	80 81       	ld	r24, Z
     db4:	89 2b       	or	r24, r25
     db6:	e9 81       	ldd	r30, Y+1	; 0x01
     db8:	fa 81       	ldd	r31, Y+2	; 0x02
     dba:	81 83       	std	Z+1, r24	; 0x01
			break;
		default:
			break;
		}
	}
}
     dbc:	28 96       	adiw	r28, 0x08	; 8
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <MCAL_GPIO_deInit>:

// @brief Reset the port configuration.
// @param[in]  GPIOx  The port to be reset.
void MCAL_GPIO_deInit(GPIO_TypeDef *GPIOx) {
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <MCAL_GPIO_deInit+0x6>
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	9a 83       	std	Y+2, r25	; 0x02
     dda:	89 83       	std	Y+1, r24	; 0x01
	// Reset values
	GPIOx->DDR = (uint8) 0xFF;
     ddc:	e9 81       	ldd	r30, Y+1	; 0x01
     dde:	fa 81       	ldd	r31, Y+2	; 0x02
     de0:	8f ef       	ldi	r24, 0xFF	; 255
     de2:	81 83       	std	Z+1, r24	; 0x01
	GPIOx->PORT = (uint8) 0xFF;
     de4:	e9 81       	ldd	r30, Y+1	; 0x01
     de6:	fa 81       	ldd	r31, Y+2	; 0x02
     de8:	8f ef       	ldi	r24, 0xFF	; 255
     dea:	82 83       	std	Z+2, r24	; 0x02
}
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <MCAL_GPIO_readPin>:

// @brief Read the pin value.
// @param[in]  GPIOx  The port to be used.
// @param[in]  pinNumber  The pin number.
// @return The pin value.
uint8 MCAL_GPIO_readPin(GPIO_TypeDef *GPIOx, uint8 pinNumber) {
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <MCAL_GPIO_readPin+0x6>
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <MCAL_GPIO_readPin+0x8>
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	9a 83       	std	Y+2, r25	; 0x02
     e04:	89 83       	std	Y+1, r24	; 0x01
     e06:	6b 83       	std	Y+3, r22	; 0x03
	if ((GPIOx->PIN & pinNumber) == LOGIC_LOW) {
     e08:	e9 81       	ldd	r30, Y+1	; 0x01
     e0a:	fa 81       	ldd	r31, Y+2	; 0x02
     e0c:	90 81       	ld	r25, Z
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	89 23       	and	r24, r25
     e12:	88 23       	and	r24, r24
     e14:	11 f4       	brne	.+4      	; 0xe1a <MCAL_GPIO_readPin+0x24>
		return LOGIC_LOW;
     e16:	1c 82       	std	Y+4, r1	; 0x04
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <MCAL_GPIO_readPin+0x28>
	} else {
		return LOGIC_HIGH;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	8c 83       	std	Y+4, r24	; 0x04
     e1e:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return LOGIC_LOW;
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <MCAL_GPIO_readPort>:

// @brief Read the port value.
// @param[in]  GPIOx  The port to be read.
// @return The port value.
uint8 MCAL_GPIO_readPort(GPIO_TypeDef *GPIOx) {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <MCAL_GPIO_readPort+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	return (uint8) (GPIOx->PIN & 0xFF);
     e3c:	e9 81       	ldd	r30, Y+1	; 0x01
     e3e:	fa 81       	ldd	r31, Y+2	; 0x02
     e40:	80 81       	ld	r24, Z
}
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <MCAL_GPIO_writePin>:

// @brief Set a pin to a value.
// @param[in]  GPIOx  The port to be used.
// @param[in]  pinNumber  The pin number.
// @param[in]  value  The value to be set.
void MCAL_GPIO_writePin(GPIO_TypeDef *GPIOx, uint8 pinNumber, uint8 value) {
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	00 d0       	rcall	.+0      	; 0xe52 <MCAL_GPIO_writePin+0x6>
     e52:	00 d0       	rcall	.+0      	; 0xe54 <MCAL_GPIO_writePin+0x8>
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	89 83       	std	Y+1, r24	; 0x01
     e5c:	6b 83       	std	Y+3, r22	; 0x03
     e5e:	4c 83       	std	Y+4, r20	; 0x04
	if (value == LOGIC_LOW) {
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	88 23       	and	r24, r24
     e64:	59 f4       	brne	.+22     	; 0xe7c <MCAL_GPIO_writePin+0x30>
		GPIOx->PORT &= ~pinNumber;
     e66:	e9 81       	ldd	r30, Y+1	; 0x01
     e68:	fa 81       	ldd	r31, Y+2	; 0x02
     e6a:	82 81       	ldd	r24, Z+2	; 0x02
     e6c:	98 2f       	mov	r25, r24
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	80 95       	com	r24
     e72:	89 23       	and	r24, r25
     e74:	e9 81       	ldd	r30, Y+1	; 0x01
     e76:	fa 81       	ldd	r31, Y+2	; 0x02
     e78:	82 83       	std	Z+2, r24	; 0x02
     e7a:	08 c0       	rjmp	.+16     	; 0xe8c <MCAL_GPIO_writePin+0x40>
	} else {
		GPIOx->PORT |= pinNumber;
     e7c:	e9 81       	ldd	r30, Y+1	; 0x01
     e7e:	fa 81       	ldd	r31, Y+2	; 0x02
     e80:	92 81       	ldd	r25, Z+2	; 0x02
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	89 2b       	or	r24, r25
     e86:	e9 81       	ldd	r30, Y+1	; 0x01
     e88:	fa 81       	ldd	r31, Y+2	; 0x02
     e8a:	82 83       	std	Z+2, r24	; 0x02
	}
}
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <MCAL_GPIO_writePort>:

// @brief Set a port to a value.
// @param[in]  GPIOx  The port to be set.
// @param[in]  value  The value to be set.
void MCAL_GPIO_writePort(GPIO_TypeDef *GPIOx, uint8 value) {
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <MCAL_GPIO_writePort+0x6>
     ea0:	0f 92       	push	r0
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	6b 83       	std	Y+3, r22	; 0x03
	GPIOx->PORT = (uint8) value;
     eac:	e9 81       	ldd	r30, Y+1	; 0x01
     eae:	fa 81       	ldd	r31, Y+2	; 0x02
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	82 83       	std	Z+2, r24	; 0x02
}
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <MCAL_GPIO_togglePin>:

// @brief Toggle a pin.
// @param[in]  GPIOx  The port to be used.
// @param[in]  pinNumber  The pin number.
void MCAL_GPIO_togglePin(GPIO_TypeDef *GPIOx, uint8 pinNumber) {
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <MCAL_GPIO_togglePin+0x6>
     ec6:	0f 92       	push	r0
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	9a 83       	std	Y+2, r25	; 0x02
     ece:	89 83       	std	Y+1, r24	; 0x01
     ed0:	6b 83       	std	Y+3, r22	; 0x03
	GPIOx->PORT ^= pinNumber;
     ed2:	e9 81       	ldd	r30, Y+1	; 0x01
     ed4:	fa 81       	ldd	r31, Y+2	; 0x02
     ed6:	92 81       	ldd	r25, Z+2	; 0x02
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	89 27       	eor	r24, r25
     edc:	e9 81       	ldd	r30, Y+1	; 0x01
     ede:	fa 81       	ldd	r31, Y+2	; 0x02
     ee0:	82 83       	std	Z+2, r24	; 0x02
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <MCAL_SPI_init>:
//*****************************************************************************
// Functions Definitions
//*****************************************************************************
// @brief Initialize the SPI device
// @param[in]  SPI_config  The needed configuration.
void MCAL_SPI_init(SPI_Config *SPI_config) {
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <MCAL_SPI_init+0x6>
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <MCAL_SPI_init+0x8>
     ef6:	0f 92       	push	r0
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	9b 83       	std	Y+3, r25	; 0x03
     efe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 SPCR_temp = (uint8) 0;
     f00:	19 82       	std	Y+1, r1	; 0x01

	MCAL_SPI_GPIO_setPins(SPI_config);
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	9b 81       	ldd	r25, Y+3	; 0x03
     f06:	0e 94 0b 08 	call	0x1016	; 0x1016 <MCAL_SPI_GPIO_setPins>

	if (SPI_config->deviceMode == SPI_DEVICE_MODE_MASTER) {
     f0a:	ea 81       	ldd	r30, Y+2	; 0x02
     f0c:	fb 81       	ldd	r31, Y+3	; 0x03
     f0e:	80 81       	ld	r24, Z
     f10:	80 31       	cpi	r24, 0x10	; 16
     f12:	d1 f5       	brne	.+116    	; 0xf88 <MCAL_SPI_init+0x9a>
		switch (SPI_config->baudRatePrescaler) {
     f14:	ea 81       	ldd	r30, Y+2	; 0x02
     f16:	fb 81       	ldd	r31, Y+3	; 0x03
     f18:	84 81       	ldd	r24, Z+4	; 0x04
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	3d 83       	std	Y+5, r19	; 0x05
     f20:	2c 83       	std	Y+4, r18	; 0x04
     f22:	8c 81       	ldd	r24, Y+4	; 0x04
     f24:	9d 81       	ldd	r25, Y+5	; 0x05
     f26:	85 30       	cpi	r24, 0x05	; 5
     f28:	91 05       	cpc	r25, r1
     f2a:	91 f0       	breq	.+36     	; 0xf50 <MCAL_SPI_init+0x62>
     f2c:	2c 81       	ldd	r18, Y+4	; 0x04
     f2e:	3d 81       	ldd	r19, Y+5	; 0x05
     f30:	26 30       	cpi	r18, 0x06	; 6
     f32:	31 05       	cpc	r19, r1
     f34:	c1 f0       	breq	.+48     	; 0xf66 <MCAL_SPI_init+0x78>
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	9d 81       	ldd	r25, Y+5	; 0x05
     f3a:	84 30       	cpi	r24, 0x04	; 4
     f3c:	91 05       	cpc	r25, r1
     f3e:	f1 f4       	brne	.+60     	; 0xf7c <MCAL_SPI_init+0x8e>
		case SPI_BAUDRATE_PRESCALER_2 :
			SPSR |= (1 << SPI2X);
     f40:	ae e2       	ldi	r26, 0x2E	; 46
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ee e2       	ldi	r30, 0x2E	; 46
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	81 60       	ori	r24, 0x01	; 1
     f4c:	8c 93       	st	X, r24
     f4e:	1c c0       	rjmp	.+56     	; 0xf88 <MCAL_SPI_init+0x9a>
			break;
		case SPI_BAUDRATE_PRESCALER_8 :
			SPSR |= (1 << SPI2X);
     f50:	ae e2       	ldi	r26, 0x2E	; 46
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ee e2       	ldi	r30, 0x2E	; 46
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	81 60       	ori	r24, 0x01	; 1
     f5c:	8c 93       	st	X, r24
			SPCR_temp |= (1 << SPR0);
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	81 60       	ori	r24, 0x01	; 1
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	11 c0       	rjmp	.+34     	; 0xf88 <MCAL_SPI_init+0x9a>
			break;
		case SPI_BAUDRATE_PRESCALER_32 :
			SPSR |= (1 << SPI2X);
     f66:	ae e2       	ldi	r26, 0x2E	; 46
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	ee e2       	ldi	r30, 0x2E	; 46
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	81 60       	ori	r24, 0x01	; 1
     f72:	8c 93       	st	X, r24
			SPCR_temp |= (1 << SPR1);
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	82 60       	ori	r24, 0x02	; 2
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <MCAL_SPI_init+0x9a>
			break;
		default:
			SPCR_temp |= SPI_config->baudRatePrescaler;
     f7c:	ea 81       	ldd	r30, Y+2	; 0x02
     f7e:	fb 81       	ldd	r31, Y+3	; 0x03
     f80:	94 81       	ldd	r25, Z+4	; 0x04
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	89 2b       	or	r24, r25
     f86:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	SPCR_temp |= SPI_config->deviceMode;
     f88:	ea 81       	ldd	r30, Y+2	; 0x02
     f8a:	fb 81       	ldd	r31, Y+3	; 0x03
     f8c:	90 81       	ld	r25, Z
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	89 2b       	or	r24, r25
     f92:	89 83       	std	Y+1, r24	; 0x01

	SPCR_temp |= SPI_config->clockPhase;
     f94:	ea 81       	ldd	r30, Y+2	; 0x02
     f96:	fb 81       	ldd	r31, Y+3	; 0x03
     f98:	93 81       	ldd	r25, Z+3	; 0x03
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	89 2b       	or	r24, r25
     f9e:	89 83       	std	Y+1, r24	; 0x01

	SPCR_temp |= SPI_config->clockPolarity;
     fa0:	ea 81       	ldd	r30, Y+2	; 0x02
     fa2:	fb 81       	ldd	r31, Y+3	; 0x03
     fa4:	92 81       	ldd	r25, Z+2	; 0x02
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	89 2b       	or	r24, r25
     faa:	89 83       	std	Y+1, r24	; 0x01

	SPCR_temp |= SPI_config->frameFormat;
     fac:	ea 81       	ldd	r30, Y+2	; 0x02
     fae:	fb 81       	ldd	r31, Y+3	; 0x03
     fb0:	91 81       	ldd	r25, Z+1	; 0x01
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	89 2b       	or	r24, r25
     fb6:	89 83       	std	Y+1, r24	; 0x01

	SPCR_temp |= SPI_config->IRQ_enable;
     fb8:	ea 81       	ldd	r30, Y+2	; 0x02
     fba:	fb 81       	ldd	r31, Y+3	; 0x03
     fbc:	95 81       	ldd	r25, Z+5	; 0x05
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	89 2b       	or	r24, r25
     fc2:	89 83       	std	Y+1, r24	; 0x01
	if (SPI_config->IRQ_enable) {
     fc4:	ea 81       	ldd	r30, Y+2	; 0x02
     fc6:	fb 81       	ldd	r31, Y+3	; 0x03
     fc8:	85 81       	ldd	r24, Z+5	; 0x05
     fca:	88 23       	and	r24, r24
     fcc:	41 f0       	breq	.+16     	; 0xfde <MCAL_SPI_init+0xf0>
		SPI_gp_IRQ_callBack = SPI_config->P_IRQ_callBack;
     fce:	ea 81       	ldd	r30, Y+2	; 0x02
     fd0:	fb 81       	ldd	r31, Y+3	; 0x03
     fd2:	86 81       	ldd	r24, Z+6	; 0x06
     fd4:	97 81       	ldd	r25, Z+7	; 0x07
     fd6:	90 93 71 01 	sts	0x0171, r25
     fda:	80 93 70 01 	sts	0x0170, r24
	}

	SPCR_temp |= (1 << SPE);
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	80 64       	ori	r24, 0x40	; 64
     fe2:	89 83       	std	Y+1, r24	; 0x01

	SPCR = SPCR_temp;
     fe4:	ed e2       	ldi	r30, 0x2D	; 45
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	80 83       	st	Z, r24
}
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <MCAL_SPI_deInit>:

// @brief Reset the SPI.
void MCAL_SPI_deInit(void) {
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
	SPSR = (uint8) 0;
    1004:	ee e2       	ldi	r30, 0x2E	; 46
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	10 82       	st	Z, r1
	SPCR = (uint8) 0;
    100a:	ed e2       	ldi	r30, 0x2D	; 45
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	10 82       	st	Z, r1
}
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <MCAL_SPI_GPIO_setPins>:

void MCAL_SPI_GPIO_setPins(SPI_Config *SPI_config) {
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	00 d0       	rcall	.+0      	; 0x101c <MCAL_SPI_GPIO_setPins+0x6>
    101c:	00 d0       	rcall	.+0      	; 0x101e <MCAL_SPI_GPIO_setPins+0x8>
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	9c 83       	std	Y+4, r25	; 0x04
    1024:	8b 83       	std	Y+3, r24	; 0x03
	GPIO_PinConfig pinConfig;

	if (SPI_config->deviceMode == SPI_DEVICE_MODE_MASTER) {
    1026:	eb 81       	ldd	r30, Y+3	; 0x03
    1028:	fc 81       	ldd	r31, Y+4	; 0x04
    102a:	80 81       	ld	r24, Z
    102c:	80 31       	cpi	r24, 0x10	; 16
    102e:	89 f5       	brne	.+98     	; 0x1092 <MCAL_SPI_GPIO_setPins+0x7c>
		// SS(PB4)   -> Output
		pinConfig.GPIO_pinNumber = GPIO_PIN_4;
    1030:	80 e1       	ldi	r24, 0x10	; 16
    1032:	89 83       	std	Y+1, r24	; 0x01
		pinConfig.GPIO_pinMode = GPIO_MODE_OUT;
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	8a 83       	std	Y+2, r24	; 0x02
		MCAL_GPIO_init(GPIOB, &pinConfig);
    1038:	86 e3       	ldi	r24, 0x36	; 54
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	9e 01       	movw	r18, r28
    103e:	2f 5f       	subi	r18, 0xFF	; 255
    1040:	3f 4f       	sbci	r19, 0xFF	; 255
    1042:	b9 01       	movw	r22, r18
    1044:	0e 94 50 06 	call	0xca0	; 0xca0 <MCAL_GPIO_init>
		// MOSI(PB5) -> Output
		pinConfig.GPIO_pinNumber = GPIO_PIN_5;
    1048:	80 e2       	ldi	r24, 0x20	; 32
    104a:	89 83       	std	Y+1, r24	; 0x01
		pinConfig.GPIO_pinMode = GPIO_MODE_OUT;
    104c:	83 e0       	ldi	r24, 0x03	; 3
    104e:	8a 83       	std	Y+2, r24	; 0x02
		MCAL_GPIO_init(GPIOB, &pinConfig);
    1050:	86 e3       	ldi	r24, 0x36	; 54
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	9e 01       	movw	r18, r28
    1056:	2f 5f       	subi	r18, 0xFF	; 255
    1058:	3f 4f       	sbci	r19, 0xFF	; 255
    105a:	b9 01       	movw	r22, r18
    105c:	0e 94 50 06 	call	0xca0	; 0xca0 <MCAL_GPIO_init>
		// MISO(PB6) -> Input
		pinConfig.GPIO_pinNumber = GPIO_PIN_6;
    1060:	80 e4       	ldi	r24, 0x40	; 64
    1062:	89 83       	std	Y+1, r24	; 0x01
		pinConfig.GPIO_pinMode = GPIO_MODE_IN_FLOATING;
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	8a 83       	std	Y+2, r24	; 0x02
		MCAL_GPIO_init(GPIOB, &pinConfig);
    1068:	86 e3       	ldi	r24, 0x36	; 54
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9e 01       	movw	r18, r28
    106e:	2f 5f       	subi	r18, 0xFF	; 255
    1070:	3f 4f       	sbci	r19, 0xFF	; 255
    1072:	b9 01       	movw	r22, r18
    1074:	0e 94 50 06 	call	0xca0	; 0xca0 <MCAL_GPIO_init>
		// SCK(PB7)  -> Output
		pinConfig.GPIO_pinNumber = GPIO_PIN_7;
    1078:	80 e8       	ldi	r24, 0x80	; 128
    107a:	89 83       	std	Y+1, r24	; 0x01
		pinConfig.GPIO_pinMode = GPIO_MODE_OUT;
    107c:	83 e0       	ldi	r24, 0x03	; 3
    107e:	8a 83       	std	Y+2, r24	; 0x02
		MCAL_GPIO_init(GPIOB, &pinConfig);
    1080:	86 e3       	ldi	r24, 0x36	; 54
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9e 01       	movw	r18, r28
    1086:	2f 5f       	subi	r18, 0xFF	; 255
    1088:	3f 4f       	sbci	r19, 0xFF	; 255
    108a:	b9 01       	movw	r22, r18
    108c:	0e 94 50 06 	call	0xca0	; 0xca0 <MCAL_GPIO_init>
    1090:	30 c0       	rjmp	.+96     	; 0x10f2 <MCAL_SPI_GPIO_setPins+0xdc>
	} else {
		// SS(PB4)   -> Input
		pinConfig.GPIO_pinNumber = GPIO_PIN_4;
    1092:	80 e1       	ldi	r24, 0x10	; 16
    1094:	89 83       	std	Y+1, r24	; 0x01
		pinConfig.GPIO_pinMode = GPIO_MODE_IN_FLOATING;
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	8a 83       	std	Y+2, r24	; 0x02
		MCAL_GPIO_init(GPIOB, &pinConfig);
    109a:	86 e3       	ldi	r24, 0x36	; 54
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	9e 01       	movw	r18, r28
    10a0:	2f 5f       	subi	r18, 0xFF	; 255
    10a2:	3f 4f       	sbci	r19, 0xFF	; 255
    10a4:	b9 01       	movw	r22, r18
    10a6:	0e 94 50 06 	call	0xca0	; 0xca0 <MCAL_GPIO_init>
		// MOSI(PB5) -> Input
		pinConfig.GPIO_pinNumber = GPIO_PIN_5;
    10aa:	80 e2       	ldi	r24, 0x20	; 32
    10ac:	89 83       	std	Y+1, r24	; 0x01
		pinConfig.GPIO_pinMode = GPIO_MODE_IN_FLOATING;
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	8a 83       	std	Y+2, r24	; 0x02
		MCAL_GPIO_init(GPIOB, &pinConfig);
    10b2:	86 e3       	ldi	r24, 0x36	; 54
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	9e 01       	movw	r18, r28
    10b8:	2f 5f       	subi	r18, 0xFF	; 255
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	b9 01       	movw	r22, r18
    10be:	0e 94 50 06 	call	0xca0	; 0xca0 <MCAL_GPIO_init>
		// MISO(PB6) -> Output
		pinConfig.GPIO_pinNumber = GPIO_PIN_6;
    10c2:	80 e4       	ldi	r24, 0x40	; 64
    10c4:	89 83       	std	Y+1, r24	; 0x01
		pinConfig.GPIO_pinMode = GPIO_MODE_OUT;
    10c6:	83 e0       	ldi	r24, 0x03	; 3
    10c8:	8a 83       	std	Y+2, r24	; 0x02
		MCAL_GPIO_init(GPIOB, &pinConfig);
    10ca:	86 e3       	ldi	r24, 0x36	; 54
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	9e 01       	movw	r18, r28
    10d0:	2f 5f       	subi	r18, 0xFF	; 255
    10d2:	3f 4f       	sbci	r19, 0xFF	; 255
    10d4:	b9 01       	movw	r22, r18
    10d6:	0e 94 50 06 	call	0xca0	; 0xca0 <MCAL_GPIO_init>
		// SCK(PB7)  -> Input
		pinConfig.GPIO_pinNumber = GPIO_PIN_7;
    10da:	80 e8       	ldi	r24, 0x80	; 128
    10dc:	89 83       	std	Y+1, r24	; 0x01
		pinConfig.GPIO_pinMode = GPIO_MODE_IN_FLOATING;
    10de:	82 e0       	ldi	r24, 0x02	; 2
    10e0:	8a 83       	std	Y+2, r24	; 0x02
		MCAL_GPIO_init(GPIOB, &pinConfig);
    10e2:	86 e3       	ldi	r24, 0x36	; 54
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	9e 01       	movw	r18, r28
    10e8:	2f 5f       	subi	r18, 0xFF	; 255
    10ea:	3f 4f       	sbci	r19, 0xFF	; 255
    10ec:	b9 01       	movw	r22, r18
    10ee:	0e 94 50 06 	call	0xca0	; 0xca0 <MCAL_GPIO_init>
	}
}
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <MCAL_SPI_sendData>:

// @brief Responsible for send byte to another SPI device.
// @param[in]  pTxBuffer  The data to be sent.
// @param[in]  pollingEn  Whether to send by polling or not.
void MCAL_SPI_sendData(uint8 *ptrTxBuffer, uint8 pollingEn){
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <MCAL_SPI_sendData+0x6>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <MCAL_SPI_sendData+0x8>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	9b 83       	std	Y+3, r25	; 0x03
    110e:	8a 83       	std	Y+2, r24	; 0x02
    1110:	6c 83       	std	Y+4, r22	; 0x04
	uint8 dummyData = 0xFF;
    1112:	8f ef       	ldi	r24, 0xFF	; 255
    1114:	89 83       	std	Y+1, r24	; 0x01
	SPDR = *ptrTxBuffer;
    1116:	af e2       	ldi	r26, 0x2F	; 47
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	ea 81       	ldd	r30, Y+2	; 0x02
    111c:	fb 81       	ldd	r31, Y+3	; 0x03
    111e:	80 81       	ld	r24, Z
    1120:	8c 93       	st	X, r24
	// Wait until SPIF flag is set in the SR
	if (pollingEn) {
    1122:	8c 81       	ldd	r24, Y+4	; 0x04
    1124:	88 23       	and	r24, r24
    1126:	29 f0       	breq	.+10     	; 0x1132 <MCAL_SPI_sendData+0x32>
		while (BIT_IS_CLEAR(SPSR, SPIF))
    1128:	ee e2       	ldi	r30, 0x2E	; 46
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	88 23       	and	r24, r24
    1130:	dc f7       	brge	.-10     	; 0x1128 <MCAL_SPI_sendData+0x28>
			;
	}
	dummyData = SPDR;
    1132:	ef e2       	ldi	r30, 0x2F	; 47
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	89 83       	std	Y+1, r24	; 0x01
}
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <MCAL_SPI_recieveData>:

// @brief Responsible for receive byte from another SPI device.
// @param[out] pRxBuffer  The data to be received.
// @param[in]  pollingEn  Whether to receive by polling or not.
void MCAL_SPI_recieveData(uint8 *ptrRxBuffer, uint8 pollingEn){
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <MCAL_SPI_recieveData+0x6>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <MCAL_SPI_recieveData+0x8>
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	9b 83       	std	Y+3, r25	; 0x03
    1156:	8a 83       	std	Y+2, r24	; 0x02
    1158:	6c 83       	std	Y+4, r22	; 0x04
	uint8 dummyData = 0xFF;
    115a:	8f ef       	ldi	r24, 0xFF	; 255
    115c:	89 83       	std	Y+1, r24	; 0x01
	SPDR = dummyData;
    115e:	ef e2       	ldi	r30, 0x2F	; 47
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	80 83       	st	Z, r24
	// Wait until SPIF flag is set in the SR
	if (pollingEn) {
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	88 23       	and	r24, r24
    116a:	29 f0       	breq	.+10     	; 0x1176 <MCAL_SPI_recieveData+0x2e>
		while (BIT_IS_CLEAR(SPSR, SPIF))
    116c:	ee e2       	ldi	r30, 0x2E	; 46
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	88 23       	and	r24, r24
    1174:	dc f7       	brge	.-10     	; 0x116c <MCAL_SPI_recieveData+0x24>
			;
	}
	*ptrRxBuffer = SPDR;
    1176:	ef e2       	ldi	r30, 0x2F	; 47
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	ea 81       	ldd	r30, Y+2	; 0x02
    117e:	fb 81       	ldd	r31, Y+3	; 0x03
    1180:	80 83       	st	Z, r24
}
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <MCAL_SPI_sendRecieve>:

// @brief Responsible for send and receive byte to another SPI device.
// @param[in]  ptrBuffer  The data to be sent and received.
// @param[in]  pollingEn  Whether to send by polling or not.
uint8 MCAL_SPI_sendRecieve(uint8 buffer, uint8 pollingEn) {
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	00 d0       	rcall	.+0      	; 0x1196 <MCAL_SPI_sendRecieve+0x6>
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	6a 83       	std	Y+2, r22	; 0x02
	SPDR = buffer;
    119e:	ef e2       	ldi	r30, 0x2F	; 47
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	80 83       	st	Z, r24
	// Wait until SPIF flag is set in the SR
	if (pollingEn) {
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	88 23       	and	r24, r24
    11aa:	29 f0       	breq	.+10     	; 0x11b6 <MCAL_SPI_sendRecieve+0x26>
		while (BIT_IS_CLEAR(SPSR, SPIF))
    11ac:	ee e2       	ldi	r30, 0x2E	; 46
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	88 23       	and	r24, r24
    11b4:	dc f7       	brge	.-10     	; 0x11ac <MCAL_SPI_sendRecieve+0x1c>
			;
	}
	return SPDR;
    11b6:	ef e2       	ldi	r30, 0x2F	; 47
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <__vector_12>:

//*****************************************************************************
// ISR Functions Definitions
//*****************************************************************************
ISR(SPI_STC_vect) {
    11c6:	1f 92       	push	r1
    11c8:	0f 92       	push	r0
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	0f 92       	push	r0
    11ce:	11 24       	eor	r1, r1
    11d0:	2f 93       	push	r18
    11d2:	3f 93       	push	r19
    11d4:	4f 93       	push	r20
    11d6:	5f 93       	push	r21
    11d8:	6f 93       	push	r22
    11da:	7f 93       	push	r23
    11dc:	8f 93       	push	r24
    11de:	9f 93       	push	r25
    11e0:	af 93       	push	r26
    11e2:	bf 93       	push	r27
    11e4:	ef 93       	push	r30
    11e6:	ff 93       	push	r31
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
	SPI_gp_IRQ_callBack();
    11f0:	e0 91 70 01 	lds	r30, 0x0170
    11f4:	f0 91 71 01 	lds	r31, 0x0171
    11f8:	09 95       	icall
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	ff 91       	pop	r31
    1200:	ef 91       	pop	r30
    1202:	bf 91       	pop	r27
    1204:	af 91       	pop	r26
    1206:	9f 91       	pop	r25
    1208:	8f 91       	pop	r24
    120a:	7f 91       	pop	r23
    120c:	6f 91       	pop	r22
    120e:	5f 91       	pop	r21
    1210:	4f 91       	pop	r20
    1212:	3f 91       	pop	r19
    1214:	2f 91       	pop	r18
    1216:	0f 90       	pop	r0
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	0f 90       	pop	r0
    121c:	1f 90       	pop	r1
    121e:	18 95       	reti

00001220 <LCD_init>:
// Functions Definitions
//*****************************************************************************
// @brief Initialize the LCD:
// 1. Setup the LCD pins directions by use the GPIO driver.
// 2. Setup the LCD Data Mode 4-bits or 8-bits.
void LCD_init(void) {
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	61 97       	sbiw	r28, 0x11	; 17
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
	uint8 pinShift = 0;
    1234:	1f 86       	std	Y+15, r1	; 0x0f
	GPIO_PinConfig LCD_outputPinsConfig = { LCD_RS_PIN, LCD_OUTPUT_PINS_MODE };
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	88 8b       	std	Y+16, r24	; 0x10
    123a:	83 e0       	ldi	r24, 0x03	; 3
    123c:	89 8b       	std	Y+17, r24	; 0x11
	MCAL_GPIO_init(LCD_RS_PORT, &LCD_outputPinsConfig);
    123e:	9e 01       	movw	r18, r28
    1240:	20 5f       	subi	r18, 0xF0	; 240
    1242:	3f 4f       	sbci	r19, 0xFF	; 255
    1244:	83 e3       	ldi	r24, 0x33	; 51
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	b9 01       	movw	r22, r18
    124a:	0e 94 50 06 	call	0xca0	; 0xca0 <MCAL_GPIO_init>

	LCD_outputPinsConfig.GPIO_pinNumber = LCD_E_PIN;
    124e:	84 e0       	ldi	r24, 0x04	; 4
    1250:	88 8b       	std	Y+16, r24	; 0x10
	MCAL_GPIO_init(LCD_E_PORT, &LCD_outputPinsConfig);
    1252:	9e 01       	movw	r18, r28
    1254:	20 5f       	subi	r18, 0xF0	; 240
    1256:	3f 4f       	sbci	r19, 0xFF	; 255
    1258:	83 e3       	ldi	r24, 0x33	; 51
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	b9 01       	movw	r22, r18
    125e:	0e 94 50 06 	call	0xca0	; 0xca0 <MCAL_GPIO_init>

	for (pinShift = 0; pinShift < LCD_BITS; pinShift++) {
    1262:	1f 86       	std	Y+15, r1	; 0x0f
    1264:	16 c0       	rjmp	.+44     	; 0x1292 <LCD_init+0x72>
		LCD_outputPinsConfig.GPIO_pinNumber = (LCD_DATA_START_PIN << pinShift);
    1266:	8f 85       	ldd	r24, Y+15	; 0x0f
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	80 e1       	ldi	r24, 0x10	; 16
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <LCD_init+0x56>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	2a 95       	dec	r18
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <LCD_init+0x52>
    127a:	88 8b       	std	Y+16, r24	; 0x10
		MCAL_GPIO_init(LCD_DATA_PORT, &LCD_outputPinsConfig);
    127c:	9e 01       	movw	r18, r28
    127e:	20 5f       	subi	r18, 0xF0	; 240
    1280:	3f 4f       	sbci	r19, 0xFF	; 255
    1282:	83 e3       	ldi	r24, 0x33	; 51
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	b9 01       	movw	r22, r18
    1288:	0e 94 50 06 	call	0xca0	; 0xca0 <MCAL_GPIO_init>
	MCAL_GPIO_init(LCD_RS_PORT, &LCD_outputPinsConfig);

	LCD_outputPinsConfig.GPIO_pinNumber = LCD_E_PIN;
	MCAL_GPIO_init(LCD_E_PORT, &LCD_outputPinsConfig);

	for (pinShift = 0; pinShift < LCD_BITS; pinShift++) {
    128c:	8f 85       	ldd	r24, Y+15	; 0x0f
    128e:	8f 5f       	subi	r24, 0xFF	; 255
    1290:	8f 87       	std	Y+15, r24	; 0x0f
    1292:	8f 85       	ldd	r24, Y+15	; 0x0f
    1294:	84 30       	cpi	r24, 0x04	; 4
    1296:	38 f3       	brcs	.-50     	; 0x1266 <LCD_init+0x46>
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	a0 ea       	ldi	r26, 0xA0	; 160
    129e:	b1 e4       	ldi	r27, 0x41	; 65
    12a0:	8b 87       	std	Y+11, r24	; 0x0b
    12a2:	9c 87       	std	Y+12, r25	; 0x0c
    12a4:	ad 87       	std	Y+13, r26	; 0x0d
    12a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	4a ef       	ldi	r20, 0xFA	; 250
    12b6:	54 e4       	ldi	r21, 0x44	; 68
    12b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	8f 83       	std	Y+7, r24	; 0x07
    12c2:	98 87       	std	Y+8, r25	; 0x08
    12c4:	a9 87       	std	Y+9, r26	; 0x09
    12c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ca:	78 85       	ldd	r23, Y+8	; 0x08
    12cc:	89 85       	ldd	r24, Y+9	; 0x09
    12ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e8       	ldi	r20, 0x80	; 128
    12d6:	5f e3       	ldi	r21, 0x3F	; 63
    12d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12dc:	88 23       	and	r24, r24
    12de:	2c f4       	brge	.+10     	; 0x12ea <LCD_init+0xca>
		__ticks = 1;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	9e 83       	std	Y+6, r25	; 0x06
    12e6:	8d 83       	std	Y+5, r24	; 0x05
    12e8:	3f c0       	rjmp	.+126    	; 0x1368 <LCD_init+0x148>
	else if (__tmp > 65535)
    12ea:	6f 81       	ldd	r22, Y+7	; 0x07
    12ec:	78 85       	ldd	r23, Y+8	; 0x08
    12ee:	89 85       	ldd	r24, Y+9	; 0x09
    12f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	3f ef       	ldi	r19, 0xFF	; 255
    12f6:	4f e7       	ldi	r20, 0x7F	; 127
    12f8:	57 e4       	ldi	r21, 0x47	; 71
    12fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fe:	18 16       	cp	r1, r24
    1300:	4c f5       	brge	.+82     	; 0x1354 <LCD_init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1302:	6b 85       	ldd	r22, Y+11	; 0x0b
    1304:	7c 85       	ldd	r23, Y+12	; 0x0c
    1306:	8d 85       	ldd	r24, Y+13	; 0x0d
    1308:	9e 85       	ldd	r25, Y+14	; 0x0e
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e2       	ldi	r20, 0x20	; 32
    1310:	51 e4       	ldi	r21, 0x41	; 65
    1312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	bc 01       	movw	r22, r24
    131c:	cd 01       	movw	r24, r26
    131e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	9e 83       	std	Y+6, r25	; 0x06
    1328:	8d 83       	std	Y+5, r24	; 0x05
    132a:	0f c0       	rjmp	.+30     	; 0x134a <LCD_init+0x12a>
    132c:	88 ec       	ldi	r24, 0xC8	; 200
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <LCD_init+0x118>
    133c:	9c 83       	std	Y+4, r25	; 0x04
    133e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1340:	8d 81       	ldd	r24, Y+5	; 0x05
    1342:	9e 81       	ldd	r25, Y+6	; 0x06
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	9e 83       	std	Y+6, r25	; 0x06
    1348:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134a:	8d 81       	ldd	r24, Y+5	; 0x05
    134c:	9e 81       	ldd	r25, Y+6	; 0x06
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	69 f7       	brne	.-38     	; 0x132c <LCD_init+0x10c>
    1352:	14 c0       	rjmp	.+40     	; 0x137c <LCD_init+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1354:	6f 81       	ldd	r22, Y+7	; 0x07
    1356:	78 85       	ldd	r23, Y+8	; 0x08
    1358:	89 85       	ldd	r24, Y+9	; 0x09
    135a:	9a 85       	ldd	r25, Y+10	; 0x0a
    135c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	9e 83       	std	Y+6, r25	; 0x06
    1366:	8d 83       	std	Y+5, r24	; 0x05
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	9e 81       	ldd	r25, Y+6	; 0x06
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <LCD_init+0x154>
    1378:	9a 83       	std	Y+2, r25	; 0x02
    137a:	89 83       	std	Y+1, r24	; 0x01
#if LCD_BITS == 8
	// use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode 
	LCD_sendCommand(LCD_EIGHT_BIT_TWO_LINES_5x7);

#elif LCD_BITS == 4
	LCD_sendCommand(LCD_FOUR_BIT_TWO_LINES_INIT1);
    137c:	83 e3       	ldi	r24, 0x33	; 51
    137e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <LCD_sendCommand>
	LCD_sendCommand(LCD_FOUR_BIT_TWO_LINES_INIT2);
    1382:	82 e3       	ldi	r24, 0x32	; 50
    1384:	0e 94 d6 09 	call	0x13ac	; 0x13ac <LCD_sendCommand>
	LCD_sendCommand(LCD_FOUR_BIT_TWO_LINES_5x7);
    1388:	88 e2       	ldi	r24, 0x28	; 40
    138a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <LCD_sendCommand>
#endif
	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF); // cursor off 
    138e:	8c e0       	ldi	r24, 0x0C	; 12
    1390:	0e 94 d6 09 	call	0x13ac	; 0x13ac <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY); // clear LCD at the beginning 
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	0e 94 d6 09 	call	0x13ac	; 0x13ac <LCD_sendCommand>
}
    139a:	61 96       	adiw	r28, 0x11	; 17
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <LCD_sendCommand>:

// @brief Send the required command to the screen
// @param[in]  command  The command to be sent.
void LCD_sendCommand(uint8 command) {
    13ac:	0f 93       	push	r16
    13ae:	1f 93       	push	r17
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	c3 56       	subi	r28, 0x63	; 99
    13ba:	d0 40       	sbci	r29, 0x00	; 0
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	fe 01       	movw	r30, r28
    13c8:	ed 59       	subi	r30, 0x9D	; 157
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	80 83       	st	Z, r24
	MCAL_GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
    13ce:	83 e3       	ldi	r24, 0x33	; 51
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	61 e0       	ldi	r22, 0x01	; 1
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
    13da:	fe 01       	movw	r30, r28
    13dc:	e1 5a       	subi	r30, 0xA1	; 161
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a0 e8       	ldi	r26, 0x80	; 128
    13e6:	bf e3       	ldi	r27, 0x3F	; 63
    13e8:	80 83       	st	Z, r24
    13ea:	91 83       	std	Z+1, r25	; 0x01
    13ec:	a2 83       	std	Z+2, r26	; 0x02
    13ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f0:	8e 01       	movw	r16, r28
    13f2:	05 5a       	subi	r16, 0xA5	; 165
    13f4:	1f 4f       	sbci	r17, 0xFF	; 255
    13f6:	fe 01       	movw	r30, r28
    13f8:	e1 5a       	subi	r30, 0xA1	; 161
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	60 81       	ld	r22, Z
    13fe:	71 81       	ldd	r23, Z+1	; 0x01
    1400:	82 81       	ldd	r24, Z+2	; 0x02
    1402:	93 81       	ldd	r25, Z+3	; 0x03
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	4a ef       	ldi	r20, 0xFA	; 250
    140a:	54 e4       	ldi	r21, 0x44	; 68
    140c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	f8 01       	movw	r30, r16
    1416:	80 83       	st	Z, r24
    1418:	91 83       	std	Z+1, r25	; 0x01
    141a:	a2 83       	std	Z+2, r26	; 0x02
    141c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    141e:	fe 01       	movw	r30, r28
    1420:	e5 5a       	subi	r30, 0xA5	; 165
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	60 81       	ld	r22, Z
    1426:	71 81       	ldd	r23, Z+1	; 0x01
    1428:	82 81       	ldd	r24, Z+2	; 0x02
    142a:	93 81       	ldd	r25, Z+3	; 0x03
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e8       	ldi	r20, 0x80	; 128
    1432:	5f e3       	ldi	r21, 0x3F	; 63
    1434:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1438:	88 23       	and	r24, r24
    143a:	44 f4       	brge	.+16     	; 0x144c <LCD_sendCommand+0xa0>
		__ticks = 1;
    143c:	fe 01       	movw	r30, r28
    143e:	e7 5a       	subi	r30, 0xA7	; 167
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	80 83       	st	Z, r24
    144a:	64 c0       	rjmp	.+200    	; 0x1514 <LCD_sendCommand+0x168>
	else if (__tmp > 65535)
    144c:	fe 01       	movw	r30, r28
    144e:	e5 5a       	subi	r30, 0xA5	; 165
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	60 81       	ld	r22, Z
    1454:	71 81       	ldd	r23, Z+1	; 0x01
    1456:	82 81       	ldd	r24, Z+2	; 0x02
    1458:	93 81       	ldd	r25, Z+3	; 0x03
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	3f ef       	ldi	r19, 0xFF	; 255
    145e:	4f e7       	ldi	r20, 0x7F	; 127
    1460:	57 e4       	ldi	r21, 0x47	; 71
    1462:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1466:	18 16       	cp	r1, r24
    1468:	0c f0       	brlt	.+2      	; 0x146c <LCD_sendCommand+0xc0>
    146a:	43 c0       	rjmp	.+134    	; 0x14f2 <LCD_sendCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146c:	fe 01       	movw	r30, r28
    146e:	e1 5a       	subi	r30, 0xA1	; 161
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	60 81       	ld	r22, Z
    1474:	71 81       	ldd	r23, Z+1	; 0x01
    1476:	82 81       	ldd	r24, Z+2	; 0x02
    1478:	93 81       	ldd	r25, Z+3	; 0x03
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e2       	ldi	r20, 0x20	; 32
    1480:	51 e4       	ldi	r21, 0x41	; 65
    1482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8e 01       	movw	r16, r28
    148c:	07 5a       	subi	r16, 0xA7	; 167
    148e:	1f 4f       	sbci	r17, 0xFF	; 255
    1490:	bc 01       	movw	r22, r24
    1492:	cd 01       	movw	r24, r26
    1494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	f8 01       	movw	r30, r16
    149e:	91 83       	std	Z+1, r25	; 0x01
    14a0:	80 83       	st	Z, r24
    14a2:	1f c0       	rjmp	.+62     	; 0x14e2 <LCD_sendCommand+0x136>
    14a4:	fe 01       	movw	r30, r28
    14a6:	e9 5a       	subi	r30, 0xA9	; 169
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	88 ec       	ldi	r24, 0xC8	; 200
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	91 83       	std	Z+1, r25	; 0x01
    14b0:	80 83       	st	Z, r24
    14b2:	fe 01       	movw	r30, r28
    14b4:	e9 5a       	subi	r30, 0xA9	; 169
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	80 81       	ld	r24, Z
    14ba:	91 81       	ldd	r25, Z+1	; 0x01
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <LCD_sendCommand+0x110>
    14c0:	fe 01       	movw	r30, r28
    14c2:	e9 5a       	subi	r30, 0xA9	; 169
    14c4:	ff 4f       	sbci	r31, 0xFF	; 255
    14c6:	91 83       	std	Z+1, r25	; 0x01
    14c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ca:	de 01       	movw	r26, r28
    14cc:	a7 5a       	subi	r26, 0xA7	; 167
    14ce:	bf 4f       	sbci	r27, 0xFF	; 255
    14d0:	fe 01       	movw	r30, r28
    14d2:	e7 5a       	subi	r30, 0xA7	; 167
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	11 96       	adiw	r26, 0x01	; 1
    14de:	9c 93       	st	X, r25
    14e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e2:	fe 01       	movw	r30, r28
    14e4:	e7 5a       	subi	r30, 0xA7	; 167
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	80 81       	ld	r24, Z
    14ea:	91 81       	ldd	r25, Z+1	; 0x01
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	d1 f6       	brne	.-76     	; 0x14a4 <LCD_sendCommand+0xf8>
    14f0:	27 c0       	rjmp	.+78     	; 0x1540 <LCD_sendCommand+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f2:	8e 01       	movw	r16, r28
    14f4:	07 5a       	subi	r16, 0xA7	; 167
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
    14f8:	fe 01       	movw	r30, r28
    14fa:	e5 5a       	subi	r30, 0xA5	; 165
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	60 81       	ld	r22, Z
    1500:	71 81       	ldd	r23, Z+1	; 0x01
    1502:	82 81       	ldd	r24, Z+2	; 0x02
    1504:	93 81       	ldd	r25, Z+3	; 0x03
    1506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	f8 01       	movw	r30, r16
    1510:	91 83       	std	Z+1, r25	; 0x01
    1512:	80 83       	st	Z, r24
    1514:	de 01       	movw	r26, r28
    1516:	ab 5a       	subi	r26, 0xAB	; 171
    1518:	bf 4f       	sbci	r27, 0xFF	; 255
    151a:	fe 01       	movw	r30, r28
    151c:	e7 5a       	subi	r30, 0xA7	; 167
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	80 81       	ld	r24, Z
    1522:	91 81       	ldd	r25, Z+1	; 0x01
    1524:	8d 93       	st	X+, r24
    1526:	9c 93       	st	X, r25
    1528:	fe 01       	movw	r30, r28
    152a:	eb 5a       	subi	r30, 0xAB	; 171
    152c:	ff 4f       	sbci	r31, 0xFF	; 255
    152e:	80 81       	ld	r24, Z
    1530:	91 81       	ldd	r25, Z+1	; 0x01
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	f1 f7       	brne	.-4      	; 0x1532 <LCD_sendCommand+0x186>
    1536:	fe 01       	movw	r30, r28
    1538:	eb 5a       	subi	r30, 0xAB	; 171
    153a:	ff 4f       	sbci	r31, 0xFF	; 255
    153c:	91 83       	std	Z+1, r25	; 0x01
    153e:	80 83       	st	Z, r24
	_delay_ms(1);

	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    1540:	83 e3       	ldi	r24, 0x33	; 51
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	64 e0       	ldi	r22, 0x04	; 4
    1546:	41 e0       	ldi	r20, 0x01	; 1
    1548:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
    154c:	fe 01       	movw	r30, r28
    154e:	ef 5a       	subi	r30, 0xAF	; 175
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 e8       	ldi	r26, 0x80	; 128
    1558:	bf e3       	ldi	r27, 0x3F	; 63
    155a:	80 83       	st	Z, r24
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	a2 83       	std	Z+2, r26	; 0x02
    1560:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1562:	8e 01       	movw	r16, r28
    1564:	03 5b       	subi	r16, 0xB3	; 179
    1566:	1f 4f       	sbci	r17, 0xFF	; 255
    1568:	fe 01       	movw	r30, r28
    156a:	ef 5a       	subi	r30, 0xAF	; 175
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	4a ef       	ldi	r20, 0xFA	; 250
    157c:	54 e4       	ldi	r21, 0x44	; 68
    157e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	f8 01       	movw	r30, r16
    1588:	80 83       	st	Z, r24
    158a:	91 83       	std	Z+1, r25	; 0x01
    158c:	a2 83       	std	Z+2, r26	; 0x02
    158e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1590:	fe 01       	movw	r30, r28
    1592:	e3 5b       	subi	r30, 0xB3	; 179
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15aa:	88 23       	and	r24, r24
    15ac:	44 f4       	brge	.+16     	; 0x15be <LCD_sendCommand+0x212>
		__ticks = 1;
    15ae:	fe 01       	movw	r30, r28
    15b0:	e5 5b       	subi	r30, 0xB5	; 181
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	91 83       	std	Z+1, r25	; 0x01
    15ba:	80 83       	st	Z, r24
    15bc:	64 c0       	rjmp	.+200    	; 0x1686 <LCD_sendCommand+0x2da>
	else if (__tmp > 65535)
    15be:	fe 01       	movw	r30, r28
    15c0:	e3 5b       	subi	r30, 0xB3	; 179
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	60 81       	ld	r22, Z
    15c6:	71 81       	ldd	r23, Z+1	; 0x01
    15c8:	82 81       	ldd	r24, Z+2	; 0x02
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	3f ef       	ldi	r19, 0xFF	; 255
    15d0:	4f e7       	ldi	r20, 0x7F	; 127
    15d2:	57 e4       	ldi	r21, 0x47	; 71
    15d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15d8:	18 16       	cp	r1, r24
    15da:	0c f0       	brlt	.+2      	; 0x15de <LCD_sendCommand+0x232>
    15dc:	43 c0       	rjmp	.+134    	; 0x1664 <LCD_sendCommand+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15de:	fe 01       	movw	r30, r28
    15e0:	ef 5a       	subi	r30, 0xAF	; 175
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	8e 01       	movw	r16, r28
    15fe:	05 5b       	subi	r16, 0xB5	; 181
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	bc 01       	movw	r22, r24
    1604:	cd 01       	movw	r24, r26
    1606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	f8 01       	movw	r30, r16
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	80 83       	st	Z, r24
    1614:	1f c0       	rjmp	.+62     	; 0x1654 <LCD_sendCommand+0x2a8>
    1616:	fe 01       	movw	r30, r28
    1618:	e7 5b       	subi	r30, 0xB7	; 183
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	88 ec       	ldi	r24, 0xC8	; 200
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	91 83       	std	Z+1, r25	; 0x01
    1622:	80 83       	st	Z, r24
    1624:	fe 01       	movw	r30, r28
    1626:	e7 5b       	subi	r30, 0xB7	; 183
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <LCD_sendCommand+0x282>
    1632:	fe 01       	movw	r30, r28
    1634:	e7 5b       	subi	r30, 0xB7	; 183
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	91 83       	std	Z+1, r25	; 0x01
    163a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163c:	de 01       	movw	r26, r28
    163e:	a5 5b       	subi	r26, 0xB5	; 181
    1640:	bf 4f       	sbci	r27, 0xFF	; 255
    1642:	fe 01       	movw	r30, r28
    1644:	e5 5b       	subi	r30, 0xB5	; 181
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	80 81       	ld	r24, Z
    164a:	91 81       	ldd	r25, Z+1	; 0x01
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	11 96       	adiw	r26, 0x01	; 1
    1650:	9c 93       	st	X, r25
    1652:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1654:	fe 01       	movw	r30, r28
    1656:	e5 5b       	subi	r30, 0xB5	; 181
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	80 81       	ld	r24, Z
    165c:	91 81       	ldd	r25, Z+1	; 0x01
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	d1 f6       	brne	.-76     	; 0x1616 <LCD_sendCommand+0x26a>
    1662:	27 c0       	rjmp	.+78     	; 0x16b2 <LCD_sendCommand+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1664:	8e 01       	movw	r16, r28
    1666:	05 5b       	subi	r16, 0xB5	; 181
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	fe 01       	movw	r30, r28
    166c:	e3 5b       	subi	r30, 0xB3	; 179
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	60 81       	ld	r22, Z
    1672:	71 81       	ldd	r23, Z+1	; 0x01
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	93 81       	ldd	r25, Z+3	; 0x03
    1678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	f8 01       	movw	r30, r16
    1682:	91 83       	std	Z+1, r25	; 0x01
    1684:	80 83       	st	Z, r24
    1686:	de 01       	movw	r26, r28
    1688:	a9 5b       	subi	r26, 0xB9	; 185
    168a:	bf 4f       	sbci	r27, 0xFF	; 255
    168c:	fe 01       	movw	r30, r28
    168e:	e5 5b       	subi	r30, 0xB5	; 181
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	8d 93       	st	X+, r24
    1698:	9c 93       	st	X, r25
    169a:	fe 01       	movw	r30, r28
    169c:	e9 5b       	subi	r30, 0xB9	; 185
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	80 81       	ld	r24, Z
    16a2:	91 81       	ldd	r25, Z+1	; 0x01
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <LCD_sendCommand+0x2f8>
    16a8:	fe 01       	movw	r30, r28
    16aa:	e9 5b       	subi	r30, 0xB9	; 185
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	80 83       	st	Z, r24
	_delay_ms(1);
#if LCD_BITS == 8
	MCAL_GPIO_writePort(LCD_DATA_PORT, (MCAL_GPIO_readPort(LCD_DATA_PORT) & 0xFF00)| command);
#elif LCD_BITS == 4
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN, GET_BIT(command, 4));
    16b2:	fe 01       	movw	r30, r28
    16b4:	ed 59       	subi	r30, 0x9D	; 157
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	80 81       	ld	r24, Z
    16ba:	88 2f       	mov	r24, r24
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	80 71       	andi	r24, 0x10	; 16
    16c0:	90 70       	andi	r25, 0x00	; 0
    16c2:	95 95       	asr	r25
    16c4:	87 95       	ror	r24
    16c6:	95 95       	asr	r25
    16c8:	87 95       	ror	r24
    16ca:	95 95       	asr	r25
    16cc:	87 95       	ror	r24
    16ce:	95 95       	asr	r25
    16d0:	87 95       	ror	r24
    16d2:	28 2f       	mov	r18, r24
    16d4:	83 e3       	ldi	r24, 0x33	; 51
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	60 e1       	ldi	r22, 0x10	; 16
    16da:	42 2f       	mov	r20, r18
    16dc:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 1,
    16e0:	fe 01       	movw	r30, r28
    16e2:	ed 59       	subi	r30, 0x9D	; 157
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	80 81       	ld	r24, Z
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	80 72       	andi	r24, 0x20	; 32
    16ee:	90 70       	andi	r25, 0x00	; 0
    16f0:	95 95       	asr	r25
    16f2:	87 95       	ror	r24
    16f4:	95 95       	asr	r25
    16f6:	87 95       	ror	r24
    16f8:	95 95       	asr	r25
    16fa:	87 95       	ror	r24
    16fc:	95 95       	asr	r25
    16fe:	87 95       	ror	r24
    1700:	95 95       	asr	r25
    1702:	87 95       	ror	r24
    1704:	28 2f       	mov	r18, r24
    1706:	83 e3       	ldi	r24, 0x33	; 51
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	60 e2       	ldi	r22, 0x20	; 32
    170c:	42 2f       	mov	r20, r18
    170e:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
			GET_BIT(command, 5));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 2,
    1712:	fe 01       	movw	r30, r28
    1714:	ed 59       	subi	r30, 0x9D	; 157
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	80 81       	ld	r24, Z
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	80 74       	andi	r24, 0x40	; 64
    1720:	90 70       	andi	r25, 0x00	; 0
    1722:	08 2e       	mov	r0, r24
    1724:	89 2f       	mov	r24, r25
    1726:	00 0c       	add	r0, r0
    1728:	88 1f       	adc	r24, r24
    172a:	99 0b       	sbc	r25, r25
    172c:	00 0c       	add	r0, r0
    172e:	88 1f       	adc	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	28 2f       	mov	r18, r24
    1734:	83 e3       	ldi	r24, 0x33	; 51
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	60 e4       	ldi	r22, 0x40	; 64
    173a:	42 2f       	mov	r20, r18
    173c:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
			GET_BIT(command, 6));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 3,
    1740:	fe 01       	movw	r30, r28
    1742:	ed 59       	subi	r30, 0x9D	; 157
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	80 81       	ld	r24, Z
    1748:	28 2f       	mov	r18, r24
    174a:	22 1f       	adc	r18, r18
    174c:	22 27       	eor	r18, r18
    174e:	22 1f       	adc	r18, r18
    1750:	83 e3       	ldi	r24, 0x33	; 51
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	60 e8       	ldi	r22, 0x80	; 128
    1756:	42 2f       	mov	r20, r18
    1758:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
    175c:	fe 01       	movw	r30, r28
    175e:	ed 5b       	subi	r30, 0xBD	; 189
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a0 e8       	ldi	r26, 0x80	; 128
    1768:	bf e3       	ldi	r27, 0x3F	; 63
    176a:	80 83       	st	Z, r24
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	a2 83       	std	Z+2, r26	; 0x02
    1770:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1772:	8e 01       	movw	r16, r28
    1774:	01 5c       	subi	r16, 0xC1	; 193
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	fe 01       	movw	r30, r28
    177a:	ed 5b       	subi	r30, 0xBD	; 189
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	60 81       	ld	r22, Z
    1780:	71 81       	ldd	r23, Z+1	; 0x01
    1782:	82 81       	ldd	r24, Z+2	; 0x02
    1784:	93 81       	ldd	r25, Z+3	; 0x03
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	4a ef       	ldi	r20, 0xFA	; 250
    178c:	54 e4       	ldi	r21, 0x44	; 68
    178e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	f8 01       	movw	r30, r16
    1798:	80 83       	st	Z, r24
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	a2 83       	std	Z+2, r26	; 0x02
    179e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17a0:	fe 01       	movw	r30, r28
    17a2:	ff 96       	adiw	r30, 0x3f	; 63
    17a4:	60 81       	ld	r22, Z
    17a6:	71 81       	ldd	r23, Z+1	; 0x01
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	93 81       	ldd	r25, Z+3	; 0x03
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e8       	ldi	r20, 0x80	; 128
    17b2:	5f e3       	ldi	r21, 0x3F	; 63
    17b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b8:	88 23       	and	r24, r24
    17ba:	2c f4       	brge	.+10     	; 0x17c6 <LCD_sendCommand+0x41a>
		__ticks = 1;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9e af       	std	Y+62, r25	; 0x3e
    17c2:	8d af       	std	Y+61, r24	; 0x3d
    17c4:	46 c0       	rjmp	.+140    	; 0x1852 <LCD_sendCommand+0x4a6>
	else if (__tmp > 65535)
    17c6:	fe 01       	movw	r30, r28
    17c8:	ff 96       	adiw	r30, 0x3f	; 63
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	3f ef       	ldi	r19, 0xFF	; 255
    17d6:	4f e7       	ldi	r20, 0x7F	; 127
    17d8:	57 e4       	ldi	r21, 0x47	; 71
    17da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17de:	18 16       	cp	r1, r24
    17e0:	64 f5       	brge	.+88     	; 0x183a <LCD_sendCommand+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e2:	fe 01       	movw	r30, r28
    17e4:	ed 5b       	subi	r30, 0xBD	; 189
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	60 81       	ld	r22, Z
    17ea:	71 81       	ldd	r23, Z+1	; 0x01
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	93 81       	ldd	r25, Z+3	; 0x03
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e2       	ldi	r20, 0x20	; 32
    17f6:	51 e4       	ldi	r21, 0x41	; 65
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	bc 01       	movw	r22, r24
    1802:	cd 01       	movw	r24, r26
    1804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	9e af       	std	Y+62, r25	; 0x3e
    180e:	8d af       	std	Y+61, r24	; 0x3d
    1810:	0f c0       	rjmp	.+30     	; 0x1830 <LCD_sendCommand+0x484>
    1812:	88 ec       	ldi	r24, 0xC8	; 200
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9c af       	std	Y+60, r25	; 0x3c
    1818:	8b af       	std	Y+59, r24	; 0x3b
    181a:	8b ad       	ldd	r24, Y+59	; 0x3b
    181c:	9c ad       	ldd	r25, Y+60	; 0x3c
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <LCD_sendCommand+0x472>
    1822:	9c af       	std	Y+60, r25	; 0x3c
    1824:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1826:	8d ad       	ldd	r24, Y+61	; 0x3d
    1828:	9e ad       	ldd	r25, Y+62	; 0x3e
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	9e af       	std	Y+62, r25	; 0x3e
    182e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1830:	8d ad       	ldd	r24, Y+61	; 0x3d
    1832:	9e ad       	ldd	r25, Y+62	; 0x3e
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	69 f7       	brne	.-38     	; 0x1812 <LCD_sendCommand+0x466>
    1838:	16 c0       	rjmp	.+44     	; 0x1866 <LCD_sendCommand+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183a:	fe 01       	movw	r30, r28
    183c:	ff 96       	adiw	r30, 0x3f	; 63
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	9e af       	std	Y+62, r25	; 0x3e
    1850:	8d af       	std	Y+61, r24	; 0x3d
    1852:	8d ad       	ldd	r24, Y+61	; 0x3d
    1854:	9e ad       	ldd	r25, Y+62	; 0x3e
    1856:	9a af       	std	Y+58, r25	; 0x3a
    1858:	89 af       	std	Y+57, r24	; 0x39
    185a:	89 ad       	ldd	r24, Y+57	; 0x39
    185c:	9a ad       	ldd	r25, Y+58	; 0x3a
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <LCD_sendCommand+0x4b2>
    1862:	9a af       	std	Y+58, r25	; 0x3a
    1864:	89 af       	std	Y+57, r24	; 0x39
			GET_BIT(command, 7));
	_delay_ms(1);
	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    1866:	83 e3       	ldi	r24, 0x33	; 51
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	64 e0       	ldi	r22, 0x04	; 4
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a0 e8       	ldi	r26, 0x80	; 128
    1878:	bf e3       	ldi	r27, 0x3F	; 63
    187a:	8d ab       	std	Y+53, r24	; 0x35
    187c:	9e ab       	std	Y+54, r25	; 0x36
    187e:	af ab       	std	Y+55, r26	; 0x37
    1880:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1882:	6d a9       	ldd	r22, Y+53	; 0x35
    1884:	7e a9       	ldd	r23, Y+54	; 0x36
    1886:	8f a9       	ldd	r24, Y+55	; 0x37
    1888:	98 ad       	ldd	r25, Y+56	; 0x38
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	4a ef       	ldi	r20, 0xFA	; 250
    1890:	54 e4       	ldi	r21, 0x44	; 68
    1892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	89 ab       	std	Y+49, r24	; 0x31
    189c:	9a ab       	std	Y+50, r25	; 0x32
    189e:	ab ab       	std	Y+51, r26	; 0x33
    18a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18a2:	69 a9       	ldd	r22, Y+49	; 0x31
    18a4:	7a a9       	ldd	r23, Y+50	; 0x32
    18a6:	8b a9       	ldd	r24, Y+51	; 0x33
    18a8:	9c a9       	ldd	r25, Y+52	; 0x34
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e8       	ldi	r20, 0x80	; 128
    18b0:	5f e3       	ldi	r21, 0x3F	; 63
    18b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b6:	88 23       	and	r24, r24
    18b8:	2c f4       	brge	.+10     	; 0x18c4 <LCD_sendCommand+0x518>
		__ticks = 1;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	98 ab       	std	Y+48, r25	; 0x30
    18c0:	8f a7       	std	Y+47, r24	; 0x2f
    18c2:	3f c0       	rjmp	.+126    	; 0x1942 <LCD_sendCommand+0x596>
	else if (__tmp > 65535)
    18c4:	69 a9       	ldd	r22, Y+49	; 0x31
    18c6:	7a a9       	ldd	r23, Y+50	; 0x32
    18c8:	8b a9       	ldd	r24, Y+51	; 0x33
    18ca:	9c a9       	ldd	r25, Y+52	; 0x34
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	3f ef       	ldi	r19, 0xFF	; 255
    18d0:	4f e7       	ldi	r20, 0x7F	; 127
    18d2:	57 e4       	ldi	r21, 0x47	; 71
    18d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d8:	18 16       	cp	r1, r24
    18da:	4c f5       	brge	.+82     	; 0x192e <LCD_sendCommand+0x582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18dc:	6d a9       	ldd	r22, Y+53	; 0x35
    18de:	7e a9       	ldd	r23, Y+54	; 0x36
    18e0:	8f a9       	ldd	r24, Y+55	; 0x37
    18e2:	98 ad       	ldd	r25, Y+56	; 0x38
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e2       	ldi	r20, 0x20	; 32
    18ea:	51 e4       	ldi	r21, 0x41	; 65
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	bc 01       	movw	r22, r24
    18f6:	cd 01       	movw	r24, r26
    18f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	98 ab       	std	Y+48, r25	; 0x30
    1902:	8f a7       	std	Y+47, r24	; 0x2f
    1904:	0f c0       	rjmp	.+30     	; 0x1924 <LCD_sendCommand+0x578>
    1906:	88 ec       	ldi	r24, 0xC8	; 200
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	9e a7       	std	Y+46, r25	; 0x2e
    190c:	8d a7       	std	Y+45, r24	; 0x2d
    190e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1910:	9e a5       	ldd	r25, Y+46	; 0x2e
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	f1 f7       	brne	.-4      	; 0x1912 <LCD_sendCommand+0x566>
    1916:	9e a7       	std	Y+46, r25	; 0x2e
    1918:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191a:	8f a5       	ldd	r24, Y+47	; 0x2f
    191c:	98 a9       	ldd	r25, Y+48	; 0x30
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	98 ab       	std	Y+48, r25	; 0x30
    1922:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1924:	8f a5       	ldd	r24, Y+47	; 0x2f
    1926:	98 a9       	ldd	r25, Y+48	; 0x30
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	69 f7       	brne	.-38     	; 0x1906 <LCD_sendCommand+0x55a>
    192c:	14 c0       	rjmp	.+40     	; 0x1956 <LCD_sendCommand+0x5aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192e:	69 a9       	ldd	r22, Y+49	; 0x31
    1930:	7a a9       	ldd	r23, Y+50	; 0x32
    1932:	8b a9       	ldd	r24, Y+51	; 0x33
    1934:	9c a9       	ldd	r25, Y+52	; 0x34
    1936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	98 ab       	std	Y+48, r25	; 0x30
    1940:	8f a7       	std	Y+47, r24	; 0x2f
    1942:	8f a5       	ldd	r24, Y+47	; 0x2f
    1944:	98 a9       	ldd	r25, Y+48	; 0x30
    1946:	9c a7       	std	Y+44, r25	; 0x2c
    1948:	8b a7       	std	Y+43, r24	; 0x2b
    194a:	8b a5       	ldd	r24, Y+43	; 0x2b
    194c:	9c a5       	ldd	r25, Y+44	; 0x2c
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <LCD_sendCommand+0x5a2>
    1952:	9c a7       	std	Y+44, r25	; 0x2c
    1954:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    1956:	83 e3       	ldi	r24, 0x33	; 51
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	64 e0       	ldi	r22, 0x04	; 4
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	a0 e8       	ldi	r26, 0x80	; 128
    1968:	bf e3       	ldi	r27, 0x3F	; 63
    196a:	8f a3       	std	Y+39, r24	; 0x27
    196c:	98 a7       	std	Y+40, r25	; 0x28
    196e:	a9 a7       	std	Y+41, r26	; 0x29
    1970:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1972:	6f a1       	ldd	r22, Y+39	; 0x27
    1974:	78 a5       	ldd	r23, Y+40	; 0x28
    1976:	89 a5       	ldd	r24, Y+41	; 0x29
    1978:	9a a5       	ldd	r25, Y+42	; 0x2a
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	4a ef       	ldi	r20, 0xFA	; 250
    1980:	54 e4       	ldi	r21, 0x44	; 68
    1982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	8b a3       	std	Y+35, r24	; 0x23
    198c:	9c a3       	std	Y+36, r25	; 0x24
    198e:	ad a3       	std	Y+37, r26	; 0x25
    1990:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1992:	6b a1       	ldd	r22, Y+35	; 0x23
    1994:	7c a1       	ldd	r23, Y+36	; 0x24
    1996:	8d a1       	ldd	r24, Y+37	; 0x25
    1998:	9e a1       	ldd	r25, Y+38	; 0x26
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e8       	ldi	r20, 0x80	; 128
    19a0:	5f e3       	ldi	r21, 0x3F	; 63
    19a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a6:	88 23       	and	r24, r24
    19a8:	2c f4       	brge	.+10     	; 0x19b4 <LCD_sendCommand+0x608>
		__ticks = 1;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9a a3       	std	Y+34, r25	; 0x22
    19b0:	89 a3       	std	Y+33, r24	; 0x21
    19b2:	3f c0       	rjmp	.+126    	; 0x1a32 <LCD_sendCommand+0x686>
	else if (__tmp > 65535)
    19b4:	6b a1       	ldd	r22, Y+35	; 0x23
    19b6:	7c a1       	ldd	r23, Y+36	; 0x24
    19b8:	8d a1       	ldd	r24, Y+37	; 0x25
    19ba:	9e a1       	ldd	r25, Y+38	; 0x26
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	3f ef       	ldi	r19, 0xFF	; 255
    19c0:	4f e7       	ldi	r20, 0x7F	; 127
    19c2:	57 e4       	ldi	r21, 0x47	; 71
    19c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c8:	18 16       	cp	r1, r24
    19ca:	4c f5       	brge	.+82     	; 0x1a1e <LCD_sendCommand+0x672>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19cc:	6f a1       	ldd	r22, Y+39	; 0x27
    19ce:	78 a5       	ldd	r23, Y+40	; 0x28
    19d0:	89 a5       	ldd	r24, Y+41	; 0x29
    19d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e2       	ldi	r20, 0x20	; 32
    19da:	51 e4       	ldi	r21, 0x41	; 65
    19dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	bc 01       	movw	r22, r24
    19e6:	cd 01       	movw	r24, r26
    19e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	9a a3       	std	Y+34, r25	; 0x22
    19f2:	89 a3       	std	Y+33, r24	; 0x21
    19f4:	0f c0       	rjmp	.+30     	; 0x1a14 <LCD_sendCommand+0x668>
    19f6:	88 ec       	ldi	r24, 0xC8	; 200
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	98 a3       	std	Y+32, r25	; 0x20
    19fc:	8f 8f       	std	Y+31, r24	; 0x1f
    19fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a00:	98 a1       	ldd	r25, Y+32	; 0x20
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <LCD_sendCommand+0x656>
    1a06:	98 a3       	std	Y+32, r25	; 0x20
    1a08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	9a a3       	std	Y+34, r25	; 0x22
    1a12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a14:	89 a1       	ldd	r24, Y+33	; 0x21
    1a16:	9a a1       	ldd	r25, Y+34	; 0x22
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	69 f7       	brne	.-38     	; 0x19f6 <LCD_sendCommand+0x64a>
    1a1c:	14 c0       	rjmp	.+40     	; 0x1a46 <LCD_sendCommand+0x69a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a20:	7c a1       	ldd	r23, Y+36	; 0x24
    1a22:	8d a1       	ldd	r24, Y+37	; 0x25
    1a24:	9e a1       	ldd	r25, Y+38	; 0x26
    1a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	9a a3       	std	Y+34, r25	; 0x22
    1a30:	89 a3       	std	Y+33, r24	; 0x21
    1a32:	89 a1       	ldd	r24, Y+33	; 0x21
    1a34:	9a a1       	ldd	r25, Y+34	; 0x22
    1a36:	9e 8f       	std	Y+30, r25	; 0x1e
    1a38:	8d 8f       	std	Y+29, r24	; 0x1d
    1a3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LCD_sendCommand+0x692>
    1a42:	9e 8f       	std	Y+30, r25	; 0x1e
    1a44:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN, GET_BIT(command, 0));
    1a46:	fe 01       	movw	r30, r28
    1a48:	ed 59       	subi	r30, 0x9D	; 157
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	80 81       	ld	r24, Z
    1a4e:	28 2f       	mov	r18, r24
    1a50:	21 70       	andi	r18, 0x01	; 1
    1a52:	83 e3       	ldi	r24, 0x33	; 51
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	60 e1       	ldi	r22, 0x10	; 16
    1a58:	42 2f       	mov	r20, r18
    1a5a:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 1,
    1a5e:	fe 01       	movw	r30, r28
    1a60:	ed 59       	subi	r30, 0x9D	; 157
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	80 81       	ld	r24, Z
    1a66:	88 2f       	mov	r24, r24
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	82 70       	andi	r24, 0x02	; 2
    1a6c:	90 70       	andi	r25, 0x00	; 0
    1a6e:	95 95       	asr	r25
    1a70:	87 95       	ror	r24
    1a72:	28 2f       	mov	r18, r24
    1a74:	83 e3       	ldi	r24, 0x33	; 51
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	60 e2       	ldi	r22, 0x20	; 32
    1a7a:	42 2f       	mov	r20, r18
    1a7c:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
			GET_BIT(command, 1));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 2,
    1a80:	fe 01       	movw	r30, r28
    1a82:	ed 59       	subi	r30, 0x9D	; 157
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	80 81       	ld	r24, Z
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	84 70       	andi	r24, 0x04	; 4
    1a8e:	90 70       	andi	r25, 0x00	; 0
    1a90:	95 95       	asr	r25
    1a92:	87 95       	ror	r24
    1a94:	95 95       	asr	r25
    1a96:	87 95       	ror	r24
    1a98:	28 2f       	mov	r18, r24
    1a9a:	83 e3       	ldi	r24, 0x33	; 51
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	60 e4       	ldi	r22, 0x40	; 64
    1aa0:	42 2f       	mov	r20, r18
    1aa2:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
			GET_BIT(command, 2));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 3,
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	ed 59       	subi	r30, 0x9D	; 157
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	80 81       	ld	r24, Z
    1aae:	88 2f       	mov	r24, r24
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	88 70       	andi	r24, 0x08	; 8
    1ab4:	90 70       	andi	r25, 0x00	; 0
    1ab6:	95 95       	asr	r25
    1ab8:	87 95       	ror	r24
    1aba:	95 95       	asr	r25
    1abc:	87 95       	ror	r24
    1abe:	95 95       	asr	r25
    1ac0:	87 95       	ror	r24
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	83 e3       	ldi	r24, 0x33	; 51
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	60 e8       	ldi	r22, 0x80	; 128
    1aca:	42 2f       	mov	r20, r18
    1acc:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	a0 e8       	ldi	r26, 0x80	; 128
    1ad6:	bf e3       	ldi	r27, 0x3F	; 63
    1ad8:	89 8f       	std	Y+25, r24	; 0x19
    1ada:	9a 8f       	std	Y+26, r25	; 0x1a
    1adc:	ab 8f       	std	Y+27, r26	; 0x1b
    1ade:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ae2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	4a ef       	ldi	r20, 0xFA	; 250
    1aee:	54 e4       	ldi	r21, 0x44	; 68
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	8d 8b       	std	Y+21, r24	; 0x15
    1afa:	9e 8b       	std	Y+22, r25	; 0x16
    1afc:	af 8b       	std	Y+23, r26	; 0x17
    1afe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b00:	6d 89       	ldd	r22, Y+21	; 0x15
    1b02:	7e 89       	ldd	r23, Y+22	; 0x16
    1b04:	8f 89       	ldd	r24, Y+23	; 0x17
    1b06:	98 8d       	ldd	r25, Y+24	; 0x18
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e8       	ldi	r20, 0x80	; 128
    1b0e:	5f e3       	ldi	r21, 0x3F	; 63
    1b10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b14:	88 23       	and	r24, r24
    1b16:	2c f4       	brge	.+10     	; 0x1b22 <LCD_sendCommand+0x776>
		__ticks = 1;
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	9c 8b       	std	Y+20, r25	; 0x14
    1b1e:	8b 8b       	std	Y+19, r24	; 0x13
    1b20:	3f c0       	rjmp	.+126    	; 0x1ba0 <LCD_sendCommand+0x7f4>
	else if (__tmp > 65535)
    1b22:	6d 89       	ldd	r22, Y+21	; 0x15
    1b24:	7e 89       	ldd	r23, Y+22	; 0x16
    1b26:	8f 89       	ldd	r24, Y+23	; 0x17
    1b28:	98 8d       	ldd	r25, Y+24	; 0x18
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	3f ef       	ldi	r19, 0xFF	; 255
    1b2e:	4f e7       	ldi	r20, 0x7F	; 127
    1b30:	57 e4       	ldi	r21, 0x47	; 71
    1b32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b36:	18 16       	cp	r1, r24
    1b38:	4c f5       	brge	.+82     	; 0x1b8c <LCD_sendCommand+0x7e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e2       	ldi	r20, 0x20	; 32
    1b48:	51 e4       	ldi	r21, 0x41	; 65
    1b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	bc 01       	movw	r22, r24
    1b54:	cd 01       	movw	r24, r26
    1b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	9c 8b       	std	Y+20, r25	; 0x14
    1b60:	8b 8b       	std	Y+19, r24	; 0x13
    1b62:	0f c0       	rjmp	.+30     	; 0x1b82 <LCD_sendCommand+0x7d6>
    1b64:	88 ec       	ldi	r24, 0xC8	; 200
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	9a 8b       	std	Y+18, r25	; 0x12
    1b6a:	89 8b       	std	Y+17, r24	; 0x11
    1b6c:	89 89       	ldd	r24, Y+17	; 0x11
    1b6e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <LCD_sendCommand+0x7c4>
    1b74:	9a 8b       	std	Y+18, r25	; 0x12
    1b76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b78:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	9c 8b       	std	Y+20, r25	; 0x14
    1b80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b82:	8b 89       	ldd	r24, Y+19	; 0x13
    1b84:	9c 89       	ldd	r25, Y+20	; 0x14
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	69 f7       	brne	.-38     	; 0x1b64 <LCD_sendCommand+0x7b8>
    1b8a:	14 c0       	rjmp	.+40     	; 0x1bb4 <LCD_sendCommand+0x808>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b90:	8f 89       	ldd	r24, Y+23	; 0x17
    1b92:	98 8d       	ldd	r25, Y+24	; 0x18
    1b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9c 8b       	std	Y+20, r25	; 0x14
    1b9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba4:	98 8b       	std	Y+16, r25	; 0x10
    1ba6:	8f 87       	std	Y+15, r24	; 0x0f
    1ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1baa:	98 89       	ldd	r25, Y+16	; 0x10
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_sendCommand+0x800>
    1bb0:	98 8b       	std	Y+16, r25	; 0x10
    1bb2:	8f 87       	std	Y+15, r24	; 0x0f
			GET_BIT(command, 3));
#endif
	_delay_ms(1);
	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    1bb4:	83 e3       	ldi	r24, 0x33	; 51
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	64 e0       	ldi	r22, 0x04	; 4
    1bba:	40 e0       	ldi	r20, 0x00	; 0
    1bbc:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	a0 e8       	ldi	r26, 0x80	; 128
    1bc6:	bf e3       	ldi	r27, 0x3F	; 63
    1bc8:	8b 87       	std	Y+11, r24	; 0x0b
    1bca:	9c 87       	std	Y+12, r25	; 0x0c
    1bcc:	ad 87       	std	Y+13, r26	; 0x0d
    1bce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	4a ef       	ldi	r20, 0xFA	; 250
    1bde:	54 e4       	ldi	r21, 0x44	; 68
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	8f 83       	std	Y+7, r24	; 0x07
    1bea:	98 87       	std	Y+8, r25	; 0x08
    1bec:	a9 87       	std	Y+9, r26	; 0x09
    1bee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf2:	78 85       	ldd	r23, Y+8	; 0x08
    1bf4:	89 85       	ldd	r24, Y+9	; 0x09
    1bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e8       	ldi	r20, 0x80	; 128
    1bfe:	5f e3       	ldi	r21, 0x3F	; 63
    1c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c04:	88 23       	and	r24, r24
    1c06:	2c f4       	brge	.+10     	; 0x1c12 <LCD_sendCommand+0x866>
		__ticks = 1;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9e 83       	std	Y+6, r25	; 0x06
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
    1c10:	3f c0       	rjmp	.+126    	; 0x1c90 <LCD_sendCommand+0x8e4>
	else if (__tmp > 65535)
    1c12:	6f 81       	ldd	r22, Y+7	; 0x07
    1c14:	78 85       	ldd	r23, Y+8	; 0x08
    1c16:	89 85       	ldd	r24, Y+9	; 0x09
    1c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	3f ef       	ldi	r19, 0xFF	; 255
    1c1e:	4f e7       	ldi	r20, 0x7F	; 127
    1c20:	57 e4       	ldi	r21, 0x47	; 71
    1c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c26:	18 16       	cp	r1, r24
    1c28:	4c f5       	brge	.+82     	; 0x1c7c <LCD_sendCommand+0x8d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e2       	ldi	r20, 0x20	; 32
    1c38:	51 e4       	ldi	r21, 0x41	; 65
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	bc 01       	movw	r22, r24
    1c44:	cd 01       	movw	r24, r26
    1c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	9e 83       	std	Y+6, r25	; 0x06
    1c50:	8d 83       	std	Y+5, r24	; 0x05
    1c52:	0f c0       	rjmp	.+30     	; 0x1c72 <LCD_sendCommand+0x8c6>
    1c54:	88 ec       	ldi	r24, 0xC8	; 200
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9c 83       	std	Y+4, r25	; 0x04
    1c5a:	8b 83       	std	Y+3, r24	; 0x03
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <LCD_sendCommand+0x8b4>
    1c64:	9c 83       	std	Y+4, r25	; 0x04
    1c66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c68:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	9e 83       	std	Y+6, r25	; 0x06
    1c70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c72:	8d 81       	ldd	r24, Y+5	; 0x05
    1c74:	9e 81       	ldd	r25, Y+6	; 0x06
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	69 f7       	brne	.-38     	; 0x1c54 <LCD_sendCommand+0x8a8>
    1c7a:	14 c0       	rjmp	.+40     	; 0x1ca4 <LCD_sendCommand+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7e:	78 85       	ldd	r23, Y+8	; 0x08
    1c80:	89 85       	ldd	r24, Y+9	; 0x09
    1c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	9e 83       	std	Y+6, r25	; 0x06
    1c8e:	8d 83       	std	Y+5, r24	; 0x05
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	9e 81       	ldd	r25, Y+6	; 0x06
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <LCD_sendCommand+0x8f0>
    1ca0:	9a 83       	std	Y+2, r25	; 0x02
    1ca2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1ca4:	cd 59       	subi	r28, 0x9D	; 157
    1ca6:	df 4f       	sbci	r29, 0xFF	; 255
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	08 95       	ret

00001cbc <LCD_displayCharacter>:

// @brief Display the required character on the screen
// @param[in]  data  The data to be sent. 
void LCD_displayCharacter(uint8 data) {
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	c3 56       	subi	r28, 0x63	; 99
    1cca:	d0 40       	sbci	r29, 0x00	; 0
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	ed 59       	subi	r30, 0x9D	; 157
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	80 83       	st	Z, r24
	MCAL_GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);
    1cde:	83 e3       	ldi	r24, 0x33	; 51
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	61 e0       	ldi	r22, 0x01	; 1
    1ce4:	41 e0       	ldi	r20, 0x01	; 1
    1ce6:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
    1cea:	fe 01       	movw	r30, r28
    1cec:	e1 5a       	subi	r30, 0xA1	; 161
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	a0 e8       	ldi	r26, 0x80	; 128
    1cf6:	bf e3       	ldi	r27, 0x3F	; 63
    1cf8:	80 83       	st	Z, r24
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	a2 83       	std	Z+2, r26	; 0x02
    1cfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d00:	8e 01       	movw	r16, r28
    1d02:	05 5a       	subi	r16, 0xA5	; 165
    1d04:	1f 4f       	sbci	r17, 0xFF	; 255
    1d06:	fe 01       	movw	r30, r28
    1d08:	e1 5a       	subi	r30, 0xA1	; 161
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	4a ef       	ldi	r20, 0xFA	; 250
    1d1a:	54 e4       	ldi	r21, 0x44	; 68
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	f8 01       	movw	r30, r16
    1d26:	80 83       	st	Z, r24
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	a2 83       	std	Z+2, r26	; 0x02
    1d2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e5 5a       	subi	r30, 0xA5	; 165
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	60 81       	ld	r22, Z
    1d36:	71 81       	ldd	r23, Z+1	; 0x01
    1d38:	82 81       	ldd	r24, Z+2	; 0x02
    1d3a:	93 81       	ldd	r25, Z+3	; 0x03
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	44 f4       	brge	.+16     	; 0x1d5c <LCD_displayCharacter+0xa0>
		__ticks = 1;
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e7 5a       	subi	r30, 0xA7	; 167
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	91 83       	std	Z+1, r25	; 0x01
    1d58:	80 83       	st	Z, r24
    1d5a:	64 c0       	rjmp	.+200    	; 0x1e24 <LCD_displayCharacter+0x168>
	else if (__tmp > 65535)
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e5 5a       	subi	r30, 0xA5	; 165
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	60 81       	ld	r22, Z
    1d64:	71 81       	ldd	r23, Z+1	; 0x01
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	3f ef       	ldi	r19, 0xFF	; 255
    1d6e:	4f e7       	ldi	r20, 0x7F	; 127
    1d70:	57 e4       	ldi	r21, 0x47	; 71
    1d72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d76:	18 16       	cp	r1, r24
    1d78:	0c f0       	brlt	.+2      	; 0x1d7c <LCD_displayCharacter+0xc0>
    1d7a:	43 c0       	rjmp	.+134    	; 0x1e02 <LCD_displayCharacter+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e1 5a       	subi	r30, 0xA1	; 161
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	60 81       	ld	r22, Z
    1d84:	71 81       	ldd	r23, Z+1	; 0x01
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	93 81       	ldd	r25, Z+3	; 0x03
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e2       	ldi	r20, 0x20	; 32
    1d90:	51 e4       	ldi	r21, 0x41	; 65
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8e 01       	movw	r16, r28
    1d9c:	07 5a       	subi	r16, 0xA7	; 167
    1d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1da0:	bc 01       	movw	r22, r24
    1da2:	cd 01       	movw	r24, r26
    1da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	f8 01       	movw	r30, r16
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	80 83       	st	Z, r24
    1db2:	1f c0       	rjmp	.+62     	; 0x1df2 <LCD_displayCharacter+0x136>
    1db4:	fe 01       	movw	r30, r28
    1db6:	e9 5a       	subi	r30, 0xA9	; 169
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	88 ec       	ldi	r24, 0xC8	; 200
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	91 83       	std	Z+1, r25	; 0x01
    1dc0:	80 83       	st	Z, r24
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e9 5a       	subi	r30, 0xA9	; 169
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	80 81       	ld	r24, Z
    1dca:	91 81       	ldd	r25, Z+1	; 0x01
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <LCD_displayCharacter+0x110>
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e9 5a       	subi	r30, 0xA9	; 169
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	91 83       	std	Z+1, r25	; 0x01
    1dd8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dda:	de 01       	movw	r26, r28
    1ddc:	a7 5a       	subi	r26, 0xA7	; 167
    1dde:	bf 4f       	sbci	r27, 0xFF	; 255
    1de0:	fe 01       	movw	r30, r28
    1de2:	e7 5a       	subi	r30, 0xA7	; 167
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 81       	ld	r24, Z
    1de8:	91 81       	ldd	r25, Z+1	; 0x01
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	11 96       	adiw	r26, 0x01	; 1
    1dee:	9c 93       	st	X, r25
    1df0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df2:	fe 01       	movw	r30, r28
    1df4:	e7 5a       	subi	r30, 0xA7	; 167
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	91 81       	ldd	r25, Z+1	; 0x01
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	d1 f6       	brne	.-76     	; 0x1db4 <LCD_displayCharacter+0xf8>
    1e00:	27 c0       	rjmp	.+78     	; 0x1e50 <LCD_displayCharacter+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e02:	8e 01       	movw	r16, r28
    1e04:	07 5a       	subi	r16, 0xA7	; 167
    1e06:	1f 4f       	sbci	r17, 0xFF	; 255
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e5 5a       	subi	r30, 0xA5	; 165
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	60 81       	ld	r22, Z
    1e10:	71 81       	ldd	r23, Z+1	; 0x01
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	f8 01       	movw	r30, r16
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	80 83       	st	Z, r24
    1e24:	de 01       	movw	r26, r28
    1e26:	ab 5a       	subi	r26, 0xAB	; 171
    1e28:	bf 4f       	sbci	r27, 0xFF	; 255
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e7 5a       	subi	r30, 0xA7	; 167
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	8d 93       	st	X+, r24
    1e36:	9c 93       	st	X, r25
    1e38:	fe 01       	movw	r30, r28
    1e3a:	eb 5a       	subi	r30, 0xAB	; 171
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	91 81       	ldd	r25, Z+1	; 0x01
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <LCD_displayCharacter+0x186>
    1e46:	fe 01       	movw	r30, r28
    1e48:	eb 5a       	subi	r30, 0xAB	; 171
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	91 83       	std	Z+1, r25	; 0x01
    1e4e:	80 83       	st	Z, r24
	_delay_ms(1);

	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    1e50:	83 e3       	ldi	r24, 0x33	; 51
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	64 e0       	ldi	r22, 0x04	; 4
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	ef 5a       	subi	r30, 0xAF	; 175
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e8       	ldi	r26, 0x80	; 128
    1e68:	bf e3       	ldi	r27, 0x3F	; 63
    1e6a:	80 83       	st	Z, r24
    1e6c:	91 83       	std	Z+1, r25	; 0x01
    1e6e:	a2 83       	std	Z+2, r26	; 0x02
    1e70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	8e 01       	movw	r16, r28
    1e74:	03 5b       	subi	r16, 0xB3	; 179
    1e76:	1f 4f       	sbci	r17, 0xFF	; 255
    1e78:	fe 01       	movw	r30, r28
    1e7a:	ef 5a       	subi	r30, 0xAF	; 175
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a ef       	ldi	r20, 0xFA	; 250
    1e8c:	54 e4       	ldi	r21, 0x44	; 68
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	f8 01       	movw	r30, r16
    1e98:	80 83       	st	Z, r24
    1e9a:	91 83       	std	Z+1, r25	; 0x01
    1e9c:	a2 83       	std	Z+2, r26	; 0x02
    1e9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e3 5b       	subi	r30, 0xB3	; 179
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	60 81       	ld	r22, Z
    1ea8:	71 81       	ldd	r23, Z+1	; 0x01
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	93 81       	ldd	r25, Z+3	; 0x03
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e8       	ldi	r20, 0x80	; 128
    1eb4:	5f e3       	ldi	r21, 0x3F	; 63
    1eb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eba:	88 23       	and	r24, r24
    1ebc:	44 f4       	brge	.+16     	; 0x1ece <LCD_displayCharacter+0x212>
		__ticks = 1;
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e5 5b       	subi	r30, 0xB5	; 181
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	91 83       	std	Z+1, r25	; 0x01
    1eca:	80 83       	st	Z, r24
    1ecc:	64 c0       	rjmp	.+200    	; 0x1f96 <LCD_displayCharacter+0x2da>
	else if (__tmp > 65535)
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e3 5b       	subi	r30, 0xB3	; 179
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	60 81       	ld	r22, Z
    1ed6:	71 81       	ldd	r23, Z+1	; 0x01
    1ed8:	82 81       	ldd	r24, Z+2	; 0x02
    1eda:	93 81       	ldd	r25, Z+3	; 0x03
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	3f ef       	ldi	r19, 0xFF	; 255
    1ee0:	4f e7       	ldi	r20, 0x7F	; 127
    1ee2:	57 e4       	ldi	r21, 0x47	; 71
    1ee4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee8:	18 16       	cp	r1, r24
    1eea:	0c f0       	brlt	.+2      	; 0x1eee <LCD_displayCharacter+0x232>
    1eec:	43 c0       	rjmp	.+134    	; 0x1f74 <LCD_displayCharacter+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eee:	fe 01       	movw	r30, r28
    1ef0:	ef 5a       	subi	r30, 0xAF	; 175
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	60 81       	ld	r22, Z
    1ef6:	71 81       	ldd	r23, Z+1	; 0x01
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e2       	ldi	r20, 0x20	; 32
    1f02:	51 e4       	ldi	r21, 0x41	; 65
    1f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	8e 01       	movw	r16, r28
    1f0e:	05 5b       	subi	r16, 0xB5	; 181
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	f8 01       	movw	r30, r16
    1f20:	91 83       	std	Z+1, r25	; 0x01
    1f22:	80 83       	st	Z, r24
    1f24:	1f c0       	rjmp	.+62     	; 0x1f64 <LCD_displayCharacter+0x2a8>
    1f26:	fe 01       	movw	r30, r28
    1f28:	e7 5b       	subi	r30, 0xB7	; 183
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	88 ec       	ldi	r24, 0xC8	; 200
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	80 83       	st	Z, r24
    1f34:	fe 01       	movw	r30, r28
    1f36:	e7 5b       	subi	r30, 0xB7	; 183
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	80 81       	ld	r24, Z
    1f3c:	91 81       	ldd	r25, Z+1	; 0x01
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <LCD_displayCharacter+0x282>
    1f42:	fe 01       	movw	r30, r28
    1f44:	e7 5b       	subi	r30, 0xB7	; 183
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4c:	de 01       	movw	r26, r28
    1f4e:	a5 5b       	subi	r26, 0xB5	; 181
    1f50:	bf 4f       	sbci	r27, 0xFF	; 255
    1f52:	fe 01       	movw	r30, r28
    1f54:	e5 5b       	subi	r30, 0xB5	; 181
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	11 96       	adiw	r26, 0x01	; 1
    1f60:	9c 93       	st	X, r25
    1f62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f64:	fe 01       	movw	r30, r28
    1f66:	e5 5b       	subi	r30, 0xB5	; 181
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 81       	ld	r24, Z
    1f6c:	91 81       	ldd	r25, Z+1	; 0x01
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	d1 f6       	brne	.-76     	; 0x1f26 <LCD_displayCharacter+0x26a>
    1f72:	27 c0       	rjmp	.+78     	; 0x1fc2 <LCD_displayCharacter+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f74:	8e 01       	movw	r16, r28
    1f76:	05 5b       	subi	r16, 0xB5	; 181
    1f78:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e3 5b       	subi	r30, 0xB3	; 179
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	f8 01       	movw	r30, r16
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	80 83       	st	Z, r24
    1f96:	de 01       	movw	r26, r28
    1f98:	a9 5b       	subi	r26, 0xB9	; 185
    1f9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e5 5b       	subi	r30, 0xB5	; 181
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 81       	ld	r24, Z
    1fa4:	91 81       	ldd	r25, Z+1	; 0x01
    1fa6:	8d 93       	st	X+, r24
    1fa8:	9c 93       	st	X, r25
    1faa:	fe 01       	movw	r30, r28
    1fac:	e9 5b       	subi	r30, 0xB9	; 185
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	80 81       	ld	r24, Z
    1fb2:	91 81       	ldd	r25, Z+1	; 0x01
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <LCD_displayCharacter+0x2f8>
    1fb8:	fe 01       	movw	r30, r28
    1fba:	e9 5b       	subi	r30, 0xB9	; 185
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	80 83       	st	Z, r24
	_delay_ms(1);
#if LCD_BITS == 8
	MCAL_GPIO_writePort(LCD_DATA_PORT, (MCAL_GPIO_readPort(LCD_DATA_PORT) & 0xFF00)| data);
#elif LCD_BITS == 4
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN, GET_BIT(data, 4));
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	ed 59       	subi	r30, 0x9D	; 157
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	80 81       	ld	r24, Z
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	80 71       	andi	r24, 0x10	; 16
    1fd0:	90 70       	andi	r25, 0x00	; 0
    1fd2:	95 95       	asr	r25
    1fd4:	87 95       	ror	r24
    1fd6:	95 95       	asr	r25
    1fd8:	87 95       	ror	r24
    1fda:	95 95       	asr	r25
    1fdc:	87 95       	ror	r24
    1fde:	95 95       	asr	r25
    1fe0:	87 95       	ror	r24
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	83 e3       	ldi	r24, 0x33	; 51
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	60 e1       	ldi	r22, 0x10	; 16
    1fea:	42 2f       	mov	r20, r18
    1fec:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 1,
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	ed 59       	subi	r30, 0x9D	; 157
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	80 81       	ld	r24, Z
    1ff8:	88 2f       	mov	r24, r24
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	80 72       	andi	r24, 0x20	; 32
    1ffe:	90 70       	andi	r25, 0x00	; 0
    2000:	95 95       	asr	r25
    2002:	87 95       	ror	r24
    2004:	95 95       	asr	r25
    2006:	87 95       	ror	r24
    2008:	95 95       	asr	r25
    200a:	87 95       	ror	r24
    200c:	95 95       	asr	r25
    200e:	87 95       	ror	r24
    2010:	95 95       	asr	r25
    2012:	87 95       	ror	r24
    2014:	28 2f       	mov	r18, r24
    2016:	83 e3       	ldi	r24, 0x33	; 51
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	60 e2       	ldi	r22, 0x20	; 32
    201c:	42 2f       	mov	r20, r18
    201e:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
			GET_BIT(data, 5));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 2,
    2022:	fe 01       	movw	r30, r28
    2024:	ed 59       	subi	r30, 0x9D	; 157
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	80 81       	ld	r24, Z
    202a:	88 2f       	mov	r24, r24
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	80 74       	andi	r24, 0x40	; 64
    2030:	90 70       	andi	r25, 0x00	; 0
    2032:	08 2e       	mov	r0, r24
    2034:	89 2f       	mov	r24, r25
    2036:	00 0c       	add	r0, r0
    2038:	88 1f       	adc	r24, r24
    203a:	99 0b       	sbc	r25, r25
    203c:	00 0c       	add	r0, r0
    203e:	88 1f       	adc	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	28 2f       	mov	r18, r24
    2044:	83 e3       	ldi	r24, 0x33	; 51
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	60 e4       	ldi	r22, 0x40	; 64
    204a:	42 2f       	mov	r20, r18
    204c:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
			GET_BIT(data, 6));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 3,
    2050:	fe 01       	movw	r30, r28
    2052:	ed 59       	subi	r30, 0x9D	; 157
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 81       	ld	r24, Z
    2058:	28 2f       	mov	r18, r24
    205a:	22 1f       	adc	r18, r18
    205c:	22 27       	eor	r18, r18
    205e:	22 1f       	adc	r18, r18
    2060:	83 e3       	ldi	r24, 0x33	; 51
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	60 e8       	ldi	r22, 0x80	; 128
    2066:	42 2f       	mov	r20, r18
    2068:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
    206c:	fe 01       	movw	r30, r28
    206e:	ed 5b       	subi	r30, 0xBD	; 189
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a0 e8       	ldi	r26, 0x80	; 128
    2078:	bf e3       	ldi	r27, 0x3F	; 63
    207a:	80 83       	st	Z, r24
    207c:	91 83       	std	Z+1, r25	; 0x01
    207e:	a2 83       	std	Z+2, r26	; 0x02
    2080:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2082:	8e 01       	movw	r16, r28
    2084:	01 5c       	subi	r16, 0xC1	; 193
    2086:	1f 4f       	sbci	r17, 0xFF	; 255
    2088:	fe 01       	movw	r30, r28
    208a:	ed 5b       	subi	r30, 0xBD	; 189
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	60 81       	ld	r22, Z
    2090:	71 81       	ldd	r23, Z+1	; 0x01
    2092:	82 81       	ldd	r24, Z+2	; 0x02
    2094:	93 81       	ldd	r25, Z+3	; 0x03
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	4a ef       	ldi	r20, 0xFA	; 250
    209c:	54 e4       	ldi	r21, 0x44	; 68
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	f8 01       	movw	r30, r16
    20a8:	80 83       	st	Z, r24
    20aa:	91 83       	std	Z+1, r25	; 0x01
    20ac:	a2 83       	std	Z+2, r26	; 0x02
    20ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20b0:	fe 01       	movw	r30, r28
    20b2:	ff 96       	adiw	r30, 0x3f	; 63
    20b4:	60 81       	ld	r22, Z
    20b6:	71 81       	ldd	r23, Z+1	; 0x01
    20b8:	82 81       	ldd	r24, Z+2	; 0x02
    20ba:	93 81       	ldd	r25, Z+3	; 0x03
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e8       	ldi	r20, 0x80	; 128
    20c2:	5f e3       	ldi	r21, 0x3F	; 63
    20c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c8:	88 23       	and	r24, r24
    20ca:	2c f4       	brge	.+10     	; 0x20d6 <LCD_displayCharacter+0x41a>
		__ticks = 1;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9e af       	std	Y+62, r25	; 0x3e
    20d2:	8d af       	std	Y+61, r24	; 0x3d
    20d4:	46 c0       	rjmp	.+140    	; 0x2162 <LCD_displayCharacter+0x4a6>
	else if (__tmp > 65535)
    20d6:	fe 01       	movw	r30, r28
    20d8:	ff 96       	adiw	r30, 0x3f	; 63
    20da:	60 81       	ld	r22, Z
    20dc:	71 81       	ldd	r23, Z+1	; 0x01
    20de:	82 81       	ldd	r24, Z+2	; 0x02
    20e0:	93 81       	ldd	r25, Z+3	; 0x03
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	3f ef       	ldi	r19, 0xFF	; 255
    20e6:	4f e7       	ldi	r20, 0x7F	; 127
    20e8:	57 e4       	ldi	r21, 0x47	; 71
    20ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ee:	18 16       	cp	r1, r24
    20f0:	64 f5       	brge	.+88     	; 0x214a <LCD_displayCharacter+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f2:	fe 01       	movw	r30, r28
    20f4:	ed 5b       	subi	r30, 0xBD	; 189
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	60 81       	ld	r22, Z
    20fa:	71 81       	ldd	r23, Z+1	; 0x01
    20fc:	82 81       	ldd	r24, Z+2	; 0x02
    20fe:	93 81       	ldd	r25, Z+3	; 0x03
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e2       	ldi	r20, 0x20	; 32
    2106:	51 e4       	ldi	r21, 0x41	; 65
    2108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	bc 01       	movw	r22, r24
    2112:	cd 01       	movw	r24, r26
    2114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	9e af       	std	Y+62, r25	; 0x3e
    211e:	8d af       	std	Y+61, r24	; 0x3d
    2120:	0f c0       	rjmp	.+30     	; 0x2140 <LCD_displayCharacter+0x484>
    2122:	88 ec       	ldi	r24, 0xC8	; 200
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9c af       	std	Y+60, r25	; 0x3c
    2128:	8b af       	std	Y+59, r24	; 0x3b
    212a:	8b ad       	ldd	r24, Y+59	; 0x3b
    212c:	9c ad       	ldd	r25, Y+60	; 0x3c
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_displayCharacter+0x472>
    2132:	9c af       	std	Y+60, r25	; 0x3c
    2134:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2136:	8d ad       	ldd	r24, Y+61	; 0x3d
    2138:	9e ad       	ldd	r25, Y+62	; 0x3e
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	9e af       	std	Y+62, r25	; 0x3e
    213e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2140:	8d ad       	ldd	r24, Y+61	; 0x3d
    2142:	9e ad       	ldd	r25, Y+62	; 0x3e
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	69 f7       	brne	.-38     	; 0x2122 <LCD_displayCharacter+0x466>
    2148:	16 c0       	rjmp	.+44     	; 0x2176 <LCD_displayCharacter+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214a:	fe 01       	movw	r30, r28
    214c:	ff 96       	adiw	r30, 0x3f	; 63
    214e:	60 81       	ld	r22, Z
    2150:	71 81       	ldd	r23, Z+1	; 0x01
    2152:	82 81       	ldd	r24, Z+2	; 0x02
    2154:	93 81       	ldd	r25, Z+3	; 0x03
    2156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	9e af       	std	Y+62, r25	; 0x3e
    2160:	8d af       	std	Y+61, r24	; 0x3d
    2162:	8d ad       	ldd	r24, Y+61	; 0x3d
    2164:	9e ad       	ldd	r25, Y+62	; 0x3e
    2166:	9a af       	std	Y+58, r25	; 0x3a
    2168:	89 af       	std	Y+57, r24	; 0x39
    216a:	89 ad       	ldd	r24, Y+57	; 0x39
    216c:	9a ad       	ldd	r25, Y+58	; 0x3a
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <LCD_displayCharacter+0x4b2>
    2172:	9a af       	std	Y+58, r25	; 0x3a
    2174:	89 af       	std	Y+57, r24	; 0x39
			GET_BIT(data, 7));
	_delay_ms(1);
	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    2176:	83 e3       	ldi	r24, 0x33	; 51
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	64 e0       	ldi	r22, 0x04	; 4
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	a0 e8       	ldi	r26, 0x80	; 128
    2188:	bf e3       	ldi	r27, 0x3F	; 63
    218a:	8d ab       	std	Y+53, r24	; 0x35
    218c:	9e ab       	std	Y+54, r25	; 0x36
    218e:	af ab       	std	Y+55, r26	; 0x37
    2190:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2192:	6d a9       	ldd	r22, Y+53	; 0x35
    2194:	7e a9       	ldd	r23, Y+54	; 0x36
    2196:	8f a9       	ldd	r24, Y+55	; 0x37
    2198:	98 ad       	ldd	r25, Y+56	; 0x38
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a ef       	ldi	r20, 0xFA	; 250
    21a0:	54 e4       	ldi	r21, 0x44	; 68
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	89 ab       	std	Y+49, r24	; 0x31
    21ac:	9a ab       	std	Y+50, r25	; 0x32
    21ae:	ab ab       	std	Y+51, r26	; 0x33
    21b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21b2:	69 a9       	ldd	r22, Y+49	; 0x31
    21b4:	7a a9       	ldd	r23, Y+50	; 0x32
    21b6:	8b a9       	ldd	r24, Y+51	; 0x33
    21b8:	9c a9       	ldd	r25, Y+52	; 0x34
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e8       	ldi	r20, 0x80	; 128
    21c0:	5f e3       	ldi	r21, 0x3F	; 63
    21c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c6:	88 23       	and	r24, r24
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <LCD_displayCharacter+0x518>
		__ticks = 1;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	98 ab       	std	Y+48, r25	; 0x30
    21d0:	8f a7       	std	Y+47, r24	; 0x2f
    21d2:	3f c0       	rjmp	.+126    	; 0x2252 <LCD_displayCharacter+0x596>
	else if (__tmp > 65535)
    21d4:	69 a9       	ldd	r22, Y+49	; 0x31
    21d6:	7a a9       	ldd	r23, Y+50	; 0x32
    21d8:	8b a9       	ldd	r24, Y+51	; 0x33
    21da:	9c a9       	ldd	r25, Y+52	; 0x34
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	3f ef       	ldi	r19, 0xFF	; 255
    21e0:	4f e7       	ldi	r20, 0x7F	; 127
    21e2:	57 e4       	ldi	r21, 0x47	; 71
    21e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e8:	18 16       	cp	r1, r24
    21ea:	4c f5       	brge	.+82     	; 0x223e <LCD_displayCharacter+0x582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ec:	6d a9       	ldd	r22, Y+53	; 0x35
    21ee:	7e a9       	ldd	r23, Y+54	; 0x36
    21f0:	8f a9       	ldd	r24, Y+55	; 0x37
    21f2:	98 ad       	ldd	r25, Y+56	; 0x38
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e2       	ldi	r20, 0x20	; 32
    21fa:	51 e4       	ldi	r21, 0x41	; 65
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	98 ab       	std	Y+48, r25	; 0x30
    2212:	8f a7       	std	Y+47, r24	; 0x2f
    2214:	0f c0       	rjmp	.+30     	; 0x2234 <LCD_displayCharacter+0x578>
    2216:	88 ec       	ldi	r24, 0xC8	; 200
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9e a7       	std	Y+46, r25	; 0x2e
    221c:	8d a7       	std	Y+45, r24	; 0x2d
    221e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2220:	9e a5       	ldd	r25, Y+46	; 0x2e
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <LCD_displayCharacter+0x566>
    2226:	9e a7       	std	Y+46, r25	; 0x2e
    2228:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222a:	8f a5       	ldd	r24, Y+47	; 0x2f
    222c:	98 a9       	ldd	r25, Y+48	; 0x30
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	98 ab       	std	Y+48, r25	; 0x30
    2232:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2234:	8f a5       	ldd	r24, Y+47	; 0x2f
    2236:	98 a9       	ldd	r25, Y+48	; 0x30
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	69 f7       	brne	.-38     	; 0x2216 <LCD_displayCharacter+0x55a>
    223c:	14 c0       	rjmp	.+40     	; 0x2266 <LCD_displayCharacter+0x5aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223e:	69 a9       	ldd	r22, Y+49	; 0x31
    2240:	7a a9       	ldd	r23, Y+50	; 0x32
    2242:	8b a9       	ldd	r24, Y+51	; 0x33
    2244:	9c a9       	ldd	r25, Y+52	; 0x34
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	98 ab       	std	Y+48, r25	; 0x30
    2250:	8f a7       	std	Y+47, r24	; 0x2f
    2252:	8f a5       	ldd	r24, Y+47	; 0x2f
    2254:	98 a9       	ldd	r25, Y+48	; 0x30
    2256:	9c a7       	std	Y+44, r25	; 0x2c
    2258:	8b a7       	std	Y+43, r24	; 0x2b
    225a:	8b a5       	ldd	r24, Y+43	; 0x2b
    225c:	9c a5       	ldd	r25, Y+44	; 0x2c
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <LCD_displayCharacter+0x5a2>
    2262:	9c a7       	std	Y+44, r25	; 0x2c
    2264:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    2266:	83 e3       	ldi	r24, 0x33	; 51
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	64 e0       	ldi	r22, 0x04	; 4
    226c:	41 e0       	ldi	r20, 0x01	; 1
    226e:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	a0 e8       	ldi	r26, 0x80	; 128
    2278:	bf e3       	ldi	r27, 0x3F	; 63
    227a:	8f a3       	std	Y+39, r24	; 0x27
    227c:	98 a7       	std	Y+40, r25	; 0x28
    227e:	a9 a7       	std	Y+41, r26	; 0x29
    2280:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2282:	6f a1       	ldd	r22, Y+39	; 0x27
    2284:	78 a5       	ldd	r23, Y+40	; 0x28
    2286:	89 a5       	ldd	r24, Y+41	; 0x29
    2288:	9a a5       	ldd	r25, Y+42	; 0x2a
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	4a ef       	ldi	r20, 0xFA	; 250
    2290:	54 e4       	ldi	r21, 0x44	; 68
    2292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	8b a3       	std	Y+35, r24	; 0x23
    229c:	9c a3       	std	Y+36, r25	; 0x24
    229e:	ad a3       	std	Y+37, r26	; 0x25
    22a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22a2:	6b a1       	ldd	r22, Y+35	; 0x23
    22a4:	7c a1       	ldd	r23, Y+36	; 0x24
    22a6:	8d a1       	ldd	r24, Y+37	; 0x25
    22a8:	9e a1       	ldd	r25, Y+38	; 0x26
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e8       	ldi	r20, 0x80	; 128
    22b0:	5f e3       	ldi	r21, 0x3F	; 63
    22b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b6:	88 23       	and	r24, r24
    22b8:	2c f4       	brge	.+10     	; 0x22c4 <LCD_displayCharacter+0x608>
		__ticks = 1;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9a a3       	std	Y+34, r25	; 0x22
    22c0:	89 a3       	std	Y+33, r24	; 0x21
    22c2:	3f c0       	rjmp	.+126    	; 0x2342 <LCD_displayCharacter+0x686>
	else if (__tmp > 65535)
    22c4:	6b a1       	ldd	r22, Y+35	; 0x23
    22c6:	7c a1       	ldd	r23, Y+36	; 0x24
    22c8:	8d a1       	ldd	r24, Y+37	; 0x25
    22ca:	9e a1       	ldd	r25, Y+38	; 0x26
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	3f ef       	ldi	r19, 0xFF	; 255
    22d0:	4f e7       	ldi	r20, 0x7F	; 127
    22d2:	57 e4       	ldi	r21, 0x47	; 71
    22d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22d8:	18 16       	cp	r1, r24
    22da:	4c f5       	brge	.+82     	; 0x232e <LCD_displayCharacter+0x672>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22dc:	6f a1       	ldd	r22, Y+39	; 0x27
    22de:	78 a5       	ldd	r23, Y+40	; 0x28
    22e0:	89 a5       	ldd	r24, Y+41	; 0x29
    22e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e2       	ldi	r20, 0x20	; 32
    22ea:	51 e4       	ldi	r21, 0x41	; 65
    22ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	bc 01       	movw	r22, r24
    22f6:	cd 01       	movw	r24, r26
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	9a a3       	std	Y+34, r25	; 0x22
    2302:	89 a3       	std	Y+33, r24	; 0x21
    2304:	0f c0       	rjmp	.+30     	; 0x2324 <LCD_displayCharacter+0x668>
    2306:	88 ec       	ldi	r24, 0xC8	; 200
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	98 a3       	std	Y+32, r25	; 0x20
    230c:	8f 8f       	std	Y+31, r24	; 0x1f
    230e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2310:	98 a1       	ldd	r25, Y+32	; 0x20
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <LCD_displayCharacter+0x656>
    2316:	98 a3       	std	Y+32, r25	; 0x20
    2318:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231a:	89 a1       	ldd	r24, Y+33	; 0x21
    231c:	9a a1       	ldd	r25, Y+34	; 0x22
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	9a a3       	std	Y+34, r25	; 0x22
    2322:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2324:	89 a1       	ldd	r24, Y+33	; 0x21
    2326:	9a a1       	ldd	r25, Y+34	; 0x22
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	69 f7       	brne	.-38     	; 0x2306 <LCD_displayCharacter+0x64a>
    232c:	14 c0       	rjmp	.+40     	; 0x2356 <LCD_displayCharacter+0x69a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232e:	6b a1       	ldd	r22, Y+35	; 0x23
    2330:	7c a1       	ldd	r23, Y+36	; 0x24
    2332:	8d a1       	ldd	r24, Y+37	; 0x25
    2334:	9e a1       	ldd	r25, Y+38	; 0x26
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9a a3       	std	Y+34, r25	; 0x22
    2340:	89 a3       	std	Y+33, r24	; 0x21
    2342:	89 a1       	ldd	r24, Y+33	; 0x21
    2344:	9a a1       	ldd	r25, Y+34	; 0x22
    2346:	9e 8f       	std	Y+30, r25	; 0x1e
    2348:	8d 8f       	std	Y+29, r24	; 0x1d
    234a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    234c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <LCD_displayCharacter+0x692>
    2352:	9e 8f       	std	Y+30, r25	; 0x1e
    2354:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN, GET_BIT(data, 0));
    2356:	fe 01       	movw	r30, r28
    2358:	ed 59       	subi	r30, 0x9D	; 157
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	80 81       	ld	r24, Z
    235e:	28 2f       	mov	r18, r24
    2360:	21 70       	andi	r18, 0x01	; 1
    2362:	83 e3       	ldi	r24, 0x33	; 51
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	60 e1       	ldi	r22, 0x10	; 16
    2368:	42 2f       	mov	r20, r18
    236a:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 1,
    236e:	fe 01       	movw	r30, r28
    2370:	ed 59       	subi	r30, 0x9D	; 157
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	80 81       	ld	r24, Z
    2376:	88 2f       	mov	r24, r24
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	82 70       	andi	r24, 0x02	; 2
    237c:	90 70       	andi	r25, 0x00	; 0
    237e:	95 95       	asr	r25
    2380:	87 95       	ror	r24
    2382:	28 2f       	mov	r18, r24
    2384:	83 e3       	ldi	r24, 0x33	; 51
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	60 e2       	ldi	r22, 0x20	; 32
    238a:	42 2f       	mov	r20, r18
    238c:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
			GET_BIT(data, 1));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 2,
    2390:	fe 01       	movw	r30, r28
    2392:	ed 59       	subi	r30, 0x9D	; 157
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	80 81       	ld	r24, Z
    2398:	88 2f       	mov	r24, r24
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	84 70       	andi	r24, 0x04	; 4
    239e:	90 70       	andi	r25, 0x00	; 0
    23a0:	95 95       	asr	r25
    23a2:	87 95       	ror	r24
    23a4:	95 95       	asr	r25
    23a6:	87 95       	ror	r24
    23a8:	28 2f       	mov	r18, r24
    23aa:	83 e3       	ldi	r24, 0x33	; 51
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	60 e4       	ldi	r22, 0x40	; 64
    23b0:	42 2f       	mov	r20, r18
    23b2:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
			GET_BIT(data, 2));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 3,
    23b6:	fe 01       	movw	r30, r28
    23b8:	ed 59       	subi	r30, 0x9D	; 157
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 81       	ld	r24, Z
    23be:	88 2f       	mov	r24, r24
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	88 70       	andi	r24, 0x08	; 8
    23c4:	90 70       	andi	r25, 0x00	; 0
    23c6:	95 95       	asr	r25
    23c8:	87 95       	ror	r24
    23ca:	95 95       	asr	r25
    23cc:	87 95       	ror	r24
    23ce:	95 95       	asr	r25
    23d0:	87 95       	ror	r24
    23d2:	28 2f       	mov	r18, r24
    23d4:	83 e3       	ldi	r24, 0x33	; 51
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	60 e8       	ldi	r22, 0x80	; 128
    23da:	42 2f       	mov	r20, r18
    23dc:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	a0 e8       	ldi	r26, 0x80	; 128
    23e6:	bf e3       	ldi	r27, 0x3F	; 63
    23e8:	89 8f       	std	Y+25, r24	; 0x19
    23ea:	9a 8f       	std	Y+26, r25	; 0x1a
    23ec:	ab 8f       	std	Y+27, r26	; 0x1b
    23ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f0:	69 8d       	ldd	r22, Y+25	; 0x19
    23f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	4a ef       	ldi	r20, 0xFA	; 250
    23fe:	54 e4       	ldi	r21, 0x44	; 68
    2400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	8d 8b       	std	Y+21, r24	; 0x15
    240a:	9e 8b       	std	Y+22, r25	; 0x16
    240c:	af 8b       	std	Y+23, r26	; 0x17
    240e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2410:	6d 89       	ldd	r22, Y+21	; 0x15
    2412:	7e 89       	ldd	r23, Y+22	; 0x16
    2414:	8f 89       	ldd	r24, Y+23	; 0x17
    2416:	98 8d       	ldd	r25, Y+24	; 0x18
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e8       	ldi	r20, 0x80	; 128
    241e:	5f e3       	ldi	r21, 0x3F	; 63
    2420:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2424:	88 23       	and	r24, r24
    2426:	2c f4       	brge	.+10     	; 0x2432 <LCD_displayCharacter+0x776>
		__ticks = 1;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9c 8b       	std	Y+20, r25	; 0x14
    242e:	8b 8b       	std	Y+19, r24	; 0x13
    2430:	3f c0       	rjmp	.+126    	; 0x24b0 <LCD_displayCharacter+0x7f4>
	else if (__tmp > 65535)
    2432:	6d 89       	ldd	r22, Y+21	; 0x15
    2434:	7e 89       	ldd	r23, Y+22	; 0x16
    2436:	8f 89       	ldd	r24, Y+23	; 0x17
    2438:	98 8d       	ldd	r25, Y+24	; 0x18
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	3f ef       	ldi	r19, 0xFF	; 255
    243e:	4f e7       	ldi	r20, 0x7F	; 127
    2440:	57 e4       	ldi	r21, 0x47	; 71
    2442:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2446:	18 16       	cp	r1, r24
    2448:	4c f5       	brge	.+82     	; 0x249c <LCD_displayCharacter+0x7e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    244a:	69 8d       	ldd	r22, Y+25	; 0x19
    244c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    244e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2450:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e2       	ldi	r20, 0x20	; 32
    2458:	51 e4       	ldi	r21, 0x41	; 65
    245a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	bc 01       	movw	r22, r24
    2464:	cd 01       	movw	r24, r26
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	9c 8b       	std	Y+20, r25	; 0x14
    2470:	8b 8b       	std	Y+19, r24	; 0x13
    2472:	0f c0       	rjmp	.+30     	; 0x2492 <LCD_displayCharacter+0x7d6>
    2474:	88 ec       	ldi	r24, 0xC8	; 200
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	9a 8b       	std	Y+18, r25	; 0x12
    247a:	89 8b       	std	Y+17, r24	; 0x11
    247c:	89 89       	ldd	r24, Y+17	; 0x11
    247e:	9a 89       	ldd	r25, Y+18	; 0x12
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	f1 f7       	brne	.-4      	; 0x2480 <LCD_displayCharacter+0x7c4>
    2484:	9a 8b       	std	Y+18, r25	; 0x12
    2486:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2488:	8b 89       	ldd	r24, Y+19	; 0x13
    248a:	9c 89       	ldd	r25, Y+20	; 0x14
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	9c 8b       	std	Y+20, r25	; 0x14
    2490:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2492:	8b 89       	ldd	r24, Y+19	; 0x13
    2494:	9c 89       	ldd	r25, Y+20	; 0x14
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	69 f7       	brne	.-38     	; 0x2474 <LCD_displayCharacter+0x7b8>
    249a:	14 c0       	rjmp	.+40     	; 0x24c4 <LCD_displayCharacter+0x808>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249c:	6d 89       	ldd	r22, Y+21	; 0x15
    249e:	7e 89       	ldd	r23, Y+22	; 0x16
    24a0:	8f 89       	ldd	r24, Y+23	; 0x17
    24a2:	98 8d       	ldd	r25, Y+24	; 0x18
    24a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	9c 8b       	std	Y+20, r25	; 0x14
    24ae:	8b 8b       	std	Y+19, r24	; 0x13
    24b0:	8b 89       	ldd	r24, Y+19	; 0x13
    24b2:	9c 89       	ldd	r25, Y+20	; 0x14
    24b4:	98 8b       	std	Y+16, r25	; 0x10
    24b6:	8f 87       	std	Y+15, r24	; 0x0f
    24b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ba:	98 89       	ldd	r25, Y+16	; 0x10
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	f1 f7       	brne	.-4      	; 0x24bc <LCD_displayCharacter+0x800>
    24c0:	98 8b       	std	Y+16, r25	; 0x10
    24c2:	8f 87       	std	Y+15, r24	; 0x0f
			GET_BIT(data, 3));
#endif
	_delay_ms(1);
	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    24c4:	83 e3       	ldi	r24, 0x33	; 51
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	64 e0       	ldi	r22, 0x04	; 4
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	0e 94 26 07 	call	0xe4c	; 0xe4c <MCAL_GPIO_writePin>
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	a0 e8       	ldi	r26, 0x80	; 128
    24d6:	bf e3       	ldi	r27, 0x3F	; 63
    24d8:	8b 87       	std	Y+11, r24	; 0x0b
    24da:	9c 87       	std	Y+12, r25	; 0x0c
    24dc:	ad 87       	std	Y+13, r26	; 0x0d
    24de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	4a ef       	ldi	r20, 0xFA	; 250
    24ee:	54 e4       	ldi	r21, 0x44	; 68
    24f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	8f 83       	std	Y+7, r24	; 0x07
    24fa:	98 87       	std	Y+8, r25	; 0x08
    24fc:	a9 87       	std	Y+9, r26	; 0x09
    24fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2500:	6f 81       	ldd	r22, Y+7	; 0x07
    2502:	78 85       	ldd	r23, Y+8	; 0x08
    2504:	89 85       	ldd	r24, Y+9	; 0x09
    2506:	9a 85       	ldd	r25, Y+10	; 0x0a
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e8       	ldi	r20, 0x80	; 128
    250e:	5f e3       	ldi	r21, 0x3F	; 63
    2510:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2514:	88 23       	and	r24, r24
    2516:	2c f4       	brge	.+10     	; 0x2522 <LCD_displayCharacter+0x866>
		__ticks = 1;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	9e 83       	std	Y+6, r25	; 0x06
    251e:	8d 83       	std	Y+5, r24	; 0x05
    2520:	3f c0       	rjmp	.+126    	; 0x25a0 <LCD_displayCharacter+0x8e4>
	else if (__tmp > 65535)
    2522:	6f 81       	ldd	r22, Y+7	; 0x07
    2524:	78 85       	ldd	r23, Y+8	; 0x08
    2526:	89 85       	ldd	r24, Y+9	; 0x09
    2528:	9a 85       	ldd	r25, Y+10	; 0x0a
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	3f ef       	ldi	r19, 0xFF	; 255
    252e:	4f e7       	ldi	r20, 0x7F	; 127
    2530:	57 e4       	ldi	r21, 0x47	; 71
    2532:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2536:	18 16       	cp	r1, r24
    2538:	4c f5       	brge	.+82     	; 0x258c <LCD_displayCharacter+0x8d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253a:	6b 85       	ldd	r22, Y+11	; 0x0b
    253c:	7c 85       	ldd	r23, Y+12	; 0x0c
    253e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2540:	9e 85       	ldd	r25, Y+14	; 0x0e
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e2       	ldi	r20, 0x20	; 32
    2548:	51 e4       	ldi	r21, 0x41	; 65
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	bc 01       	movw	r22, r24
    2554:	cd 01       	movw	r24, r26
    2556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
    2562:	0f c0       	rjmp	.+30     	; 0x2582 <LCD_displayCharacter+0x8c6>
    2564:	88 ec       	ldi	r24, 0xC8	; 200
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9c 83       	std	Y+4, r25	; 0x04
    256a:	8b 83       	std	Y+3, r24	; 0x03
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	9c 81       	ldd	r25, Y+4	; 0x04
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <LCD_displayCharacter+0x8b4>
    2574:	9c 83       	std	Y+4, r25	; 0x04
    2576:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	9e 83       	std	Y+6, r25	; 0x06
    2580:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2582:	8d 81       	ldd	r24, Y+5	; 0x05
    2584:	9e 81       	ldd	r25, Y+6	; 0x06
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	69 f7       	brne	.-38     	; 0x2564 <LCD_displayCharacter+0x8a8>
    258a:	14 c0       	rjmp	.+40     	; 0x25b4 <LCD_displayCharacter+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258c:	6f 81       	ldd	r22, Y+7	; 0x07
    258e:	78 85       	ldd	r23, Y+8	; 0x08
    2590:	89 85       	ldd	r24, Y+9	; 0x09
    2592:	9a 85       	ldd	r25, Y+10	; 0x0a
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9e 83       	std	Y+6, r25	; 0x06
    259e:	8d 83       	std	Y+5, r24	; 0x05
    25a0:	8d 81       	ldd	r24, Y+5	; 0x05
    25a2:	9e 81       	ldd	r25, Y+6	; 0x06
    25a4:	9a 83       	std	Y+2, r25	; 0x02
    25a6:	89 83       	std	Y+1, r24	; 0x01
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	9a 81       	ldd	r25, Y+2	; 0x02
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <LCD_displayCharacter+0x8f0>
    25b0:	9a 83       	std	Y+2, r25	; 0x02
    25b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    25b4:	cd 59       	subi	r28, 0x9D	; 157
    25b6:	df 4f       	sbci	r29, 0xFF	; 255
    25b8:	0f b6       	in	r0, 0x3f	; 63
    25ba:	f8 94       	cli
    25bc:	de bf       	out	0x3e, r29	; 62
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	cd bf       	out	0x3d, r28	; 61
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	1f 91       	pop	r17
    25c8:	0f 91       	pop	r16
    25ca:	08 95       	ret

000025cc <LCD_displayString>:

// @brief Display the required string on the screen
// @param[in]  Str  The string to get displayed. 
void LCD_displayString(const uint8 *Str) {
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <LCD_displayString+0x6>
    25d2:	0f 92       	push	r0
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	9b 83       	std	Y+3, r25	; 0x03
    25da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25dc:	19 82       	std	Y+1, r1	; 0x01
    25de:	0e c0       	rjmp	.+28     	; 0x25fc <LCD_displayString+0x30>
	while (Str[i] != '\0') {
		LCD_displayCharacter(Str[i]);
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	28 2f       	mov	r18, r24
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	8a 81       	ldd	r24, Y+2	; 0x02
    25e8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ea:	fc 01       	movw	r30, r24
    25ec:	e2 0f       	add	r30, r18
    25ee:	f3 1f       	adc	r31, r19
    25f0:	80 81       	ld	r24, Z
    25f2:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_displayCharacter>
		i++;
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	8f 5f       	subi	r24, 0xFF	; 255
    25fa:	89 83       	std	Y+1, r24	; 0x01

// @brief Display the required string on the screen
// @param[in]  Str  The string to get displayed. 
void LCD_displayString(const uint8 *Str) {
	uint8 i = 0;
	while (Str[i] != '\0') {
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	9b 81       	ldd	r25, Y+3	; 0x03
    2606:	fc 01       	movw	r30, r24
    2608:	e2 0f       	add	r30, r18
    260a:	f3 1f       	adc	r31, r19
    260c:	80 81       	ld	r24, Z
    260e:	88 23       	and	r24, r24
    2610:	39 f7       	brne	.-50     	; 0x25e0 <LCD_displayString+0x14>
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <LCD_moveCursor>:

// @brief Move the cursor to a specified row and column index on the screen
// @param[in]  row  The row index. 
// @param[in]  col  The column index. 
void LCD_moveCursor(uint8 row, uint8 col) {
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	00 d0       	rcall	.+0      	; 0x2624 <LCD_moveCursor+0x6>
    2624:	00 d0       	rcall	.+0      	; 0x2626 <LCD_moveCursor+0x8>
    2626:	0f 92       	push	r0
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	8a 83       	std	Y+2, r24	; 0x02
    262e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	// Calculate the required address in the LCD DDRAM 
	switch (row) {
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	28 2f       	mov	r18, r24
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	3d 83       	std	Y+5, r19	; 0x05
    2638:	2c 83       	std	Y+4, r18	; 0x04
    263a:	8c 81       	ldd	r24, Y+4	; 0x04
    263c:	9d 81       	ldd	r25, Y+5	; 0x05
    263e:	81 30       	cpi	r24, 0x01	; 1
    2640:	91 05       	cpc	r25, r1
    2642:	c1 f0       	breq	.+48     	; 0x2674 <LCD_moveCursor+0x56>
    2644:	2c 81       	ldd	r18, Y+4	; 0x04
    2646:	3d 81       	ldd	r19, Y+5	; 0x05
    2648:	22 30       	cpi	r18, 0x02	; 2
    264a:	31 05       	cpc	r19, r1
    264c:	2c f4       	brge	.+10     	; 0x2658 <LCD_moveCursor+0x3a>
    264e:	8c 81       	ldd	r24, Y+4	; 0x04
    2650:	9d 81       	ldd	r25, Y+5	; 0x05
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	61 f0       	breq	.+24     	; 0x266e <LCD_moveCursor+0x50>
    2656:	19 c0       	rjmp	.+50     	; 0x268a <LCD_moveCursor+0x6c>
    2658:	2c 81       	ldd	r18, Y+4	; 0x04
    265a:	3d 81       	ldd	r19, Y+5	; 0x05
    265c:	22 30       	cpi	r18, 0x02	; 2
    265e:	31 05       	cpc	r19, r1
    2660:	69 f0       	breq	.+26     	; 0x267c <LCD_moveCursor+0x5e>
    2662:	8c 81       	ldd	r24, Y+4	; 0x04
    2664:	9d 81       	ldd	r25, Y+5	; 0x05
    2666:	83 30       	cpi	r24, 0x03	; 3
    2668:	91 05       	cpc	r25, r1
    266a:	61 f0       	breq	.+24     	; 0x2684 <LCD_moveCursor+0x66>
    266c:	0e c0       	rjmp	.+28     	; 0x268a <LCD_moveCursor+0x6c>
	case 0:
		lcd_memory_address = col;
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	0b c0       	rjmp	.+22     	; 0x268a <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	80 5c       	subi	r24, 0xC0	; 192
    2678:	89 83       	std	Y+1, r24	; 0x01
    267a:	07 c0       	rjmp	.+14     	; 0x268a <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	80 5f       	subi	r24, 0xF0	; 240
    2680:	89 83       	std	Y+1, r24	; 0x01
    2682:	03 c0       	rjmp	.+6      	; 0x268a <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	80 5b       	subi	r24, 0xB0	; 176
    2688:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	// Move the LCD cursor to this specific address 
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	80 68       	ori	r24, 0x80	; 128
    268e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <LCD_sendCommand>
}
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <LCD_displayStringRowColumn>:

// @brief Display the required string in a specified row and column index on the screen
// @param[in]  row  The row index. 
// @param[in]  col  The column index. 
// @param[in]  Str  The string to get displayed. 
void LCD_displayStringRowColumn(uint8 row, uint8 col, const uint8 *Str) {
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <LCD_displayStringRowColumn+0x6>
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <LCD_displayStringRowColumn+0x8>
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	6a 83       	std	Y+2, r22	; 0x02
    26b2:	5c 83       	std	Y+4, r21	; 0x04
    26b4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); // go to to the required LCD position 
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	6a 81       	ldd	r22, Y+2	; 0x02
    26ba:	0e 94 0f 13 	call	0x261e	; 0x261e <LCD_moveCursor>
	LCD_displayString(Str); // display the string 
    26be:	8b 81       	ldd	r24, Y+3	; 0x03
    26c0:	9c 81       	ldd	r25, Y+4	; 0x04
    26c2:	0e 94 e6 12 	call	0x25cc	; 0x25cc <LCD_displayString>
}
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	08 95       	ret

000026d4 <LCD_shiftDisplayRight>:

// @brief Shift display content to the right.
void LCD_shiftDisplayRight(void) {
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_RIGHT);
    26dc:	8c e1       	ldi	r24, 0x1C	; 28
    26de:	0e 94 d6 09 	call	0x13ac	; 0x13ac <LCD_sendCommand>
}
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	08 95       	ret

000026e8 <LCD_shiftDisplayLeft>:

// @brief Shift display content to the left.
void LCD_shiftDisplayLeft(void) {
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_LEFT);
    26f0:	88 e1       	ldi	r24, 0x18	; 24
    26f2:	0e 94 d6 09 	call	0x13ac	; 0x13ac <LCD_sendCommand>
}
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <LCD_intgerToString>:

// @brief Display the required decimal value on the screen
// @param[in]  data  The int data to be displayed. 
void LCD_intgerToString(sint32 data) {
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	64 97       	sbiw	r28, 0x14	; 20
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	69 8b       	std	Y+17, r22	; 0x11
    2712:	7a 8b       	std	Y+18, r23	; 0x12
    2714:	8b 8b       	std	Y+19, r24	; 0x13
    2716:	9c 8b       	std	Y+20, r25	; 0x14
	uint8 buff[16]; // String to hold the ascii result 
	itoa(data, buff, 10); // Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal 
    2718:	89 89       	ldd	r24, Y+17	; 0x11
    271a:	9a 89       	ldd	r25, Y+18	; 0x12
    271c:	9e 01       	movw	r18, r28
    271e:	2f 5f       	subi	r18, 0xFF	; 255
    2720:	3f 4f       	sbci	r19, 0xFF	; 255
    2722:	b9 01       	movw	r22, r18
    2724:	4a e0       	ldi	r20, 0x0A	; 10
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <itoa>
	LCD_displayString(buff); // Display the string 
    272c:	ce 01       	movw	r24, r28
    272e:	01 96       	adiw	r24, 0x01	; 1
    2730:	0e 94 e6 12 	call	0x25cc	; 0x25cc <LCD_displayString>
}
    2734:	64 96       	adiw	r28, 0x14	; 20
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	cd bf       	out	0x3d, r28	; 61
    2740:	cf 91       	pop	r28
    2742:	df 91       	pop	r29
    2744:	08 95       	ret

00002746 <LCD_floatToString>:

// @brief Display the required float value on the screen
// @param[in]  data  The float data to be displayed. 
void LCD_floatToString(float data) {
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	2c 97       	sbiw	r28, 0x0c	; 12
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	f8 94       	cli
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	69 87       	std	Y+9, r22	; 0x09
    275c:	7a 87       	std	Y+10, r23	; 0x0a
    275e:	8b 87       	std	Y+11, r24	; 0x0b
    2760:	9c 87       	std	Y+12, r25	; 0x0c
	sint32 decimalValue = (sint32) data;
    2762:	69 85       	ldd	r22, Y+9	; 0x09
    2764:	7a 85       	ldd	r23, Y+10	; 0x0a
    2766:	8b 85       	ldd	r24, Y+11	; 0x0b
    2768:	9c 85       	ldd	r25, Y+12	; 0x0c
    276a:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	8d 83       	std	Y+5, r24	; 0x05
    2774:	9e 83       	std	Y+6, r25	; 0x06
    2776:	af 83       	std	Y+7, r26	; 0x07
    2778:	b8 87       	std	Y+8, r27	; 0x08
	sint32 floatValue = (data - decimalValue) * 100;
    277a:	6d 81       	ldd	r22, Y+5	; 0x05
    277c:	7e 81       	ldd	r23, Y+6	; 0x06
    277e:	8f 81       	ldd	r24, Y+7	; 0x07
    2780:	98 85       	ldd	r25, Y+8	; 0x08
    2782:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2786:	9b 01       	movw	r18, r22
    2788:	ac 01       	movw	r20, r24
    278a:	69 85       	ldd	r22, Y+9	; 0x09
    278c:	7a 85       	ldd	r23, Y+10	; 0x0a
    278e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2790:	9c 85       	ldd	r25, Y+12	; 0x0c
    2792:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	bc 01       	movw	r22, r24
    279c:	cd 01       	movw	r24, r26
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	48 ec       	ldi	r20, 0xC8	; 200
    27a4:	52 e4       	ldi	r21, 0x42	; 66
    27a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	bc 01       	movw	r22, r24
    27b0:	cd 01       	movw	r24, r26
    27b2:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	9a 83       	std	Y+2, r25	; 0x02
    27be:	ab 83       	std	Y+3, r26	; 0x03
    27c0:	bc 83       	std	Y+4, r27	; 0x04
	LCD_intgerToString(decimalValue);
    27c2:	8d 81       	ldd	r24, Y+5	; 0x05
    27c4:	9e 81       	ldd	r25, Y+6	; 0x06
    27c6:	af 81       	ldd	r26, Y+7	; 0x07
    27c8:	b8 85       	ldd	r27, Y+8	; 0x08
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 7e 13 	call	0x26fc	; 0x26fc <LCD_intgerToString>
	LCD_displayCharacter('.');
    27d2:	8e e2       	ldi	r24, 0x2E	; 46
    27d4:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_displayCharacter>
	LCD_intgerToString(floatValue);
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	9a 81       	ldd	r25, Y+2	; 0x02
    27dc:	ab 81       	ldd	r26, Y+3	; 0x03
    27de:	bc 81       	ldd	r27, Y+4	; 0x04
    27e0:	bc 01       	movw	r22, r24
    27e2:	cd 01       	movw	r24, r26
    27e4:	0e 94 7e 13 	call	0x26fc	; 0x26fc <LCD_intgerToString>
}
    27e8:	2c 96       	adiw	r28, 0x0c	; 12
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	f8 94       	cli
    27ee:	de bf       	out	0x3e, r29	; 62
    27f0:	0f be       	out	0x3f, r0	; 63
    27f2:	cd bf       	out	0x3d, r28	; 61
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	08 95       	ret

000027fa <LCD_clearScreen>:

// @brief Send the clear screen command
void LCD_clearScreen(void) {
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY); // Send clear display command 
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	0e 94 d6 09 	call	0x13ac	; 0x13ac <LCD_sendCommand>
}
    2808:	cf 91       	pop	r28
    280a:	df 91       	pop	r29
    280c:	08 95       	ret

0000280e <main>:
#include "util/delay.h"

//#define MASTER
#define SLAVE

int main(void) {
    280e:	df 93       	push	r29
    2810:	cf 93       	push	r28
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	2b 97       	sbiw	r28, 0x0b	; 11
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	de bf       	out	0x3e, r29	; 62
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	cd bf       	out	0x3d, r28	; 61
	SPI_Config spi;
	uint8 buff = 0;
    2822:	1b 82       	std	Y+3, r1	; 0x03
	uint8 counter = 0;
    2824:	1a 82       	std	Y+2, r1	; 0x02
	uint8 ch = 'A';
    2826:	81 e4       	ldi	r24, 0x41	; 65
    2828:	89 83       	std	Y+1, r24	; 0x01

	LCD_init();
    282a:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_init>
	LCD_clearScreen();
    282e:	0e 94 fd 13 	call	0x27fa	; 0x27fa <LCD_clearScreen>

	spi.frameFormat = SPI_FRAME_FORMAT_MSB;
    2832:	1d 82       	std	Y+5, r1	; 0x05
	spi.clockPhase = SPI_CLK_PHASE_EDGE1;
    2834:	1f 82       	std	Y+7, r1	; 0x07
	spi.clockPolarity = SPI_CLK_POLARITY_LOW_IDLE;
    2836:	1e 82       	std	Y+6, r1	; 0x06
	spi.baudRatePrescaler = SPI_BAUDRATE_PRESCALER_16;
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	88 87       	std	Y+8, r24	; 0x08
	spi.IRQ_enable = SPI_IRQ_ENABLE_NONE;
    283c:	19 86       	std	Y+9, r1	; 0x09
#ifdef MASTER
	spi.deviceMode = SPI_DEVICE_MODE_MASTER;
#endif
#ifdef SLAVE
	spi.deviceMode = SPI_DEVICE_MODE_SLAVE;
    283e:	1c 82       	std	Y+4, r1	; 0x04
#endif
	MCAL_SPI_init(&spi);
    2840:	ce 01       	movw	r24, r28
    2842:	04 96       	adiw	r24, 0x04	; 4
    2844:	0e 94 77 07 	call	0xeee	; 0xeee <MCAL_SPI_init>
		_delay_ms(1000);
	}
#endif

#ifdef SLAVE
	LCD_displayString((uint8*) "Slave  ");
    2848:	80 e6       	ldi	r24, 0x60	; 96
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <LCD_displayString>
	for (;;) {
		LCD_moveCursor(1, 0);
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	60 e0       	ldi	r22, 0x00	; 0
    2854:	0e 94 0f 13 	call	0x261e	; 0x261e <LCD_moveCursor>
		buff = MCAL_SPI_sendRecieve(0xFF, SPI_POLLING_ENABLED);
    2858:	8f ef       	ldi	r24, 0xFF	; 255
    285a:	61 e0       	ldi	r22, 0x01	; 1
    285c:	0e 94 c8 08 	call	0x1190	; 0x1190 <MCAL_SPI_sendRecieve>
    2860:	8b 83       	std	Y+3, r24	; 0x03
		LCD_displayCharacter(buff);
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_displayCharacter>
		LCD_moveCursor(0, 9);
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	69 e0       	ldi	r22, 0x09	; 9
    286c:	0e 94 0f 13 	call	0x261e	; 0x261e <LCD_moveCursor>
		LCD_intgerToString(counter++);
    2870:	8a 81       	ldd	r24, Y+2	; 0x02
    2872:	88 2f       	mov	r24, r24
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	a0 e0       	ldi	r26, 0x00	; 0
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	2a 81       	ldd	r18, Y+2	; 0x02
    287c:	2f 5f       	subi	r18, 0xFF	; 255
    287e:	2a 83       	std	Y+2, r18	; 0x02
    2880:	bc 01       	movw	r22, r24
    2882:	cd 01       	movw	r24, r26
    2884:	0e 94 7e 13 	call	0x26fc	; 0x26fc <LCD_intgerToString>
    2888:	e3 cf       	rjmp	.-58     	; 0x2850 <main+0x42>

0000288a <__prologue_saves__>:
    288a:	2f 92       	push	r2
    288c:	3f 92       	push	r3
    288e:	4f 92       	push	r4
    2890:	5f 92       	push	r5
    2892:	6f 92       	push	r6
    2894:	7f 92       	push	r7
    2896:	8f 92       	push	r8
    2898:	9f 92       	push	r9
    289a:	af 92       	push	r10
    289c:	bf 92       	push	r11
    289e:	cf 92       	push	r12
    28a0:	df 92       	push	r13
    28a2:	ef 92       	push	r14
    28a4:	ff 92       	push	r15
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	ca 1b       	sub	r28, r26
    28b4:	db 0b       	sbc	r29, r27
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	09 94       	ijmp

000028c2 <__epilogue_restores__>:
    28c2:	2a 88       	ldd	r2, Y+18	; 0x12
    28c4:	39 88       	ldd	r3, Y+17	; 0x11
    28c6:	48 88       	ldd	r4, Y+16	; 0x10
    28c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    28ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    28cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    28ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    28d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    28d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    28d4:	b9 84       	ldd	r11, Y+9	; 0x09
    28d6:	c8 84       	ldd	r12, Y+8	; 0x08
    28d8:	df 80       	ldd	r13, Y+7	; 0x07
    28da:	ee 80       	ldd	r14, Y+6	; 0x06
    28dc:	fd 80       	ldd	r15, Y+5	; 0x05
    28de:	0c 81       	ldd	r16, Y+4	; 0x04
    28e0:	1b 81       	ldd	r17, Y+3	; 0x03
    28e2:	aa 81       	ldd	r26, Y+2	; 0x02
    28e4:	b9 81       	ldd	r27, Y+1	; 0x01
    28e6:	ce 0f       	add	r28, r30
    28e8:	d1 1d       	adc	r29, r1
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	ed 01       	movw	r28, r26
    28f6:	08 95       	ret

000028f8 <itoa>:
    28f8:	fb 01       	movw	r30, r22
    28fa:	9f 01       	movw	r18, r30
    28fc:	e8 94       	clt
    28fe:	42 30       	cpi	r20, 0x02	; 2
    2900:	c4 f0       	brlt	.+48     	; 0x2932 <itoa+0x3a>
    2902:	45 32       	cpi	r20, 0x25	; 37
    2904:	b4 f4       	brge	.+44     	; 0x2932 <itoa+0x3a>
    2906:	4a 30       	cpi	r20, 0x0A	; 10
    2908:	29 f4       	brne	.+10     	; 0x2914 <itoa+0x1c>
    290a:	97 fb       	bst	r25, 7
    290c:	1e f4       	brtc	.+6      	; 0x2914 <itoa+0x1c>
    290e:	90 95       	com	r25
    2910:	81 95       	neg	r24
    2912:	9f 4f       	sbci	r25, 0xFF	; 255
    2914:	64 2f       	mov	r22, r20
    2916:	77 27       	eor	r23, r23
    2918:	0e 94 ad 14 	call	0x295a	; 0x295a <__udivmodhi4>
    291c:	80 5d       	subi	r24, 0xD0	; 208
    291e:	8a 33       	cpi	r24, 0x3A	; 58
    2920:	0c f0       	brlt	.+2      	; 0x2924 <itoa+0x2c>
    2922:	89 5d       	subi	r24, 0xD9	; 217
    2924:	81 93       	st	Z+, r24
    2926:	cb 01       	movw	r24, r22
    2928:	00 97       	sbiw	r24, 0x00	; 0
    292a:	a1 f7       	brne	.-24     	; 0x2914 <itoa+0x1c>
    292c:	16 f4       	brtc	.+4      	; 0x2932 <itoa+0x3a>
    292e:	5d e2       	ldi	r21, 0x2D	; 45
    2930:	51 93       	st	Z+, r21
    2932:	10 82       	st	Z, r1
    2934:	c9 01       	movw	r24, r18
    2936:	0c 94 9d 14 	jmp	0x293a	; 0x293a <strrev>

0000293a <strrev>:
    293a:	dc 01       	movw	r26, r24
    293c:	fc 01       	movw	r30, r24
    293e:	67 2f       	mov	r22, r23
    2940:	71 91       	ld	r23, Z+
    2942:	77 23       	and	r23, r23
    2944:	e1 f7       	brne	.-8      	; 0x293e <strrev+0x4>
    2946:	32 97       	sbiw	r30, 0x02	; 2
    2948:	04 c0       	rjmp	.+8      	; 0x2952 <strrev+0x18>
    294a:	7c 91       	ld	r23, X
    294c:	6d 93       	st	X+, r22
    294e:	70 83       	st	Z, r23
    2950:	62 91       	ld	r22, -Z
    2952:	ae 17       	cp	r26, r30
    2954:	bf 07       	cpc	r27, r31
    2956:	c8 f3       	brcs	.-14     	; 0x294a <strrev+0x10>
    2958:	08 95       	ret

0000295a <__udivmodhi4>:
    295a:	aa 1b       	sub	r26, r26
    295c:	bb 1b       	sub	r27, r27
    295e:	51 e1       	ldi	r21, 0x11	; 17
    2960:	07 c0       	rjmp	.+14     	; 0x2970 <__udivmodhi4_ep>

00002962 <__udivmodhi4_loop>:
    2962:	aa 1f       	adc	r26, r26
    2964:	bb 1f       	adc	r27, r27
    2966:	a6 17       	cp	r26, r22
    2968:	b7 07       	cpc	r27, r23
    296a:	10 f0       	brcs	.+4      	; 0x2970 <__udivmodhi4_ep>
    296c:	a6 1b       	sub	r26, r22
    296e:	b7 0b       	sbc	r27, r23

00002970 <__udivmodhi4_ep>:
    2970:	88 1f       	adc	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	5a 95       	dec	r21
    2976:	a9 f7       	brne	.-22     	; 0x2962 <__udivmodhi4_loop>
    2978:	80 95       	com	r24
    297a:	90 95       	com	r25
    297c:	bc 01       	movw	r22, r24
    297e:	cd 01       	movw	r24, r26
    2980:	08 95       	ret

00002982 <_exit>:
    2982:	f8 94       	cli

00002984 <__stop_program>:
    2984:	ff cf       	rjmp	.-2      	; 0x2984 <__stop_program>
