
Unit8_Sec1_UART_EclipseProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002800  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002800  00002874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 000002a0  00000000  00000000  0000297c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000414  00000000  00000000  00002c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002c6e  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000148f  00000000  00000000  00005c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001fb3  00000000  00000000  0000712d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000360  00000000  00000000  000090e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000061d  00000000  00000000  00009440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000090e  00000000  00000000  00009a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000150  00000000  00000000  0000a36b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 48 13 	call	0x2690	; 0x2690 <main>
      7a:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 9e 13 	jmp	0x273c	; 0x273c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 9e 13 	jmp	0x273c	; 0x273c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__stack+0x1f>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__stack+0x1f>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__stack+0x29>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__stack+0x1f>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__stack+0x29>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__stack+0x33>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__stack+0x3b>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	e8 59       	subi	r30, 0x98	; 152
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <MCAL_GPIO_init>:
// Functions Definitions
//*****************************************************************************
// @brief Setup the mode of the required pin/port.
// @param[in]  GPIOx  The port to be configured.
// @param[in]  pinConfig  The pin/port configuration.
void MCAL_GPIO_init(GPIO_TypeDef *GPIOx, GPIO_PinConfig *pinConfig) {
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	28 97       	sbiw	r28, 0x08	; 8
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	9a 83       	std	Y+2, r25	; 0x02
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	7c 83       	std	Y+4, r23	; 0x04
     caa:	6b 83       	std	Y+3, r22	; 0x03
	if (pinConfig->GPIO_pinNumber == GPIO_PIN_All) {
     cac:	eb 81       	ldd	r30, Y+3	; 0x03
     cae:	fc 81       	ldd	r31, Y+4	; 0x04
     cb0:	80 81       	ld	r24, Z
     cb2:	8f 3f       	cpi	r24, 0xFF	; 255
     cb4:	59 f5       	brne	.+86     	; 0xd0c <MCAL_GPIO_init+0x7c>
		switch (pinConfig->GPIO_pinMode) {
     cb6:	eb 81       	ldd	r30, Y+3	; 0x03
     cb8:	fc 81       	ldd	r31, Y+4	; 0x04
     cba:	81 81       	ldd	r24, Z+1	; 0x01
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	38 87       	std	Y+8, r19	; 0x08
     cc2:	2f 83       	std	Y+7, r18	; 0x07
     cc4:	8f 81       	ldd	r24, Y+7	; 0x07
     cc6:	98 85       	ldd	r25, Y+8	; 0x08
     cc8:	82 30       	cpi	r24, 0x02	; 2
     cca:	91 05       	cpc	r25, r1
     ccc:	99 f0       	breq	.+38     	; 0xcf4 <MCAL_GPIO_init+0x64>
     cce:	2f 81       	ldd	r18, Y+7	; 0x07
     cd0:	38 85       	ldd	r19, Y+8	; 0x08
     cd2:	23 30       	cpi	r18, 0x03	; 3
     cd4:	31 05       	cpc	r19, r1
     cd6:	a9 f0       	breq	.+42     	; 0xd02 <MCAL_GPIO_init+0x72>
     cd8:	8f 81       	ldd	r24, Y+7	; 0x07
     cda:	98 85       	ldd	r25, Y+8	; 0x08
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	91 05       	cpc	r25, r1
     ce0:	09 f0       	breq	.+2      	; 0xce4 <MCAL_GPIO_init+0x54>
     ce2:	64 c0       	rjmp	.+200    	; 0xdac <MCAL_GPIO_init+0x11c>
		case GPIO_MODE_IN_PULL_UP:
			// DDR -> 0 Input
			// PORT -> 1 Pull-up
			GPIOx->DDR = (uint8) 0x00;
     ce4:	e9 81       	ldd	r30, Y+1	; 0x01
     ce6:	fa 81       	ldd	r31, Y+2	; 0x02
     ce8:	11 82       	std	Z+1, r1	; 0x01
			GPIOx->PORT = (uint8) 0xFF;
     cea:	e9 81       	ldd	r30, Y+1	; 0x01
     cec:	fa 81       	ldd	r31, Y+2	; 0x02
     cee:	8f ef       	ldi	r24, 0xFF	; 255
     cf0:	82 83       	std	Z+2, r24	; 0x02
     cf2:	5c c0       	rjmp	.+184    	; 0xdac <MCAL_GPIO_init+0x11c>
			break;
		case GPIO_MODE_IN_FLOATING:
			// DDR -> 0 Input
			// PORT -> 0 Pull-down
			GPIOx->DDR = (uint8) 0x00;
     cf4:	e9 81       	ldd	r30, Y+1	; 0x01
     cf6:	fa 81       	ldd	r31, Y+2	; 0x02
     cf8:	11 82       	std	Z+1, r1	; 0x01
			GPIOx->PORT = (uint8) 0x00;
     cfa:	e9 81       	ldd	r30, Y+1	; 0x01
     cfc:	fa 81       	ldd	r31, Y+2	; 0x02
     cfe:	12 82       	std	Z+2, r1	; 0x02
     d00:	55 c0       	rjmp	.+170    	; 0xdac <MCAL_GPIO_init+0x11c>
			break;
		case GPIO_MODE_OUT:
			// DDR -> 1 Output
			GPIOx->DDR = (uint8) 0xFF;
     d02:	e9 81       	ldd	r30, Y+1	; 0x01
     d04:	fa 81       	ldd	r31, Y+2	; 0x02
     d06:	8f ef       	ldi	r24, 0xFF	; 255
     d08:	81 83       	std	Z+1, r24	; 0x01
     d0a:	50 c0       	rjmp	.+160    	; 0xdac <MCAL_GPIO_init+0x11c>
			break;
		default:
			break;
		}
	} else {
		switch (pinConfig->GPIO_pinMode) {
     d0c:	eb 81       	ldd	r30, Y+3	; 0x03
     d0e:	fc 81       	ldd	r31, Y+4	; 0x04
     d10:	81 81       	ldd	r24, Z+1	; 0x01
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	3e 83       	std	Y+6, r19	; 0x06
     d18:	2d 83       	std	Y+5, r18	; 0x05
     d1a:	8d 81       	ldd	r24, Y+5	; 0x05
     d1c:	9e 81       	ldd	r25, Y+6	; 0x06
     d1e:	82 30       	cpi	r24, 0x02	; 2
     d20:	91 05       	cpc	r25, r1
     d22:	09 f1       	breq	.+66     	; 0xd66 <MCAL_GPIO_init+0xd6>
     d24:	2d 81       	ldd	r18, Y+5	; 0x05
     d26:	3e 81       	ldd	r19, Y+6	; 0x06
     d28:	23 30       	cpi	r18, 0x03	; 3
     d2a:	31 05       	cpc	r19, r1
     d2c:	a9 f1       	breq	.+106    	; 0xd98 <MCAL_GPIO_init+0x108>
     d2e:	8d 81       	ldd	r24, Y+5	; 0x05
     d30:	9e 81       	ldd	r25, Y+6	; 0x06
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	91 05       	cpc	r25, r1
     d36:	d1 f5       	brne	.+116    	; 0xdac <MCAL_GPIO_init+0x11c>
		case GPIO_MODE_IN_PULL_UP:
			// DDR -> 0 Input
			// PORT -> 1 Pull-up
			GPIOx->DDR &= ~pinConfig->GPIO_pinNumber;
     d38:	e9 81       	ldd	r30, Y+1	; 0x01
     d3a:	fa 81       	ldd	r31, Y+2	; 0x02
     d3c:	81 81       	ldd	r24, Z+1	; 0x01
     d3e:	98 2f       	mov	r25, r24
     d40:	eb 81       	ldd	r30, Y+3	; 0x03
     d42:	fc 81       	ldd	r31, Y+4	; 0x04
     d44:	80 81       	ld	r24, Z
     d46:	80 95       	com	r24
     d48:	89 23       	and	r24, r25
     d4a:	e9 81       	ldd	r30, Y+1	; 0x01
     d4c:	fa 81       	ldd	r31, Y+2	; 0x02
     d4e:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT |= pinConfig->GPIO_pinNumber;
     d50:	e9 81       	ldd	r30, Y+1	; 0x01
     d52:	fa 81       	ldd	r31, Y+2	; 0x02
     d54:	92 81       	ldd	r25, Z+2	; 0x02
     d56:	eb 81       	ldd	r30, Y+3	; 0x03
     d58:	fc 81       	ldd	r31, Y+4	; 0x04
     d5a:	80 81       	ld	r24, Z
     d5c:	89 2b       	or	r24, r25
     d5e:	e9 81       	ldd	r30, Y+1	; 0x01
     d60:	fa 81       	ldd	r31, Y+2	; 0x02
     d62:	82 83       	std	Z+2, r24	; 0x02
     d64:	23 c0       	rjmp	.+70     	; 0xdac <MCAL_GPIO_init+0x11c>
			break;
		case GPIO_MODE_IN_FLOATING:
			// DDR -> 0 Input
			// PORT -> 0 Pull-down
			GPIOx->DDR &= ~pinConfig->GPIO_pinNumber;
     d66:	e9 81       	ldd	r30, Y+1	; 0x01
     d68:	fa 81       	ldd	r31, Y+2	; 0x02
     d6a:	81 81       	ldd	r24, Z+1	; 0x01
     d6c:	98 2f       	mov	r25, r24
     d6e:	eb 81       	ldd	r30, Y+3	; 0x03
     d70:	fc 81       	ldd	r31, Y+4	; 0x04
     d72:	80 81       	ld	r24, Z
     d74:	80 95       	com	r24
     d76:	89 23       	and	r24, r25
     d78:	e9 81       	ldd	r30, Y+1	; 0x01
     d7a:	fa 81       	ldd	r31, Y+2	; 0x02
     d7c:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT &= ~pinConfig->GPIO_pinNumber;
     d7e:	e9 81       	ldd	r30, Y+1	; 0x01
     d80:	fa 81       	ldd	r31, Y+2	; 0x02
     d82:	82 81       	ldd	r24, Z+2	; 0x02
     d84:	98 2f       	mov	r25, r24
     d86:	eb 81       	ldd	r30, Y+3	; 0x03
     d88:	fc 81       	ldd	r31, Y+4	; 0x04
     d8a:	80 81       	ld	r24, Z
     d8c:	80 95       	com	r24
     d8e:	89 23       	and	r24, r25
     d90:	e9 81       	ldd	r30, Y+1	; 0x01
     d92:	fa 81       	ldd	r31, Y+2	; 0x02
     d94:	82 83       	std	Z+2, r24	; 0x02
     d96:	0a c0       	rjmp	.+20     	; 0xdac <MCAL_GPIO_init+0x11c>
			break;
		case GPIO_MODE_OUT:
			// DDR -> 1 Output
			GPIOx->DDR |= pinConfig->GPIO_pinNumber;
     d98:	e9 81       	ldd	r30, Y+1	; 0x01
     d9a:	fa 81       	ldd	r31, Y+2	; 0x02
     d9c:	91 81       	ldd	r25, Z+1	; 0x01
     d9e:	eb 81       	ldd	r30, Y+3	; 0x03
     da0:	fc 81       	ldd	r31, Y+4	; 0x04
     da2:	80 81       	ld	r24, Z
     da4:	89 2b       	or	r24, r25
     da6:	e9 81       	ldd	r30, Y+1	; 0x01
     da8:	fa 81       	ldd	r31, Y+2	; 0x02
     daa:	81 83       	std	Z+1, r24	; 0x01
			break;
		default:
			break;
		}
	}
}
     dac:	28 96       	adiw	r28, 0x08	; 8
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <MCAL_GPIO_deInit>:

// @brief Reset the port configuration.
// @param[in]  GPIOx  The port to be reset.
void MCAL_GPIO_deInit(GPIO_TypeDef *GPIOx) {
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <MCAL_GPIO_deInit+0x6>
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	9a 83       	std	Y+2, r25	; 0x02
     dca:	89 83       	std	Y+1, r24	; 0x01
	// Reset values
	GPIOx->DDR = (uint8) 0xFF;
     dcc:	e9 81       	ldd	r30, Y+1	; 0x01
     dce:	fa 81       	ldd	r31, Y+2	; 0x02
     dd0:	8f ef       	ldi	r24, 0xFF	; 255
     dd2:	81 83       	std	Z+1, r24	; 0x01
	GPIOx->PORT = (uint8) 0xFF;
     dd4:	e9 81       	ldd	r30, Y+1	; 0x01
     dd6:	fa 81       	ldd	r31, Y+2	; 0x02
     dd8:	8f ef       	ldi	r24, 0xFF	; 255
     dda:	82 83       	std	Z+2, r24	; 0x02
}
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	08 95       	ret

00000de6 <MCAL_GPIO_readPin>:

// @brief Read the pin value.
// @param[in]  GPIOx  The port to be used.
// @param[in]  pinNumber  The pin number.
// @return The pin value.
uint8 MCAL_GPIO_readPin(GPIO_TypeDef *GPIOx, uint8 pinNumber) {
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	00 d0       	rcall	.+0      	; 0xdec <MCAL_GPIO_readPin+0x6>
     dec:	00 d0       	rcall	.+0      	; 0xdee <MCAL_GPIO_readPin+0x8>
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	9a 83       	std	Y+2, r25	; 0x02
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	6b 83       	std	Y+3, r22	; 0x03
	if ((GPIOx->PIN & pinNumber) == LOGIC_LOW) {
     df8:	e9 81       	ldd	r30, Y+1	; 0x01
     dfa:	fa 81       	ldd	r31, Y+2	; 0x02
     dfc:	90 81       	ld	r25, Z
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	89 23       	and	r24, r25
     e02:	88 23       	and	r24, r24
     e04:	11 f4       	brne	.+4      	; 0xe0a <MCAL_GPIO_readPin+0x24>
		return LOGIC_LOW;
     e06:	1c 82       	std	Y+4, r1	; 0x04
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <MCAL_GPIO_readPin+0x28>
	} else {
		return LOGIC_HIGH;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	8c 83       	std	Y+4, r24	; 0x04
     e0e:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return LOGIC_LOW;
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <MCAL_GPIO_readPort>:

// @brief Read the port value.
// @param[in]  GPIOx  The port to be read.
// @return The port value.
uint8 MCAL_GPIO_readPort(GPIO_TypeDef *GPIOx) {
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <MCAL_GPIO_readPort+0x6>
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	9a 83       	std	Y+2, r25	; 0x02
     e2a:	89 83       	std	Y+1, r24	; 0x01
	return (uint8) (GPIOx->PIN & 0xFF);
     e2c:	e9 81       	ldd	r30, Y+1	; 0x01
     e2e:	fa 81       	ldd	r31, Y+2	; 0x02
     e30:	80 81       	ld	r24, Z
}
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <MCAL_GPIO_writePin>:

// @brief Set a pin to a value.
// @param[in]  GPIOx  The port to be used.
// @param[in]  pinNumber  The pin number.
// @param[in]  value  The value to be set.
void MCAL_GPIO_writePin(GPIO_TypeDef *GPIOx, uint8 pinNumber, uint8 value) {
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	00 d0       	rcall	.+0      	; 0xe42 <MCAL_GPIO_writePin+0x6>
     e42:	00 d0       	rcall	.+0      	; 0xe44 <MCAL_GPIO_writePin+0x8>
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	9a 83       	std	Y+2, r25	; 0x02
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	6b 83       	std	Y+3, r22	; 0x03
     e4e:	4c 83       	std	Y+4, r20	; 0x04
	if (value == LOGIC_LOW) {
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	88 23       	and	r24, r24
     e54:	59 f4       	brne	.+22     	; 0xe6c <MCAL_GPIO_writePin+0x30>
		GPIOx->PORT &= ~pinNumber;
     e56:	e9 81       	ldd	r30, Y+1	; 0x01
     e58:	fa 81       	ldd	r31, Y+2	; 0x02
     e5a:	82 81       	ldd	r24, Z+2	; 0x02
     e5c:	98 2f       	mov	r25, r24
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	80 95       	com	r24
     e62:	89 23       	and	r24, r25
     e64:	e9 81       	ldd	r30, Y+1	; 0x01
     e66:	fa 81       	ldd	r31, Y+2	; 0x02
     e68:	82 83       	std	Z+2, r24	; 0x02
     e6a:	08 c0       	rjmp	.+16     	; 0xe7c <MCAL_GPIO_writePin+0x40>
	} else {
		GPIOx->PORT |= pinNumber;
     e6c:	e9 81       	ldd	r30, Y+1	; 0x01
     e6e:	fa 81       	ldd	r31, Y+2	; 0x02
     e70:	92 81       	ldd	r25, Z+2	; 0x02
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	89 2b       	or	r24, r25
     e76:	e9 81       	ldd	r30, Y+1	; 0x01
     e78:	fa 81       	ldd	r31, Y+2	; 0x02
     e7a:	82 83       	std	Z+2, r24	; 0x02
	}
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <MCAL_GPIO_writePort>:

// @brief Set a port to a value.
// @param[in]  GPIOx  The port to be set.
// @param[in]  value  The value to be set.
void MCAL_GPIO_writePort(GPIO_TypeDef *GPIOx, uint8 value) {
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	00 d0       	rcall	.+0      	; 0xe90 <MCAL_GPIO_writePort+0x6>
     e90:	0f 92       	push	r0
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	9a 83       	std	Y+2, r25	; 0x02
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	6b 83       	std	Y+3, r22	; 0x03
	GPIOx->PORT = (uint8) value;
     e9c:	e9 81       	ldd	r30, Y+1	; 0x01
     e9e:	fa 81       	ldd	r31, Y+2	; 0x02
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	82 83       	std	Z+2, r24	; 0x02
}
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <MCAL_GPIO_togglePin>:

// @brief Toggle a pin.
// @param[in]  GPIOx  The port to be used.
// @param[in]  pinNumber  The pin number.
void MCAL_GPIO_togglePin(GPIO_TypeDef *GPIOx, uint8 pinNumber) {
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <MCAL_GPIO_togglePin+0x6>
     eb6:	0f 92       	push	r0
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	9a 83       	std	Y+2, r25	; 0x02
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	6b 83       	std	Y+3, r22	; 0x03
	GPIOx->PORT ^= pinNumber;
     ec2:	e9 81       	ldd	r30, Y+1	; 0x01
     ec4:	fa 81       	ldd	r31, Y+2	; 0x02
     ec6:	92 81       	ldd	r25, Z+2	; 0x02
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	89 27       	eor	r24, r25
     ecc:	e9 81       	ldd	r30, Y+1	; 0x01
     ece:	fa 81       	ldd	r31, Y+2	; 0x02
     ed0:	82 83       	std	Z+2, r24	; 0x02
}
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <UART_init>:
// 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
// 2. Enable the UART.
// 3. Setup the UART baud rate.
// @param[in]  baud_rate  The baud rate to be configured.
void UART_init(uint32 baud_rate)
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <UART_init+0x6>
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <UART_init+0x8>
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <UART_init+0xa>
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	6b 83       	std	Y+3, r22	; 0x03
     eee:	7c 83       	std	Y+4, r23	; 0x04
     ef0:	8d 83       	std	Y+5, r24	; 0x05
     ef2:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
     ef4:	1a 82       	std	Y+2, r1	; 0x02
     ef6:	19 82       	std	Y+1, r1	; 0x01

	// double transmission speed
	UCSRA = (1<<U2X);
     ef8:	eb e2       	ldi	r30, 0x2B	; 43
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	80 83       	st	Z, r24

	// Receiver Enable, Transmitter Enable
	UCSRB = (1<<RXEN) | (1<<TXEN);
     f00:	ea e2       	ldi	r30, 0x2A	; 42
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	88 e1       	ldi	r24, 0x18	; 24
     f06:	80 83       	st	Z, r24

	// Writing the UCSRC, 8-bit data mode
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
     f08:	e0 e4       	ldi	r30, 0x40	; 64
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	86 e8       	ldi	r24, 0x86	; 134
     f0e:	80 83       	st	Z, r24

	// Calculate the UBRR register value
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	ad 81       	ldd	r26, Y+5	; 0x05
     f16:	be 81       	ldd	r27, Y+6	; 0x06
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	aa 1f       	adc	r26, r26
     f1e:	bb 1f       	adc	r27, r27
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	aa 1f       	adc	r26, r26
     f26:	bb 1f       	adc	r27, r27
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	aa 1f       	adc	r26, r26
     f2e:	bb 1f       	adc	r27, r27
     f30:	9c 01       	movw	r18, r24
     f32:	ad 01       	movw	r20, r26
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	92 e1       	ldi	r25, 0x12	; 18
     f38:	aa e7       	ldi	r26, 0x7A	; 122
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	bc 01       	movw	r22, r24
     f3e:	cd 01       	movw	r24, r26
     f40:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__udivmodsi4>
     f44:	da 01       	movw	r26, r20
     f46:	c9 01       	movw	r24, r18
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	89 83       	std	Y+1, r24	; 0x01

	// First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	UBRRH = ubrr_value>>8;
     f4e:	e0 e4       	ldi	r30, 0x40	; 64
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	9a 81       	ldd	r25, Y+2	; 0x02
     f56:	89 2f       	mov	r24, r25
     f58:	99 27       	eor	r25, r25
     f5a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     f5c:	e9 e2       	ldi	r30, 0x29	; 41
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	80 83       	st	Z, r24
}
     f64:	26 96       	adiw	r28, 0x06	; 6
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <UART_sendByte>:


// @brief Responsible for send byte to another UART device.
// @param[in]  data  The data to be sent.
void UART_sendByte(const uint8 data)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	0f 92       	push	r0
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	89 83       	std	Y+1, r24	; 0x01
	// Wait for Tx buffer (UDR) to be empty
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     f82:	eb e2       	ldi	r30, 0x2B	; 43
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	80 72       	andi	r24, 0x20	; 32
     f8e:	90 70       	andi	r25, 0x00	; 0
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	b9 f3       	breq	.-18     	; 0xf82 <UART_sendByte+0xc>

	// Send the data
	UDR = data;
     f94:	ec e2       	ldi	r30, 0x2C	; 44
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	80 83       	st	Z, r24
}
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <UART_recieveByte>:


// @brief Responsible for receive byte from another UART device.
// @return The byte received.
uint8 UART_recieveByte(void)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     fac:	eb e2       	ldi	r30, 0x2B	; 43
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	88 23       	and	r24, r24
     fb4:	dc f7       	brge	.-10     	; 0xfac <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
     fb6:	ec e2       	ldi	r30, 0x2C	; 44
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <UART_sendString>:

// @brief Send the required string through UART to the other UART device.
// @param[in] Str The string to be sent.
void UART_sendString(const uint8 *Str)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <UART_sendString+0x6>
     fc8:	0f 92       	push	r0
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	9b 83       	std	Y+3, r25	; 0x03
     fd0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     fd2:	19 82       	std	Y+1, r1	; 0x01
     fd4:	0e c0       	rjmp	.+28     	; 0xff2 <UART_sendString+0x30>

	// Send the whole string
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	9b 81       	ldd	r25, Y+3	; 0x03
     fe0:	fc 01       	movw	r30, r24
     fe2:	e2 0f       	add	r30, r18
     fe4:	f3 1f       	adc	r31, r19
     fe6:	80 81       	ld	r24, Z
     fe8:	0e 94 bb 07 	call	0xf76	; 0xf76 <UART_sendByte>
		i++;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	8f 5f       	subi	r24, 0xFF	; 255
     ff0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	// Send the whole string
	while(Str[i] != '\0')
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	9b 81       	ldd	r25, Y+3	; 0x03
     ffc:	fc 01       	movw	r30, r24
     ffe:	e2 0f       	add	r30, r18
    1000:	f3 1f       	adc	r31, r19
    1002:	80 81       	ld	r24, Z
    1004:	88 23       	and	r24, r24
    1006:	39 f7       	brne	.-50     	; 0xfd6 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <UART_receiveString>:

// @brief Receive the required string until the '#' symbol through UART from the other UART device.
// @param[out] Str The string received.
void UART_receiveString(uint8 *Str)
{
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <UART_receiveString+0xa>
    101e:	0f 92       	push	r0
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	9b 83       	std	Y+3, r25	; 0x03
    1026:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1028:	19 82       	std	Y+1, r1	; 0x01

	// Receive the first byte
	Str[i] = UART_recieveByte();
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	9b 81       	ldd	r25, Y+3	; 0x03
    1034:	8c 01       	movw	r16, r24
    1036:	02 0f       	add	r16, r18
    1038:	13 1f       	adc	r17, r19
    103a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <UART_recieveByte>
    103e:	f8 01       	movw	r30, r16
    1040:	80 83       	st	Z, r24
    1042:	0f c0       	rjmp	.+30     	; 0x1062 <UART_receiveString+0x4e>

	// Receive the whole string until the '#'
	while(Str[i] != '#')
	{
		i++;
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	9b 81       	ldd	r25, Y+3	; 0x03
    1054:	8c 01       	movw	r16, r24
    1056:	02 0f       	add	r16, r18
    1058:	13 1f       	adc	r17, r19
    105a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <UART_recieveByte>
    105e:	f8 01       	movw	r30, r16
    1060:	80 83       	st	Z, r24

	// Receive the first byte
	Str[i] = UART_recieveByte();

	// Receive the whole string until the '#'
	while(Str[i] != '#')
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	9b 81       	ldd	r25, Y+3	; 0x03
    106c:	fc 01       	movw	r30, r24
    106e:	e2 0f       	add	r30, r18
    1070:	f3 1f       	adc	r31, r19
    1072:	80 81       	ld	r24, Z
    1074:	83 32       	cpi	r24, 0x23	; 35
    1076:	31 f7       	brne	.-52     	; 0x1044 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	// After receiving the whole string plus the '#', replace the '#' with '\0'
	Str[i] = '\0';
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	9b 81       	ldd	r25, Y+3	; 0x03
    1082:	fc 01       	movw	r30, r24
    1084:	e2 0f       	add	r30, r18
    1086:	f3 1f       	adc	r31, r19
    1088:	10 82       	st	Z, r1
}
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	08 95       	ret

0000109a <LCD_init>:
// Functions Definitions
//*****************************************************************************
// @brief Initialize the LCD:
// 1. Setup the LCD pins directions by use the GPIO driver.
// 2. Setup the LCD Data Mode 4-bits or 8-bits.
void LCD_init(void) {
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	61 97       	sbiw	r28, 0x11	; 17
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
	uint8 pinShift = 0;
    10ae:	1f 86       	std	Y+15, r1	; 0x0f
	GPIO_PinConfig LCD_outputPinsConfig = { LCD_RS_PIN, LCD_OUTPUT_PINS_MODE };
    10b0:	82 e0       	ldi	r24, 0x02	; 2
    10b2:	88 8b       	std	Y+16, r24	; 0x10
    10b4:	83 e0       	ldi	r24, 0x03	; 3
    10b6:	89 8b       	std	Y+17, r24	; 0x11
	MCAL_GPIO_init(LCD_RS_PORT, &LCD_outputPinsConfig);
    10b8:	9e 01       	movw	r18, r28
    10ba:	20 5f       	subi	r18, 0xF0	; 240
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	89 e3       	ldi	r24, 0x39	; 57
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	b9 01       	movw	r22, r18
    10c4:	0e 94 48 06 	call	0xc90	; 0xc90 <MCAL_GPIO_init>

	LCD_outputPinsConfig.GPIO_pinNumber = LCD_E_PIN;
    10c8:	84 e0       	ldi	r24, 0x04	; 4
    10ca:	88 8b       	std	Y+16, r24	; 0x10
	MCAL_GPIO_init(LCD_E_PORT, &LCD_outputPinsConfig);
    10cc:	9e 01       	movw	r18, r28
    10ce:	20 5f       	subi	r18, 0xF0	; 240
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	89 e3       	ldi	r24, 0x39	; 57
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	b9 01       	movw	r22, r18
    10d8:	0e 94 48 06 	call	0xc90	; 0xc90 <MCAL_GPIO_init>

	for (pinShift = 0; pinShift < LCD_BITS; pinShift++) {
    10dc:	1f 86       	std	Y+15, r1	; 0x0f
    10de:	16 c0       	rjmp	.+44     	; 0x110c <LCD_init+0x72>
		LCD_outputPinsConfig.GPIO_pinNumber = (LCD_DATA_START_PIN << pinShift);
    10e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	88 e0       	ldi	r24, 0x08	; 8
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <LCD_init+0x56>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	2a 95       	dec	r18
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <LCD_init+0x52>
    10f4:	88 8b       	std	Y+16, r24	; 0x10
		MCAL_GPIO_init(LCD_DATA_PORT, &LCD_outputPinsConfig);
    10f6:	9e 01       	movw	r18, r28
    10f8:	20 5f       	subi	r18, 0xF0	; 240
    10fa:	3f 4f       	sbci	r19, 0xFF	; 255
    10fc:	89 e3       	ldi	r24, 0x39	; 57
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	b9 01       	movw	r22, r18
    1102:	0e 94 48 06 	call	0xc90	; 0xc90 <MCAL_GPIO_init>
	MCAL_GPIO_init(LCD_RS_PORT, &LCD_outputPinsConfig);

	LCD_outputPinsConfig.GPIO_pinNumber = LCD_E_PIN;
	MCAL_GPIO_init(LCD_E_PORT, &LCD_outputPinsConfig);

	for (pinShift = 0; pinShift < LCD_BITS; pinShift++) {
    1106:	8f 85       	ldd	r24, Y+15	; 0x0f
    1108:	8f 5f       	subi	r24, 0xFF	; 255
    110a:	8f 87       	std	Y+15, r24	; 0x0f
    110c:	8f 85       	ldd	r24, Y+15	; 0x0f
    110e:	84 30       	cpi	r24, 0x04	; 4
    1110:	38 f3       	brcs	.-50     	; 0x10e0 <LCD_init+0x46>
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	a0 ea       	ldi	r26, 0xA0	; 160
    1118:	b1 e4       	ldi	r27, 0x41	; 65
    111a:	8b 87       	std	Y+11, r24	; 0x0b
    111c:	9c 87       	std	Y+12, r25	; 0x0c
    111e:	ad 87       	std	Y+13, r26	; 0x0d
    1120:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1122:	6b 85       	ldd	r22, Y+11	; 0x0b
    1124:	7c 85       	ldd	r23, Y+12	; 0x0c
    1126:	8d 85       	ldd	r24, Y+13	; 0x0d
    1128:	9e 85       	ldd	r25, Y+14	; 0x0e
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	4a ef       	ldi	r20, 0xFA	; 250
    1130:	54 e4       	ldi	r21, 0x44	; 68
    1132:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	8f 83       	std	Y+7, r24	; 0x07
    113c:	98 87       	std	Y+8, r25	; 0x08
    113e:	a9 87       	std	Y+9, r26	; 0x09
    1140:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1142:	6f 81       	ldd	r22, Y+7	; 0x07
    1144:	78 85       	ldd	r23, Y+8	; 0x08
    1146:	89 85       	ldd	r24, Y+9	; 0x09
    1148:	9a 85       	ldd	r25, Y+10	; 0x0a
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	40 e8       	ldi	r20, 0x80	; 128
    1150:	5f e3       	ldi	r21, 0x3F	; 63
    1152:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1156:	88 23       	and	r24, r24
    1158:	2c f4       	brge	.+10     	; 0x1164 <LCD_init+0xca>
		__ticks = 1;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	9e 83       	std	Y+6, r25	; 0x06
    1160:	8d 83       	std	Y+5, r24	; 0x05
    1162:	3f c0       	rjmp	.+126    	; 0x11e2 <LCD_init+0x148>
	else if (__tmp > 65535)
    1164:	6f 81       	ldd	r22, Y+7	; 0x07
    1166:	78 85       	ldd	r23, Y+8	; 0x08
    1168:	89 85       	ldd	r24, Y+9	; 0x09
    116a:	9a 85       	ldd	r25, Y+10	; 0x0a
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	3f ef       	ldi	r19, 0xFF	; 255
    1170:	4f e7       	ldi	r20, 0x7F	; 127
    1172:	57 e4       	ldi	r21, 0x47	; 71
    1174:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1178:	18 16       	cp	r1, r24
    117a:	4c f5       	brge	.+82     	; 0x11ce <LCD_init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    117c:	6b 85       	ldd	r22, Y+11	; 0x0b
    117e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1180:	8d 85       	ldd	r24, Y+13	; 0x0d
    1182:	9e 85       	ldd	r25, Y+14	; 0x0e
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e2       	ldi	r20, 0x20	; 32
    118a:	51 e4       	ldi	r21, 0x41	; 65
    118c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	bc 01       	movw	r22, r24
    1196:	cd 01       	movw	r24, r26
    1198:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	9e 83       	std	Y+6, r25	; 0x06
    11a2:	8d 83       	std	Y+5, r24	; 0x05
    11a4:	0f c0       	rjmp	.+30     	; 0x11c4 <LCD_init+0x12a>
    11a6:	88 ec       	ldi	r24, 0xC8	; 200
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	9c 83       	std	Y+4, r25	; 0x04
    11ac:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	9c 81       	ldd	r25, Y+4	; 0x04
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <LCD_init+0x118>
    11b6:	9c 83       	std	Y+4, r25	; 0x04
    11b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	9e 81       	ldd	r25, Y+6	; 0x06
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	9e 83       	std	Y+6, r25	; 0x06
    11c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	69 f7       	brne	.-38     	; 0x11a6 <LCD_init+0x10c>
    11cc:	14 c0       	rjmp	.+40     	; 0x11f6 <LCD_init+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ce:	6f 81       	ldd	r22, Y+7	; 0x07
    11d0:	78 85       	ldd	r23, Y+8	; 0x08
    11d2:	89 85       	ldd	r24, Y+9	; 0x09
    11d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	9e 83       	std	Y+6, r25	; 0x06
    11e0:	8d 83       	std	Y+5, r24	; 0x05
    11e2:	8d 81       	ldd	r24, Y+5	; 0x05
    11e4:	9e 81       	ldd	r25, Y+6	; 0x06
    11e6:	9a 83       	std	Y+2, r25	; 0x02
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	9a 81       	ldd	r25, Y+2	; 0x02
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	f1 f7       	brne	.-4      	; 0x11ee <LCD_init+0x154>
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	89 83       	std	Y+1, r24	; 0x01
#if LCD_BITS == 8
	// use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode 
	LCD_sendCommand(LCD_EIGHT_BIT_TWO_LINES_5x7);

#elif LCD_BITS == 4
	LCD_sendCommand(LCD_FOUR_BIT_TWO_LINES_INIT1);
    11f6:	83 e3       	ldi	r24, 0x33	; 51
    11f8:	0e 94 13 09 	call	0x1226	; 0x1226 <LCD_sendCommand>
	LCD_sendCommand(LCD_FOUR_BIT_TWO_LINES_INIT2);
    11fc:	82 e3       	ldi	r24, 0x32	; 50
    11fe:	0e 94 13 09 	call	0x1226	; 0x1226 <LCD_sendCommand>
	LCD_sendCommand(LCD_FOUR_BIT_TWO_LINES_5x7);
    1202:	88 e2       	ldi	r24, 0x28	; 40
    1204:	0e 94 13 09 	call	0x1226	; 0x1226 <LCD_sendCommand>
#endif
	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF); // cursor off 
    1208:	8c e0       	ldi	r24, 0x0C	; 12
    120a:	0e 94 13 09 	call	0x1226	; 0x1226 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY); // clear LCD at the beginning 
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	0e 94 13 09 	call	0x1226	; 0x1226 <LCD_sendCommand>
}
    1214:	61 96       	adiw	r28, 0x11	; 17
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <LCD_sendCommand>:

// @brief Send the required command to the screen
// @param[in]  command  The command to be sent.
void LCD_sendCommand(uint8 command) {
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	c3 56       	subi	r28, 0x63	; 99
    1234:	d0 40       	sbci	r29, 0x00	; 0
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	fe 01       	movw	r30, r28
    1242:	ed 59       	subi	r30, 0x9D	; 157
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	80 83       	st	Z, r24
	MCAL_GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
    1248:	89 e3       	ldi	r24, 0x39	; 57
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	62 e0       	ldi	r22, 0x02	; 2
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
    1254:	fe 01       	movw	r30, r28
    1256:	e1 5a       	subi	r30, 0xA1	; 161
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	a0 e8       	ldi	r26, 0x80	; 128
    1260:	bf e3       	ldi	r27, 0x3F	; 63
    1262:	80 83       	st	Z, r24
    1264:	91 83       	std	Z+1, r25	; 0x01
    1266:	a2 83       	std	Z+2, r26	; 0x02
    1268:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126a:	8e 01       	movw	r16, r28
    126c:	05 5a       	subi	r16, 0xA5	; 165
    126e:	1f 4f       	sbci	r17, 0xFF	; 255
    1270:	fe 01       	movw	r30, r28
    1272:	e1 5a       	subi	r30, 0xA1	; 161
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	60 81       	ld	r22, Z
    1278:	71 81       	ldd	r23, Z+1	; 0x01
    127a:	82 81       	ldd	r24, Z+2	; 0x02
    127c:	93 81       	ldd	r25, Z+3	; 0x03
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	4a ef       	ldi	r20, 0xFA	; 250
    1284:	54 e4       	ldi	r21, 0x44	; 68
    1286:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	f8 01       	movw	r30, r16
    1290:	80 83       	st	Z, r24
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	a2 83       	std	Z+2, r26	; 0x02
    1296:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1298:	fe 01       	movw	r30, r28
    129a:	e5 5a       	subi	r30, 0xA5	; 165
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	82 81       	ldd	r24, Z+2	; 0x02
    12a4:	93 81       	ldd	r25, Z+3	; 0x03
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e8       	ldi	r20, 0x80	; 128
    12ac:	5f e3       	ldi	r21, 0x3F	; 63
    12ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12b2:	88 23       	and	r24, r24
    12b4:	44 f4       	brge	.+16     	; 0x12c6 <LCD_sendCommand+0xa0>
		__ticks = 1;
    12b6:	fe 01       	movw	r30, r28
    12b8:	e7 5a       	subi	r30, 0xA7	; 167
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	91 83       	std	Z+1, r25	; 0x01
    12c2:	80 83       	st	Z, r24
    12c4:	64 c0       	rjmp	.+200    	; 0x138e <LCD_sendCommand+0x168>
	else if (__tmp > 65535)
    12c6:	fe 01       	movw	r30, r28
    12c8:	e5 5a       	subi	r30, 0xA5	; 165
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	60 81       	ld	r22, Z
    12ce:	71 81       	ldd	r23, Z+1	; 0x01
    12d0:	82 81       	ldd	r24, Z+2	; 0x02
    12d2:	93 81       	ldd	r25, Z+3	; 0x03
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	3f ef       	ldi	r19, 0xFF	; 255
    12d8:	4f e7       	ldi	r20, 0x7F	; 127
    12da:	57 e4       	ldi	r21, 0x47	; 71
    12dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12e0:	18 16       	cp	r1, r24
    12e2:	0c f0       	brlt	.+2      	; 0x12e6 <LCD_sendCommand+0xc0>
    12e4:	43 c0       	rjmp	.+134    	; 0x136c <LCD_sendCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e6:	fe 01       	movw	r30, r28
    12e8:	e1 5a       	subi	r30, 0xA1	; 161
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	60 81       	ld	r22, Z
    12ee:	71 81       	ldd	r23, Z+1	; 0x01
    12f0:	82 81       	ldd	r24, Z+2	; 0x02
    12f2:	93 81       	ldd	r25, Z+3	; 0x03
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	40 e2       	ldi	r20, 0x20	; 32
    12fa:	51 e4       	ldi	r21, 0x41	; 65
    12fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	8e 01       	movw	r16, r28
    1306:	07 5a       	subi	r16, 0xA7	; 167
    1308:	1f 4f       	sbci	r17, 0xFF	; 255
    130a:	bc 01       	movw	r22, r24
    130c:	cd 01       	movw	r24, r26
    130e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	f8 01       	movw	r30, r16
    1318:	91 83       	std	Z+1, r25	; 0x01
    131a:	80 83       	st	Z, r24
    131c:	1f c0       	rjmp	.+62     	; 0x135c <LCD_sendCommand+0x136>
    131e:	fe 01       	movw	r30, r28
    1320:	e9 5a       	subi	r30, 0xA9	; 169
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	88 ec       	ldi	r24, 0xC8	; 200
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	91 83       	std	Z+1, r25	; 0x01
    132a:	80 83       	st	Z, r24
    132c:	fe 01       	movw	r30, r28
    132e:	e9 5a       	subi	r30, 0xA9	; 169
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	f1 f7       	brne	.-4      	; 0x1336 <LCD_sendCommand+0x110>
    133a:	fe 01       	movw	r30, r28
    133c:	e9 5a       	subi	r30, 0xA9	; 169
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1344:	de 01       	movw	r26, r28
    1346:	a7 5a       	subi	r26, 0xA7	; 167
    1348:	bf 4f       	sbci	r27, 0xFF	; 255
    134a:	fe 01       	movw	r30, r28
    134c:	e7 5a       	subi	r30, 0xA7	; 167
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	80 81       	ld	r24, Z
    1352:	91 81       	ldd	r25, Z+1	; 0x01
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	11 96       	adiw	r26, 0x01	; 1
    1358:	9c 93       	st	X, r25
    135a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135c:	fe 01       	movw	r30, r28
    135e:	e7 5a       	subi	r30, 0xA7	; 167
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	80 81       	ld	r24, Z
    1364:	91 81       	ldd	r25, Z+1	; 0x01
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	d1 f6       	brne	.-76     	; 0x131e <LCD_sendCommand+0xf8>
    136a:	27 c0       	rjmp	.+78     	; 0x13ba <LCD_sendCommand+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136c:	8e 01       	movw	r16, r28
    136e:	07 5a       	subi	r16, 0xA7	; 167
    1370:	1f 4f       	sbci	r17, 0xFF	; 255
    1372:	fe 01       	movw	r30, r28
    1374:	e5 5a       	subi	r30, 0xA5	; 165
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	60 81       	ld	r22, Z
    137a:	71 81       	ldd	r23, Z+1	; 0x01
    137c:	82 81       	ldd	r24, Z+2	; 0x02
    137e:	93 81       	ldd	r25, Z+3	; 0x03
    1380:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	f8 01       	movw	r30, r16
    138a:	91 83       	std	Z+1, r25	; 0x01
    138c:	80 83       	st	Z, r24
    138e:	de 01       	movw	r26, r28
    1390:	ab 5a       	subi	r26, 0xAB	; 171
    1392:	bf 4f       	sbci	r27, 0xFF	; 255
    1394:	fe 01       	movw	r30, r28
    1396:	e7 5a       	subi	r30, 0xA7	; 167
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	80 81       	ld	r24, Z
    139c:	91 81       	ldd	r25, Z+1	; 0x01
    139e:	8d 93       	st	X+, r24
    13a0:	9c 93       	st	X, r25
    13a2:	fe 01       	movw	r30, r28
    13a4:	eb 5a       	subi	r30, 0xAB	; 171
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	80 81       	ld	r24, Z
    13aa:	91 81       	ldd	r25, Z+1	; 0x01
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <LCD_sendCommand+0x186>
    13b0:	fe 01       	movw	r30, r28
    13b2:	eb 5a       	subi	r30, 0xAB	; 171
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	91 83       	std	Z+1, r25	; 0x01
    13b8:	80 83       	st	Z, r24
	_delay_ms(1);

	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    13ba:	89 e3       	ldi	r24, 0x39	; 57
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	64 e0       	ldi	r22, 0x04	; 4
    13c0:	41 e0       	ldi	r20, 0x01	; 1
    13c2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
    13c6:	fe 01       	movw	r30, r28
    13c8:	ef 5a       	subi	r30, 0xAF	; 175
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a0 e8       	ldi	r26, 0x80	; 128
    13d2:	bf e3       	ldi	r27, 0x3F	; 63
    13d4:	80 83       	st	Z, r24
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	a2 83       	std	Z+2, r26	; 0x02
    13da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13dc:	8e 01       	movw	r16, r28
    13de:	03 5b       	subi	r16, 0xB3	; 179
    13e0:	1f 4f       	sbci	r17, 0xFF	; 255
    13e2:	fe 01       	movw	r30, r28
    13e4:	ef 5a       	subi	r30, 0xAF	; 175
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	60 81       	ld	r22, Z
    13ea:	71 81       	ldd	r23, Z+1	; 0x01
    13ec:	82 81       	ldd	r24, Z+2	; 0x02
    13ee:	93 81       	ldd	r25, Z+3	; 0x03
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	4a ef       	ldi	r20, 0xFA	; 250
    13f6:	54 e4       	ldi	r21, 0x44	; 68
    13f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	f8 01       	movw	r30, r16
    1402:	80 83       	st	Z, r24
    1404:	91 83       	std	Z+1, r25	; 0x01
    1406:	a2 83       	std	Z+2, r26	; 0x02
    1408:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    140a:	fe 01       	movw	r30, r28
    140c:	e3 5b       	subi	r30, 0xB3	; 179
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	60 81       	ld	r22, Z
    1412:	71 81       	ldd	r23, Z+1	; 0x01
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	93 81       	ldd	r25, Z+3	; 0x03
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e8       	ldi	r20, 0x80	; 128
    141e:	5f e3       	ldi	r21, 0x3F	; 63
    1420:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1424:	88 23       	and	r24, r24
    1426:	44 f4       	brge	.+16     	; 0x1438 <LCD_sendCommand+0x212>
		__ticks = 1;
    1428:	fe 01       	movw	r30, r28
    142a:	e5 5b       	subi	r30, 0xB5	; 181
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	91 83       	std	Z+1, r25	; 0x01
    1434:	80 83       	st	Z, r24
    1436:	64 c0       	rjmp	.+200    	; 0x1500 <LCD_sendCommand+0x2da>
	else if (__tmp > 65535)
    1438:	fe 01       	movw	r30, r28
    143a:	e3 5b       	subi	r30, 0xB3	; 179
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	3f ef       	ldi	r19, 0xFF	; 255
    144a:	4f e7       	ldi	r20, 0x7F	; 127
    144c:	57 e4       	ldi	r21, 0x47	; 71
    144e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1452:	18 16       	cp	r1, r24
    1454:	0c f0       	brlt	.+2      	; 0x1458 <LCD_sendCommand+0x232>
    1456:	43 c0       	rjmp	.+134    	; 0x14de <LCD_sendCommand+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1458:	fe 01       	movw	r30, r28
    145a:	ef 5a       	subi	r30, 0xAF	; 175
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	60 81       	ld	r22, Z
    1460:	71 81       	ldd	r23, Z+1	; 0x01
    1462:	82 81       	ldd	r24, Z+2	; 0x02
    1464:	93 81       	ldd	r25, Z+3	; 0x03
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e2       	ldi	r20, 0x20	; 32
    146c:	51 e4       	ldi	r21, 0x41	; 65
    146e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	8e 01       	movw	r16, r28
    1478:	05 5b       	subi	r16, 0xB5	; 181
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	f8 01       	movw	r30, r16
    148a:	91 83       	std	Z+1, r25	; 0x01
    148c:	80 83       	st	Z, r24
    148e:	1f c0       	rjmp	.+62     	; 0x14ce <LCD_sendCommand+0x2a8>
    1490:	fe 01       	movw	r30, r28
    1492:	e7 5b       	subi	r30, 0xB7	; 183
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	88 ec       	ldi	r24, 0xC8	; 200
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	91 83       	std	Z+1, r25	; 0x01
    149c:	80 83       	st	Z, r24
    149e:	fe 01       	movw	r30, r28
    14a0:	e7 5b       	subi	r30, 0xB7	; 183
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	80 81       	ld	r24, Z
    14a6:	91 81       	ldd	r25, Z+1	; 0x01
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <LCD_sendCommand+0x282>
    14ac:	fe 01       	movw	r30, r28
    14ae:	e7 5b       	subi	r30, 0xB7	; 183
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	91 83       	std	Z+1, r25	; 0x01
    14b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b6:	de 01       	movw	r26, r28
    14b8:	a5 5b       	subi	r26, 0xB5	; 181
    14ba:	bf 4f       	sbci	r27, 0xFF	; 255
    14bc:	fe 01       	movw	r30, r28
    14be:	e5 5b       	subi	r30, 0xB5	; 181
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	80 81       	ld	r24, Z
    14c4:	91 81       	ldd	r25, Z+1	; 0x01
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	11 96       	adiw	r26, 0x01	; 1
    14ca:	9c 93       	st	X, r25
    14cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ce:	fe 01       	movw	r30, r28
    14d0:	e5 5b       	subi	r30, 0xB5	; 181
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	80 81       	ld	r24, Z
    14d6:	91 81       	ldd	r25, Z+1	; 0x01
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	d1 f6       	brne	.-76     	; 0x1490 <LCD_sendCommand+0x26a>
    14dc:	27 c0       	rjmp	.+78     	; 0x152c <LCD_sendCommand+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14de:	8e 01       	movw	r16, r28
    14e0:	05 5b       	subi	r16, 0xB5	; 181
    14e2:	1f 4f       	sbci	r17, 0xFF	; 255
    14e4:	fe 01       	movw	r30, r28
    14e6:	e3 5b       	subi	r30, 0xB3	; 179
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	60 81       	ld	r22, Z
    14ec:	71 81       	ldd	r23, Z+1	; 0x01
    14ee:	82 81       	ldd	r24, Z+2	; 0x02
    14f0:	93 81       	ldd	r25, Z+3	; 0x03
    14f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	f8 01       	movw	r30, r16
    14fc:	91 83       	std	Z+1, r25	; 0x01
    14fe:	80 83       	st	Z, r24
    1500:	de 01       	movw	r26, r28
    1502:	a9 5b       	subi	r26, 0xB9	; 185
    1504:	bf 4f       	sbci	r27, 0xFF	; 255
    1506:	fe 01       	movw	r30, r28
    1508:	e5 5b       	subi	r30, 0xB5	; 181
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	80 81       	ld	r24, Z
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	8d 93       	st	X+, r24
    1512:	9c 93       	st	X, r25
    1514:	fe 01       	movw	r30, r28
    1516:	e9 5b       	subi	r30, 0xB9	; 185
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 81       	ld	r24, Z
    151c:	91 81       	ldd	r25, Z+1	; 0x01
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	f1 f7       	brne	.-4      	; 0x151e <LCD_sendCommand+0x2f8>
    1522:	fe 01       	movw	r30, r28
    1524:	e9 5b       	subi	r30, 0xB9	; 185
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	91 83       	std	Z+1, r25	; 0x01
    152a:	80 83       	st	Z, r24
	_delay_ms(1);
#if LCD_BITS == 8
	MCAL_GPIO_writePort(LCD_DATA_PORT, (MCAL_GPIO_readPort(LCD_DATA_PORT) & 0xFF00)| command);
#elif LCD_BITS == 4
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN, GET_BIT(command, 4));
    152c:	fe 01       	movw	r30, r28
    152e:	ed 59       	subi	r30, 0x9D	; 157
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	80 81       	ld	r24, Z
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	80 71       	andi	r24, 0x10	; 16
    153a:	90 70       	andi	r25, 0x00	; 0
    153c:	95 95       	asr	r25
    153e:	87 95       	ror	r24
    1540:	95 95       	asr	r25
    1542:	87 95       	ror	r24
    1544:	95 95       	asr	r25
    1546:	87 95       	ror	r24
    1548:	95 95       	asr	r25
    154a:	87 95       	ror	r24
    154c:	28 2f       	mov	r18, r24
    154e:	89 e3       	ldi	r24, 0x39	; 57
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	68 e0       	ldi	r22, 0x08	; 8
    1554:	42 2f       	mov	r20, r18
    1556:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 1,
    155a:	fe 01       	movw	r30, r28
    155c:	ed 59       	subi	r30, 0x9D	; 157
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	80 81       	ld	r24, Z
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	80 72       	andi	r24, 0x20	; 32
    1568:	90 70       	andi	r25, 0x00	; 0
    156a:	95 95       	asr	r25
    156c:	87 95       	ror	r24
    156e:	95 95       	asr	r25
    1570:	87 95       	ror	r24
    1572:	95 95       	asr	r25
    1574:	87 95       	ror	r24
    1576:	95 95       	asr	r25
    1578:	87 95       	ror	r24
    157a:	95 95       	asr	r25
    157c:	87 95       	ror	r24
    157e:	28 2f       	mov	r18, r24
    1580:	89 e3       	ldi	r24, 0x39	; 57
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	60 e1       	ldi	r22, 0x10	; 16
    1586:	42 2f       	mov	r20, r18
    1588:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
			GET_BIT(command, 5));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 2,
    158c:	fe 01       	movw	r30, r28
    158e:	ed 59       	subi	r30, 0x9D	; 157
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	80 81       	ld	r24, Z
    1594:	88 2f       	mov	r24, r24
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	80 74       	andi	r24, 0x40	; 64
    159a:	90 70       	andi	r25, 0x00	; 0
    159c:	08 2e       	mov	r0, r24
    159e:	89 2f       	mov	r24, r25
    15a0:	00 0c       	add	r0, r0
    15a2:	88 1f       	adc	r24, r24
    15a4:	99 0b       	sbc	r25, r25
    15a6:	00 0c       	add	r0, r0
    15a8:	88 1f       	adc	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	28 2f       	mov	r18, r24
    15ae:	89 e3       	ldi	r24, 0x39	; 57
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	60 e2       	ldi	r22, 0x20	; 32
    15b4:	42 2f       	mov	r20, r18
    15b6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
			GET_BIT(command, 6));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 3,
    15ba:	fe 01       	movw	r30, r28
    15bc:	ed 59       	subi	r30, 0x9D	; 157
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	80 81       	ld	r24, Z
    15c2:	28 2f       	mov	r18, r24
    15c4:	22 1f       	adc	r18, r18
    15c6:	22 27       	eor	r18, r18
    15c8:	22 1f       	adc	r18, r18
    15ca:	89 e3       	ldi	r24, 0x39	; 57
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	60 e4       	ldi	r22, 0x40	; 64
    15d0:	42 2f       	mov	r20, r18
    15d2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
    15d6:	fe 01       	movw	r30, r28
    15d8:	ed 5b       	subi	r30, 0xBD	; 189
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	a0 e8       	ldi	r26, 0x80	; 128
    15e2:	bf e3       	ldi	r27, 0x3F	; 63
    15e4:	80 83       	st	Z, r24
    15e6:	91 83       	std	Z+1, r25	; 0x01
    15e8:	a2 83       	std	Z+2, r26	; 0x02
    15ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ec:	8e 01       	movw	r16, r28
    15ee:	01 5c       	subi	r16, 0xC1	; 193
    15f0:	1f 4f       	sbci	r17, 0xFF	; 255
    15f2:	fe 01       	movw	r30, r28
    15f4:	ed 5b       	subi	r30, 0xBD	; 189
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	60 81       	ld	r22, Z
    15fa:	71 81       	ldd	r23, Z+1	; 0x01
    15fc:	82 81       	ldd	r24, Z+2	; 0x02
    15fe:	93 81       	ldd	r25, Z+3	; 0x03
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	4a ef       	ldi	r20, 0xFA	; 250
    1606:	54 e4       	ldi	r21, 0x44	; 68
    1608:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	f8 01       	movw	r30, r16
    1612:	80 83       	st	Z, r24
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	a2 83       	std	Z+2, r26	; 0x02
    1618:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    161a:	fe 01       	movw	r30, r28
    161c:	ff 96       	adiw	r30, 0x3f	; 63
    161e:	60 81       	ld	r22, Z
    1620:	71 81       	ldd	r23, Z+1	; 0x01
    1622:	82 81       	ldd	r24, Z+2	; 0x02
    1624:	93 81       	ldd	r25, Z+3	; 0x03
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e8       	ldi	r20, 0x80	; 128
    162c:	5f e3       	ldi	r21, 0x3F	; 63
    162e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1632:	88 23       	and	r24, r24
    1634:	2c f4       	brge	.+10     	; 0x1640 <LCD_sendCommand+0x41a>
		__ticks = 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	9e af       	std	Y+62, r25	; 0x3e
    163c:	8d af       	std	Y+61, r24	; 0x3d
    163e:	46 c0       	rjmp	.+140    	; 0x16cc <LCD_sendCommand+0x4a6>
	else if (__tmp > 65535)
    1640:	fe 01       	movw	r30, r28
    1642:	ff 96       	adiw	r30, 0x3f	; 63
    1644:	60 81       	ld	r22, Z
    1646:	71 81       	ldd	r23, Z+1	; 0x01
    1648:	82 81       	ldd	r24, Z+2	; 0x02
    164a:	93 81       	ldd	r25, Z+3	; 0x03
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	3f ef       	ldi	r19, 0xFF	; 255
    1650:	4f e7       	ldi	r20, 0x7F	; 127
    1652:	57 e4       	ldi	r21, 0x47	; 71
    1654:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1658:	18 16       	cp	r1, r24
    165a:	64 f5       	brge	.+88     	; 0x16b4 <LCD_sendCommand+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165c:	fe 01       	movw	r30, r28
    165e:	ed 5b       	subi	r30, 0xBD	; 189
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	60 81       	ld	r22, Z
    1664:	71 81       	ldd	r23, Z+1	; 0x01
    1666:	82 81       	ldd	r24, Z+2	; 0x02
    1668:	93 81       	ldd	r25, Z+3	; 0x03
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e2       	ldi	r20, 0x20	; 32
    1670:	51 e4       	ldi	r21, 0x41	; 65
    1672:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	bc 01       	movw	r22, r24
    167c:	cd 01       	movw	r24, r26
    167e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	9e af       	std	Y+62, r25	; 0x3e
    1688:	8d af       	std	Y+61, r24	; 0x3d
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <LCD_sendCommand+0x484>
    168c:	88 ec       	ldi	r24, 0xC8	; 200
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	9c af       	std	Y+60, r25	; 0x3c
    1692:	8b af       	std	Y+59, r24	; 0x3b
    1694:	8b ad       	ldd	r24, Y+59	; 0x3b
    1696:	9c ad       	ldd	r25, Y+60	; 0x3c
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <LCD_sendCommand+0x472>
    169c:	9c af       	std	Y+60, r25	; 0x3c
    169e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    16a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	9e af       	std	Y+62, r25	; 0x3e
    16a8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    16ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	69 f7       	brne	.-38     	; 0x168c <LCD_sendCommand+0x466>
    16b2:	16 c0       	rjmp	.+44     	; 0x16e0 <LCD_sendCommand+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b4:	fe 01       	movw	r30, r28
    16b6:	ff 96       	adiw	r30, 0x3f	; 63
    16b8:	60 81       	ld	r22, Z
    16ba:	71 81       	ldd	r23, Z+1	; 0x01
    16bc:	82 81       	ldd	r24, Z+2	; 0x02
    16be:	93 81       	ldd	r25, Z+3	; 0x03
    16c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	9e af       	std	Y+62, r25	; 0x3e
    16ca:	8d af       	std	Y+61, r24	; 0x3d
    16cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    16ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    16d0:	9a af       	std	Y+58, r25	; 0x3a
    16d2:	89 af       	std	Y+57, r24	; 0x39
    16d4:	89 ad       	ldd	r24, Y+57	; 0x39
    16d6:	9a ad       	ldd	r25, Y+58	; 0x3a
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <LCD_sendCommand+0x4b2>
    16dc:	9a af       	std	Y+58, r25	; 0x3a
    16de:	89 af       	std	Y+57, r24	; 0x39
			GET_BIT(command, 7));
	_delay_ms(1);
	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    16e0:	89 e3       	ldi	r24, 0x39	; 57
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	64 e0       	ldi	r22, 0x04	; 4
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	a0 e8       	ldi	r26, 0x80	; 128
    16f2:	bf e3       	ldi	r27, 0x3F	; 63
    16f4:	8d ab       	std	Y+53, r24	; 0x35
    16f6:	9e ab       	std	Y+54, r25	; 0x36
    16f8:	af ab       	std	Y+55, r26	; 0x37
    16fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fc:	6d a9       	ldd	r22, Y+53	; 0x35
    16fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1700:	8f a9       	ldd	r24, Y+55	; 0x37
    1702:	98 ad       	ldd	r25, Y+56	; 0x38
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	4a ef       	ldi	r20, 0xFA	; 250
    170a:	54 e4       	ldi	r21, 0x44	; 68
    170c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	89 ab       	std	Y+49, r24	; 0x31
    1716:	9a ab       	std	Y+50, r25	; 0x32
    1718:	ab ab       	std	Y+51, r26	; 0x33
    171a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    171c:	69 a9       	ldd	r22, Y+49	; 0x31
    171e:	7a a9       	ldd	r23, Y+50	; 0x32
    1720:	8b a9       	ldd	r24, Y+51	; 0x33
    1722:	9c a9       	ldd	r25, Y+52	; 0x34
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e8       	ldi	r20, 0x80	; 128
    172a:	5f e3       	ldi	r21, 0x3F	; 63
    172c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1730:	88 23       	and	r24, r24
    1732:	2c f4       	brge	.+10     	; 0x173e <LCD_sendCommand+0x518>
		__ticks = 1;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	98 ab       	std	Y+48, r25	; 0x30
    173a:	8f a7       	std	Y+47, r24	; 0x2f
    173c:	3f c0       	rjmp	.+126    	; 0x17bc <LCD_sendCommand+0x596>
	else if (__tmp > 65535)
    173e:	69 a9       	ldd	r22, Y+49	; 0x31
    1740:	7a a9       	ldd	r23, Y+50	; 0x32
    1742:	8b a9       	ldd	r24, Y+51	; 0x33
    1744:	9c a9       	ldd	r25, Y+52	; 0x34
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	3f ef       	ldi	r19, 0xFF	; 255
    174a:	4f e7       	ldi	r20, 0x7F	; 127
    174c:	57 e4       	ldi	r21, 0x47	; 71
    174e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1752:	18 16       	cp	r1, r24
    1754:	4c f5       	brge	.+82     	; 0x17a8 <LCD_sendCommand+0x582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1756:	6d a9       	ldd	r22, Y+53	; 0x35
    1758:	7e a9       	ldd	r23, Y+54	; 0x36
    175a:	8f a9       	ldd	r24, Y+55	; 0x37
    175c:	98 ad       	ldd	r25, Y+56	; 0x38
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	40 e2       	ldi	r20, 0x20	; 32
    1764:	51 e4       	ldi	r21, 0x41	; 65
    1766:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	bc 01       	movw	r22, r24
    1770:	cd 01       	movw	r24, r26
    1772:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	98 ab       	std	Y+48, r25	; 0x30
    177c:	8f a7       	std	Y+47, r24	; 0x2f
    177e:	0f c0       	rjmp	.+30     	; 0x179e <LCD_sendCommand+0x578>
    1780:	88 ec       	ldi	r24, 0xC8	; 200
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	9e a7       	std	Y+46, r25	; 0x2e
    1786:	8d a7       	std	Y+45, r24	; 0x2d
    1788:	8d a5       	ldd	r24, Y+45	; 0x2d
    178a:	9e a5       	ldd	r25, Y+46	; 0x2e
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <LCD_sendCommand+0x566>
    1790:	9e a7       	std	Y+46, r25	; 0x2e
    1792:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1794:	8f a5       	ldd	r24, Y+47	; 0x2f
    1796:	98 a9       	ldd	r25, Y+48	; 0x30
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	98 ab       	std	Y+48, r25	; 0x30
    179c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179e:	8f a5       	ldd	r24, Y+47	; 0x2f
    17a0:	98 a9       	ldd	r25, Y+48	; 0x30
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	69 f7       	brne	.-38     	; 0x1780 <LCD_sendCommand+0x55a>
    17a6:	14 c0       	rjmp	.+40     	; 0x17d0 <LCD_sendCommand+0x5aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a8:	69 a9       	ldd	r22, Y+49	; 0x31
    17aa:	7a a9       	ldd	r23, Y+50	; 0x32
    17ac:	8b a9       	ldd	r24, Y+51	; 0x33
    17ae:	9c a9       	ldd	r25, Y+52	; 0x34
    17b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	98 ab       	std	Y+48, r25	; 0x30
    17ba:	8f a7       	std	Y+47, r24	; 0x2f
    17bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    17be:	98 a9       	ldd	r25, Y+48	; 0x30
    17c0:	9c a7       	std	Y+44, r25	; 0x2c
    17c2:	8b a7       	std	Y+43, r24	; 0x2b
    17c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    17c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <LCD_sendCommand+0x5a2>
    17cc:	9c a7       	std	Y+44, r25	; 0x2c
    17ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    17d0:	89 e3       	ldi	r24, 0x39	; 57
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	64 e0       	ldi	r22, 0x04	; 4
    17d6:	41 e0       	ldi	r20, 0x01	; 1
    17d8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a0 e8       	ldi	r26, 0x80	; 128
    17e2:	bf e3       	ldi	r27, 0x3F	; 63
    17e4:	8f a3       	std	Y+39, r24	; 0x27
    17e6:	98 a7       	std	Y+40, r25	; 0x28
    17e8:	a9 a7       	std	Y+41, r26	; 0x29
    17ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ec:	6f a1       	ldd	r22, Y+39	; 0x27
    17ee:	78 a5       	ldd	r23, Y+40	; 0x28
    17f0:	89 a5       	ldd	r24, Y+41	; 0x29
    17f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	4a ef       	ldi	r20, 0xFA	; 250
    17fa:	54 e4       	ldi	r21, 0x44	; 68
    17fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	8b a3       	std	Y+35, r24	; 0x23
    1806:	9c a3       	std	Y+36, r25	; 0x24
    1808:	ad a3       	std	Y+37, r26	; 0x25
    180a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    180c:	6b a1       	ldd	r22, Y+35	; 0x23
    180e:	7c a1       	ldd	r23, Y+36	; 0x24
    1810:	8d a1       	ldd	r24, Y+37	; 0x25
    1812:	9e a1       	ldd	r25, Y+38	; 0x26
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e8       	ldi	r20, 0x80	; 128
    181a:	5f e3       	ldi	r21, 0x3F	; 63
    181c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1820:	88 23       	and	r24, r24
    1822:	2c f4       	brge	.+10     	; 0x182e <LCD_sendCommand+0x608>
		__ticks = 1;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9a a3       	std	Y+34, r25	; 0x22
    182a:	89 a3       	std	Y+33, r24	; 0x21
    182c:	3f c0       	rjmp	.+126    	; 0x18ac <LCD_sendCommand+0x686>
	else if (__tmp > 65535)
    182e:	6b a1       	ldd	r22, Y+35	; 0x23
    1830:	7c a1       	ldd	r23, Y+36	; 0x24
    1832:	8d a1       	ldd	r24, Y+37	; 0x25
    1834:	9e a1       	ldd	r25, Y+38	; 0x26
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	3f ef       	ldi	r19, 0xFF	; 255
    183a:	4f e7       	ldi	r20, 0x7F	; 127
    183c:	57 e4       	ldi	r21, 0x47	; 71
    183e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1842:	18 16       	cp	r1, r24
    1844:	4c f5       	brge	.+82     	; 0x1898 <LCD_sendCommand+0x672>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1846:	6f a1       	ldd	r22, Y+39	; 0x27
    1848:	78 a5       	ldd	r23, Y+40	; 0x28
    184a:	89 a5       	ldd	r24, Y+41	; 0x29
    184c:	9a a5       	ldd	r25, Y+42	; 0x2a
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e2       	ldi	r20, 0x20	; 32
    1854:	51 e4       	ldi	r21, 0x41	; 65
    1856:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	bc 01       	movw	r22, r24
    1860:	cd 01       	movw	r24, r26
    1862:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	9a a3       	std	Y+34, r25	; 0x22
    186c:	89 a3       	std	Y+33, r24	; 0x21
    186e:	0f c0       	rjmp	.+30     	; 0x188e <LCD_sendCommand+0x668>
    1870:	88 ec       	ldi	r24, 0xC8	; 200
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	98 a3       	std	Y+32, r25	; 0x20
    1876:	8f 8f       	std	Y+31, r24	; 0x1f
    1878:	8f 8d       	ldd	r24, Y+31	; 0x1f
    187a:	98 a1       	ldd	r25, Y+32	; 0x20
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <LCD_sendCommand+0x656>
    1880:	98 a3       	std	Y+32, r25	; 0x20
    1882:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1884:	89 a1       	ldd	r24, Y+33	; 0x21
    1886:	9a a1       	ldd	r25, Y+34	; 0x22
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	9a a3       	std	Y+34, r25	; 0x22
    188c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188e:	89 a1       	ldd	r24, Y+33	; 0x21
    1890:	9a a1       	ldd	r25, Y+34	; 0x22
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	69 f7       	brne	.-38     	; 0x1870 <LCD_sendCommand+0x64a>
    1896:	14 c0       	rjmp	.+40     	; 0x18c0 <LCD_sendCommand+0x69a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1898:	6b a1       	ldd	r22, Y+35	; 0x23
    189a:	7c a1       	ldd	r23, Y+36	; 0x24
    189c:	8d a1       	ldd	r24, Y+37	; 0x25
    189e:	9e a1       	ldd	r25, Y+38	; 0x26
    18a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9a a3       	std	Y+34, r25	; 0x22
    18aa:	89 a3       	std	Y+33, r24	; 0x21
    18ac:	89 a1       	ldd	r24, Y+33	; 0x21
    18ae:	9a a1       	ldd	r25, Y+34	; 0x22
    18b0:	9e 8f       	std	Y+30, r25	; 0x1e
    18b2:	8d 8f       	std	Y+29, r24	; 0x1d
    18b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <LCD_sendCommand+0x692>
    18bc:	9e 8f       	std	Y+30, r25	; 0x1e
    18be:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN, GET_BIT(command, 0));
    18c0:	fe 01       	movw	r30, r28
    18c2:	ed 59       	subi	r30, 0x9D	; 157
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	80 81       	ld	r24, Z
    18c8:	28 2f       	mov	r18, r24
    18ca:	21 70       	andi	r18, 0x01	; 1
    18cc:	89 e3       	ldi	r24, 0x39	; 57
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	68 e0       	ldi	r22, 0x08	; 8
    18d2:	42 2f       	mov	r20, r18
    18d4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 1,
    18d8:	fe 01       	movw	r30, r28
    18da:	ed 59       	subi	r30, 0x9D	; 157
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	80 81       	ld	r24, Z
    18e0:	88 2f       	mov	r24, r24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	82 70       	andi	r24, 0x02	; 2
    18e6:	90 70       	andi	r25, 0x00	; 0
    18e8:	95 95       	asr	r25
    18ea:	87 95       	ror	r24
    18ec:	28 2f       	mov	r18, r24
    18ee:	89 e3       	ldi	r24, 0x39	; 57
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	60 e1       	ldi	r22, 0x10	; 16
    18f4:	42 2f       	mov	r20, r18
    18f6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
			GET_BIT(command, 1));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 2,
    18fa:	fe 01       	movw	r30, r28
    18fc:	ed 59       	subi	r30, 0x9D	; 157
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 81       	ld	r24, Z
    1902:	88 2f       	mov	r24, r24
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	84 70       	andi	r24, 0x04	; 4
    1908:	90 70       	andi	r25, 0x00	; 0
    190a:	95 95       	asr	r25
    190c:	87 95       	ror	r24
    190e:	95 95       	asr	r25
    1910:	87 95       	ror	r24
    1912:	28 2f       	mov	r18, r24
    1914:	89 e3       	ldi	r24, 0x39	; 57
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	60 e2       	ldi	r22, 0x20	; 32
    191a:	42 2f       	mov	r20, r18
    191c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
			GET_BIT(command, 2));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 3,
    1920:	fe 01       	movw	r30, r28
    1922:	ed 59       	subi	r30, 0x9D	; 157
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	80 81       	ld	r24, Z
    1928:	88 2f       	mov	r24, r24
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	88 70       	andi	r24, 0x08	; 8
    192e:	90 70       	andi	r25, 0x00	; 0
    1930:	95 95       	asr	r25
    1932:	87 95       	ror	r24
    1934:	95 95       	asr	r25
    1936:	87 95       	ror	r24
    1938:	95 95       	asr	r25
    193a:	87 95       	ror	r24
    193c:	28 2f       	mov	r18, r24
    193e:	89 e3       	ldi	r24, 0x39	; 57
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	60 e4       	ldi	r22, 0x40	; 64
    1944:	42 2f       	mov	r20, r18
    1946:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a0 e8       	ldi	r26, 0x80	; 128
    1950:	bf e3       	ldi	r27, 0x3F	; 63
    1952:	89 8f       	std	Y+25, r24	; 0x19
    1954:	9a 8f       	std	Y+26, r25	; 0x1a
    1956:	ab 8f       	std	Y+27, r26	; 0x1b
    1958:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195a:	69 8d       	ldd	r22, Y+25	; 0x19
    195c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    195e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1960:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4a ef       	ldi	r20, 0xFA	; 250
    1968:	54 e4       	ldi	r21, 0x44	; 68
    196a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	8d 8b       	std	Y+21, r24	; 0x15
    1974:	9e 8b       	std	Y+22, r25	; 0x16
    1976:	af 8b       	std	Y+23, r26	; 0x17
    1978:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    197a:	6d 89       	ldd	r22, Y+21	; 0x15
    197c:	7e 89       	ldd	r23, Y+22	; 0x16
    197e:	8f 89       	ldd	r24, Y+23	; 0x17
    1980:	98 8d       	ldd	r25, Y+24	; 0x18
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e8       	ldi	r20, 0x80	; 128
    1988:	5f e3       	ldi	r21, 0x3F	; 63
    198a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    198e:	88 23       	and	r24, r24
    1990:	2c f4       	brge	.+10     	; 0x199c <LCD_sendCommand+0x776>
		__ticks = 1;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9c 8b       	std	Y+20, r25	; 0x14
    1998:	8b 8b       	std	Y+19, r24	; 0x13
    199a:	3f c0       	rjmp	.+126    	; 0x1a1a <LCD_sendCommand+0x7f4>
	else if (__tmp > 65535)
    199c:	6d 89       	ldd	r22, Y+21	; 0x15
    199e:	7e 89       	ldd	r23, Y+22	; 0x16
    19a0:	8f 89       	ldd	r24, Y+23	; 0x17
    19a2:	98 8d       	ldd	r25, Y+24	; 0x18
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	3f ef       	ldi	r19, 0xFF	; 255
    19a8:	4f e7       	ldi	r20, 0x7F	; 127
    19aa:	57 e4       	ldi	r21, 0x47	; 71
    19ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19b0:	18 16       	cp	r1, r24
    19b2:	4c f5       	brge	.+82     	; 0x1a06 <LCD_sendCommand+0x7e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b4:	69 8d       	ldd	r22, Y+25	; 0x19
    19b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e2       	ldi	r20, 0x20	; 32
    19c2:	51 e4       	ldi	r21, 0x41	; 65
    19c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	bc 01       	movw	r22, r24
    19ce:	cd 01       	movw	r24, r26
    19d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9c 8b       	std	Y+20, r25	; 0x14
    19da:	8b 8b       	std	Y+19, r24	; 0x13
    19dc:	0f c0       	rjmp	.+30     	; 0x19fc <LCD_sendCommand+0x7d6>
    19de:	88 ec       	ldi	r24, 0xC8	; 200
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	9a 8b       	std	Y+18, r25	; 0x12
    19e4:	89 8b       	std	Y+17, r24	; 0x11
    19e6:	89 89       	ldd	r24, Y+17	; 0x11
    19e8:	9a 89       	ldd	r25, Y+18	; 0x12
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <LCD_sendCommand+0x7c4>
    19ee:	9a 8b       	std	Y+18, r25	; 0x12
    19f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f2:	8b 89       	ldd	r24, Y+19	; 0x13
    19f4:	9c 89       	ldd	r25, Y+20	; 0x14
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	9c 8b       	std	Y+20, r25	; 0x14
    19fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fc:	8b 89       	ldd	r24, Y+19	; 0x13
    19fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	69 f7       	brne	.-38     	; 0x19de <LCD_sendCommand+0x7b8>
    1a04:	14 c0       	rjmp	.+40     	; 0x1a2e <LCD_sendCommand+0x808>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a06:	6d 89       	ldd	r22, Y+21	; 0x15
    1a08:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9c 8b       	std	Y+20, r25	; 0x14
    1a18:	8b 8b       	std	Y+19, r24	; 0x13
    1a1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a1e:	98 8b       	std	Y+16, r25	; 0x10
    1a20:	8f 87       	std	Y+15, r24	; 0x0f
    1a22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a24:	98 89       	ldd	r25, Y+16	; 0x10
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <LCD_sendCommand+0x800>
    1a2a:	98 8b       	std	Y+16, r25	; 0x10
    1a2c:	8f 87       	std	Y+15, r24	; 0x0f
			GET_BIT(command, 3));
#endif
	_delay_ms(1);
	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    1a2e:	89 e3       	ldi	r24, 0x39	; 57
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	64 e0       	ldi	r22, 0x04	; 4
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a0 e8       	ldi	r26, 0x80	; 128
    1a40:	bf e3       	ldi	r27, 0x3F	; 63
    1a42:	8b 87       	std	Y+11, r24	; 0x0b
    1a44:	9c 87       	std	Y+12, r25	; 0x0c
    1a46:	ad 87       	std	Y+13, r26	; 0x0d
    1a48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	4a ef       	ldi	r20, 0xFA	; 250
    1a58:	54 e4       	ldi	r21, 0x44	; 68
    1a5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	8f 83       	std	Y+7, r24	; 0x07
    1a64:	98 87       	std	Y+8, r25	; 0x08
    1a66:	a9 87       	std	Y+9, r26	; 0x09
    1a68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6c:	78 85       	ldd	r23, Y+8	; 0x08
    1a6e:	89 85       	ldd	r24, Y+9	; 0x09
    1a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e8       	ldi	r20, 0x80	; 128
    1a78:	5f e3       	ldi	r21, 0x3F	; 63
    1a7a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	2c f4       	brge	.+10     	; 0x1a8c <LCD_sendCommand+0x866>
		__ticks = 1;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	3f c0       	rjmp	.+126    	; 0x1b0a <LCD_sendCommand+0x8e4>
	else if (__tmp > 65535)
    1a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8e:	78 85       	ldd	r23, Y+8	; 0x08
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	3f ef       	ldi	r19, 0xFF	; 255
    1a98:	4f e7       	ldi	r20, 0x7F	; 127
    1a9a:	57 e4       	ldi	r21, 0x47	; 71
    1a9c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1aa0:	18 16       	cp	r1, r24
    1aa2:	4c f5       	brge	.+82     	; 0x1af6 <LCD_sendCommand+0x8d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e2       	ldi	r20, 0x20	; 32
    1ab2:	51 e4       	ldi	r21, 0x41	; 65
    1ab4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	bc 01       	movw	r22, r24
    1abe:	cd 01       	movw	r24, r26
    1ac0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9e 83       	std	Y+6, r25	; 0x06
    1aca:	8d 83       	std	Y+5, r24	; 0x05
    1acc:	0f c0       	rjmp	.+30     	; 0x1aec <LCD_sendCommand+0x8c6>
    1ace:	88 ec       	ldi	r24, 0xC8	; 200
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9c 83       	std	Y+4, r25	; 0x04
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <LCD_sendCommand+0x8b4>
    1ade:	9c 83       	std	Y+4, r25	; 0x04
    1ae0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	9e 81       	ldd	r25, Y+6	; 0x06
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	69 f7       	brne	.-38     	; 0x1ace <LCD_sendCommand+0x8a8>
    1af4:	14 c0       	rjmp	.+40     	; 0x1b1e <LCD_sendCommand+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af6:	6f 81       	ldd	r22, Y+7	; 0x07
    1af8:	78 85       	ldd	r23, Y+8	; 0x08
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0e:	9a 83       	std	Y+2, r25	; 0x02
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	9a 81       	ldd	r25, Y+2	; 0x02
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LCD_sendCommand+0x8f0>
    1b1a:	9a 83       	std	Y+2, r25	; 0x02
    1b1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1b1e:	cd 59       	subi	r28, 0x9D	; 157
    1b20:	df 4f       	sbci	r29, 0xFF	; 255
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	08 95       	ret

00001b36 <LCD_displayCharacter>:

// @brief Display the required character on the screen
// @param[in]  data  The data to be sent. 
void LCD_displayCharacter(uint8 data) {
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	c3 56       	subi	r28, 0x63	; 99
    1b44:	d0 40       	sbci	r29, 0x00	; 0
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	fe 01       	movw	r30, r28
    1b52:	ed 59       	subi	r30, 0x9D	; 157
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 83       	st	Z, r24
	MCAL_GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);
    1b58:	89 e3       	ldi	r24, 0x39	; 57
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	62 e0       	ldi	r22, 0x02	; 2
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
    1b64:	fe 01       	movw	r30, r28
    1b66:	e1 5a       	subi	r30, 0xA1	; 161
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	a0 e8       	ldi	r26, 0x80	; 128
    1b70:	bf e3       	ldi	r27, 0x3F	; 63
    1b72:	80 83       	st	Z, r24
    1b74:	91 83       	std	Z+1, r25	; 0x01
    1b76:	a2 83       	std	Z+2, r26	; 0x02
    1b78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7a:	8e 01       	movw	r16, r28
    1b7c:	05 5a       	subi	r16, 0xA5	; 165
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	fe 01       	movw	r30, r28
    1b82:	e1 5a       	subi	r30, 0xA1	; 161
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	60 81       	ld	r22, Z
    1b88:	71 81       	ldd	r23, Z+1	; 0x01
    1b8a:	82 81       	ldd	r24, Z+2	; 0x02
    1b8c:	93 81       	ldd	r25, Z+3	; 0x03
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	4a ef       	ldi	r20, 0xFA	; 250
    1b94:	54 e4       	ldi	r21, 0x44	; 68
    1b96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	80 83       	st	Z, r24
    1ba2:	91 83       	std	Z+1, r25	; 0x01
    1ba4:	a2 83       	std	Z+2, r26	; 0x02
    1ba6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e5 5a       	subi	r30, 0xA5	; 165
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	60 81       	ld	r22, Z
    1bb0:	71 81       	ldd	r23, Z+1	; 0x01
    1bb2:	82 81       	ldd	r24, Z+2	; 0x02
    1bb4:	93 81       	ldd	r25, Z+3	; 0x03
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	44 f4       	brge	.+16     	; 0x1bd6 <LCD_displayCharacter+0xa0>
		__ticks = 1;
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e7 5a       	subi	r30, 0xA7	; 167
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	91 83       	std	Z+1, r25	; 0x01
    1bd2:	80 83       	st	Z, r24
    1bd4:	64 c0       	rjmp	.+200    	; 0x1c9e <LCD_displayCharacter+0x168>
	else if (__tmp > 65535)
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	e5 5a       	subi	r30, 0xA5	; 165
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	60 81       	ld	r22, Z
    1bde:	71 81       	ldd	r23, Z+1	; 0x01
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	93 81       	ldd	r25, Z+3	; 0x03
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	3f ef       	ldi	r19, 0xFF	; 255
    1be8:	4f e7       	ldi	r20, 0x7F	; 127
    1bea:	57 e4       	ldi	r21, 0x47	; 71
    1bec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bf0:	18 16       	cp	r1, r24
    1bf2:	0c f0       	brlt	.+2      	; 0x1bf6 <LCD_displayCharacter+0xc0>
    1bf4:	43 c0       	rjmp	.+134    	; 0x1c7c <LCD_displayCharacter+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e1 5a       	subi	r30, 0xA1	; 161
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	60 81       	ld	r22, Z
    1bfe:	71 81       	ldd	r23, Z+1	; 0x01
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	93 81       	ldd	r25, Z+3	; 0x03
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e2       	ldi	r20, 0x20	; 32
    1c0a:	51 e4       	ldi	r21, 0x41	; 65
    1c0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	8e 01       	movw	r16, r28
    1c16:	07 5a       	subi	r16, 0xA7	; 167
    1c18:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	f8 01       	movw	r30, r16
    1c28:	91 83       	std	Z+1, r25	; 0x01
    1c2a:	80 83       	st	Z, r24
    1c2c:	1f c0       	rjmp	.+62     	; 0x1c6c <LCD_displayCharacter+0x136>
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e9 5a       	subi	r30, 0xA9	; 169
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	88 ec       	ldi	r24, 0xC8	; 200
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	e9 5a       	subi	r30, 0xA9	; 169
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	80 81       	ld	r24, Z
    1c44:	91 81       	ldd	r25, Z+1	; 0x01
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <LCD_displayCharacter+0x110>
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e9 5a       	subi	r30, 0xA9	; 169
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	91 83       	std	Z+1, r25	; 0x01
    1c52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c54:	de 01       	movw	r26, r28
    1c56:	a7 5a       	subi	r26, 0xA7	; 167
    1c58:	bf 4f       	sbci	r27, 0xFF	; 255
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	e7 5a       	subi	r30, 0xA7	; 167
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	80 81       	ld	r24, Z
    1c62:	91 81       	ldd	r25, Z+1	; 0x01
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	11 96       	adiw	r26, 0x01	; 1
    1c68:	9c 93       	st	X, r25
    1c6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e7 5a       	subi	r30, 0xA7	; 167
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	d1 f6       	brne	.-76     	; 0x1c2e <LCD_displayCharacter+0xf8>
    1c7a:	27 c0       	rjmp	.+78     	; 0x1cca <LCD_displayCharacter+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7c:	8e 01       	movw	r16, r28
    1c7e:	07 5a       	subi	r16, 0xA7	; 167
    1c80:	1f 4f       	sbci	r17, 0xFF	; 255
    1c82:	fe 01       	movw	r30, r28
    1c84:	e5 5a       	subi	r30, 0xA5	; 165
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	60 81       	ld	r22, Z
    1c8a:	71 81       	ldd	r23, Z+1	; 0x01
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	93 81       	ldd	r25, Z+3	; 0x03
    1c90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	f8 01       	movw	r30, r16
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
    1c9e:	de 01       	movw	r26, r28
    1ca0:	ab 5a       	subi	r26, 0xAB	; 171
    1ca2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e7 5a       	subi	r30, 0xA7	; 167
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	8d 93       	st	X+, r24
    1cb0:	9c 93       	st	X, r25
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	eb 5a       	subi	r30, 0xAB	; 171
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	80 81       	ld	r24, Z
    1cba:	91 81       	ldd	r25, Z+1	; 0x01
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <LCD_displayCharacter+0x186>
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	eb 5a       	subi	r30, 0xAB	; 171
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	91 83       	std	Z+1, r25	; 0x01
    1cc8:	80 83       	st	Z, r24
	_delay_ms(1);

	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    1cca:	89 e3       	ldi	r24, 0x39	; 57
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	64 e0       	ldi	r22, 0x04	; 4
    1cd0:	41 e0       	ldi	r20, 0x01	; 1
    1cd2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	ef 5a       	subi	r30, 0xAF	; 175
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	a0 e8       	ldi	r26, 0x80	; 128
    1ce2:	bf e3       	ldi	r27, 0x3F	; 63
    1ce4:	80 83       	st	Z, r24
    1ce6:	91 83       	std	Z+1, r25	; 0x01
    1ce8:	a2 83       	std	Z+2, r26	; 0x02
    1cea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cec:	8e 01       	movw	r16, r28
    1cee:	03 5b       	subi	r16, 0xB3	; 179
    1cf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	ef 5a       	subi	r30, 0xAF	; 175
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	60 81       	ld	r22, Z
    1cfa:	71 81       	ldd	r23, Z+1	; 0x01
    1cfc:	82 81       	ldd	r24, Z+2	; 0x02
    1cfe:	93 81       	ldd	r25, Z+3	; 0x03
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	4a ef       	ldi	r20, 0xFA	; 250
    1d06:	54 e4       	ldi	r21, 0x44	; 68
    1d08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	f8 01       	movw	r30, r16
    1d12:	80 83       	st	Z, r24
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	a2 83       	std	Z+2, r26	; 0x02
    1d18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	e3 5b       	subi	r30, 0xB3	; 179
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	60 81       	ld	r22, Z
    1d22:	71 81       	ldd	r23, Z+1	; 0x01
    1d24:	82 81       	ldd	r24, Z+2	; 0x02
    1d26:	93 81       	ldd	r25, Z+3	; 0x03
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e8       	ldi	r20, 0x80	; 128
    1d2e:	5f e3       	ldi	r21, 0x3F	; 63
    1d30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d34:	88 23       	and	r24, r24
    1d36:	44 f4       	brge	.+16     	; 0x1d48 <LCD_displayCharacter+0x212>
		__ticks = 1;
    1d38:	fe 01       	movw	r30, r28
    1d3a:	e5 5b       	subi	r30, 0xB5	; 181
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	91 83       	std	Z+1, r25	; 0x01
    1d44:	80 83       	st	Z, r24
    1d46:	64 c0       	rjmp	.+200    	; 0x1e10 <LCD_displayCharacter+0x2da>
	else if (__tmp > 65535)
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e3 5b       	subi	r30, 0xB3	; 179
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	60 81       	ld	r22, Z
    1d50:	71 81       	ldd	r23, Z+1	; 0x01
    1d52:	82 81       	ldd	r24, Z+2	; 0x02
    1d54:	93 81       	ldd	r25, Z+3	; 0x03
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	3f ef       	ldi	r19, 0xFF	; 255
    1d5a:	4f e7       	ldi	r20, 0x7F	; 127
    1d5c:	57 e4       	ldi	r21, 0x47	; 71
    1d5e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d62:	18 16       	cp	r1, r24
    1d64:	0c f0       	brlt	.+2      	; 0x1d68 <LCD_displayCharacter+0x232>
    1d66:	43 c0       	rjmp	.+134    	; 0x1dee <LCD_displayCharacter+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d68:	fe 01       	movw	r30, r28
    1d6a:	ef 5a       	subi	r30, 0xAF	; 175
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	60 81       	ld	r22, Z
    1d70:	71 81       	ldd	r23, Z+1	; 0x01
    1d72:	82 81       	ldd	r24, Z+2	; 0x02
    1d74:	93 81       	ldd	r25, Z+3	; 0x03
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e2       	ldi	r20, 0x20	; 32
    1d7c:	51 e4       	ldi	r21, 0x41	; 65
    1d7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	8e 01       	movw	r16, r28
    1d88:	05 5b       	subi	r16, 0xB5	; 181
    1d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8c:	bc 01       	movw	r22, r24
    1d8e:	cd 01       	movw	r24, r26
    1d90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	f8 01       	movw	r30, r16
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	80 83       	st	Z, r24
    1d9e:	1f c0       	rjmp	.+62     	; 0x1dde <LCD_displayCharacter+0x2a8>
    1da0:	fe 01       	movw	r30, r28
    1da2:	e7 5b       	subi	r30, 0xB7	; 183
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	88 ec       	ldi	r24, 0xC8	; 200
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	91 83       	std	Z+1, r25	; 0x01
    1dac:	80 83       	st	Z, r24
    1dae:	fe 01       	movw	r30, r28
    1db0:	e7 5b       	subi	r30, 0xB7	; 183
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	80 81       	ld	r24, Z
    1db6:	91 81       	ldd	r25, Z+1	; 0x01
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <LCD_displayCharacter+0x282>
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e7 5b       	subi	r30, 0xB7	; 183
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	91 83       	std	Z+1, r25	; 0x01
    1dc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc6:	de 01       	movw	r26, r28
    1dc8:	a5 5b       	subi	r26, 0xB5	; 181
    1dca:	bf 4f       	sbci	r27, 0xFF	; 255
    1dcc:	fe 01       	movw	r30, r28
    1dce:	e5 5b       	subi	r30, 0xB5	; 181
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	80 81       	ld	r24, Z
    1dd4:	91 81       	ldd	r25, Z+1	; 0x01
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	11 96       	adiw	r26, 0x01	; 1
    1dda:	9c 93       	st	X, r25
    1ddc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dde:	fe 01       	movw	r30, r28
    1de0:	e5 5b       	subi	r30, 0xB5	; 181
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	80 81       	ld	r24, Z
    1de6:	91 81       	ldd	r25, Z+1	; 0x01
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	d1 f6       	brne	.-76     	; 0x1da0 <LCD_displayCharacter+0x26a>
    1dec:	27 c0       	rjmp	.+78     	; 0x1e3c <LCD_displayCharacter+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dee:	8e 01       	movw	r16, r28
    1df0:	05 5b       	subi	r16, 0xB5	; 181
    1df2:	1f 4f       	sbci	r17, 0xFF	; 255
    1df4:	fe 01       	movw	r30, r28
    1df6:	e3 5b       	subi	r30, 0xB3	; 179
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	60 81       	ld	r22, Z
    1dfc:	71 81       	ldd	r23, Z+1	; 0x01
    1dfe:	82 81       	ldd	r24, Z+2	; 0x02
    1e00:	93 81       	ldd	r25, Z+3	; 0x03
    1e02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	f8 01       	movw	r30, r16
    1e0c:	91 83       	std	Z+1, r25	; 0x01
    1e0e:	80 83       	st	Z, r24
    1e10:	de 01       	movw	r26, r28
    1e12:	a9 5b       	subi	r26, 0xB9	; 185
    1e14:	bf 4f       	sbci	r27, 0xFF	; 255
    1e16:	fe 01       	movw	r30, r28
    1e18:	e5 5b       	subi	r30, 0xB5	; 181
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	8d 93       	st	X+, r24
    1e22:	9c 93       	st	X, r25
    1e24:	fe 01       	movw	r30, r28
    1e26:	e9 5b       	subi	r30, 0xB9	; 185
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	80 81       	ld	r24, Z
    1e2c:	91 81       	ldd	r25, Z+1	; 0x01
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <LCD_displayCharacter+0x2f8>
    1e32:	fe 01       	movw	r30, r28
    1e34:	e9 5b       	subi	r30, 0xB9	; 185
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	91 83       	std	Z+1, r25	; 0x01
    1e3a:	80 83       	st	Z, r24
	_delay_ms(1);
#if LCD_BITS == 8
	MCAL_GPIO_writePort(LCD_DATA_PORT, (MCAL_GPIO_readPort(LCD_DATA_PORT) & 0xFF00)| data);
#elif LCD_BITS == 4
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN, GET_BIT(data, 4));
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	ed 59       	subi	r30, 0x9D	; 157
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	80 81       	ld	r24, Z
    1e44:	88 2f       	mov	r24, r24
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	80 71       	andi	r24, 0x10	; 16
    1e4a:	90 70       	andi	r25, 0x00	; 0
    1e4c:	95 95       	asr	r25
    1e4e:	87 95       	ror	r24
    1e50:	95 95       	asr	r25
    1e52:	87 95       	ror	r24
    1e54:	95 95       	asr	r25
    1e56:	87 95       	ror	r24
    1e58:	95 95       	asr	r25
    1e5a:	87 95       	ror	r24
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	89 e3       	ldi	r24, 0x39	; 57
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	68 e0       	ldi	r22, 0x08	; 8
    1e64:	42 2f       	mov	r20, r18
    1e66:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 1,
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	ed 59       	subi	r30, 0x9D	; 157
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	80 81       	ld	r24, Z
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	80 72       	andi	r24, 0x20	; 32
    1e78:	90 70       	andi	r25, 0x00	; 0
    1e7a:	95 95       	asr	r25
    1e7c:	87 95       	ror	r24
    1e7e:	95 95       	asr	r25
    1e80:	87 95       	ror	r24
    1e82:	95 95       	asr	r25
    1e84:	87 95       	ror	r24
    1e86:	95 95       	asr	r25
    1e88:	87 95       	ror	r24
    1e8a:	95 95       	asr	r25
    1e8c:	87 95       	ror	r24
    1e8e:	28 2f       	mov	r18, r24
    1e90:	89 e3       	ldi	r24, 0x39	; 57
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	60 e1       	ldi	r22, 0x10	; 16
    1e96:	42 2f       	mov	r20, r18
    1e98:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
			GET_BIT(data, 5));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 2,
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	ed 59       	subi	r30, 0x9D	; 157
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	80 81       	ld	r24, Z
    1ea4:	88 2f       	mov	r24, r24
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	80 74       	andi	r24, 0x40	; 64
    1eaa:	90 70       	andi	r25, 0x00	; 0
    1eac:	08 2e       	mov	r0, r24
    1eae:	89 2f       	mov	r24, r25
    1eb0:	00 0c       	add	r0, r0
    1eb2:	88 1f       	adc	r24, r24
    1eb4:	99 0b       	sbc	r25, r25
    1eb6:	00 0c       	add	r0, r0
    1eb8:	88 1f       	adc	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	89 e3       	ldi	r24, 0x39	; 57
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	60 e2       	ldi	r22, 0x20	; 32
    1ec4:	42 2f       	mov	r20, r18
    1ec6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
			GET_BIT(data, 6));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 3,
    1eca:	fe 01       	movw	r30, r28
    1ecc:	ed 59       	subi	r30, 0x9D	; 157
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 81       	ld	r24, Z
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	22 1f       	adc	r18, r18
    1ed6:	22 27       	eor	r18, r18
    1ed8:	22 1f       	adc	r18, r18
    1eda:	89 e3       	ldi	r24, 0x39	; 57
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	60 e4       	ldi	r22, 0x40	; 64
    1ee0:	42 2f       	mov	r20, r18
    1ee2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	ed 5b       	subi	r30, 0xBD	; 189
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a0 e8       	ldi	r26, 0x80	; 128
    1ef2:	bf e3       	ldi	r27, 0x3F	; 63
    1ef4:	80 83       	st	Z, r24
    1ef6:	91 83       	std	Z+1, r25	; 0x01
    1ef8:	a2 83       	std	Z+2, r26	; 0x02
    1efa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efc:	8e 01       	movw	r16, r28
    1efe:	01 5c       	subi	r16, 0xC1	; 193
    1f00:	1f 4f       	sbci	r17, 0xFF	; 255
    1f02:	fe 01       	movw	r30, r28
    1f04:	ed 5b       	subi	r30, 0xBD	; 189
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	60 81       	ld	r22, Z
    1f0a:	71 81       	ldd	r23, Z+1	; 0x01
    1f0c:	82 81       	ldd	r24, Z+2	; 0x02
    1f0e:	93 81       	ldd	r25, Z+3	; 0x03
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	4a ef       	ldi	r20, 0xFA	; 250
    1f16:	54 e4       	ldi	r21, 0x44	; 68
    1f18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	f8 01       	movw	r30, r16
    1f22:	80 83       	st	Z, r24
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	a2 83       	std	Z+2, r26	; 0x02
    1f28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	ff 96       	adiw	r30, 0x3f	; 63
    1f2e:	60 81       	ld	r22, Z
    1f30:	71 81       	ldd	r23, Z+1	; 0x01
    1f32:	82 81       	ldd	r24, Z+2	; 0x02
    1f34:	93 81       	ldd	r25, Z+3	; 0x03
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e8       	ldi	r20, 0x80	; 128
    1f3c:	5f e3       	ldi	r21, 0x3F	; 63
    1f3e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f42:	88 23       	and	r24, r24
    1f44:	2c f4       	brge	.+10     	; 0x1f50 <LCD_displayCharacter+0x41a>
		__ticks = 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9e af       	std	Y+62, r25	; 0x3e
    1f4c:	8d af       	std	Y+61, r24	; 0x3d
    1f4e:	46 c0       	rjmp	.+140    	; 0x1fdc <LCD_displayCharacter+0x4a6>
	else if (__tmp > 65535)
    1f50:	fe 01       	movw	r30, r28
    1f52:	ff 96       	adiw	r30, 0x3f	; 63
    1f54:	60 81       	ld	r22, Z
    1f56:	71 81       	ldd	r23, Z+1	; 0x01
    1f58:	82 81       	ldd	r24, Z+2	; 0x02
    1f5a:	93 81       	ldd	r25, Z+3	; 0x03
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	3f ef       	ldi	r19, 0xFF	; 255
    1f60:	4f e7       	ldi	r20, 0x7F	; 127
    1f62:	57 e4       	ldi	r21, 0x47	; 71
    1f64:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f68:	18 16       	cp	r1, r24
    1f6a:	64 f5       	brge	.+88     	; 0x1fc4 <LCD_displayCharacter+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	ed 5b       	subi	r30, 0xBD	; 189
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	60 81       	ld	r22, Z
    1f74:	71 81       	ldd	r23, Z+1	; 0x01
    1f76:	82 81       	ldd	r24, Z+2	; 0x02
    1f78:	93 81       	ldd	r25, Z+3	; 0x03
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e2       	ldi	r20, 0x20	; 32
    1f80:	51 e4       	ldi	r21, 0x41	; 65
    1f82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	9e af       	std	Y+62, r25	; 0x3e
    1f98:	8d af       	std	Y+61, r24	; 0x3d
    1f9a:	0f c0       	rjmp	.+30     	; 0x1fba <LCD_displayCharacter+0x484>
    1f9c:	88 ec       	ldi	r24, 0xC8	; 200
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9c af       	std	Y+60, r25	; 0x3c
    1fa2:	8b af       	std	Y+59, r24	; 0x3b
    1fa4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fa6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <LCD_displayCharacter+0x472>
    1fac:	9c af       	std	Y+60, r25	; 0x3c
    1fae:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	9e af       	std	Y+62, r25	; 0x3e
    1fb8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fba:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fbc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	69 f7       	brne	.-38     	; 0x1f9c <LCD_displayCharacter+0x466>
    1fc2:	16 c0       	rjmp	.+44     	; 0x1ff0 <LCD_displayCharacter+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	ff 96       	adiw	r30, 0x3f	; 63
    1fc8:	60 81       	ld	r22, Z
    1fca:	71 81       	ldd	r23, Z+1	; 0x01
    1fcc:	82 81       	ldd	r24, Z+2	; 0x02
    1fce:	93 81       	ldd	r25, Z+3	; 0x03
    1fd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	9e af       	std	Y+62, r25	; 0x3e
    1fda:	8d af       	std	Y+61, r24	; 0x3d
    1fdc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fde:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fe0:	9a af       	std	Y+58, r25	; 0x3a
    1fe2:	89 af       	std	Y+57, r24	; 0x39
    1fe4:	89 ad       	ldd	r24, Y+57	; 0x39
    1fe6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <LCD_displayCharacter+0x4b2>
    1fec:	9a af       	std	Y+58, r25	; 0x3a
    1fee:	89 af       	std	Y+57, r24	; 0x39
			GET_BIT(data, 7));
	_delay_ms(1);
	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    1ff0:	89 e3       	ldi	r24, 0x39	; 57
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	64 e0       	ldi	r22, 0x04	; 4
    1ff6:	40 e0       	ldi	r20, 0x00	; 0
    1ff8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	a0 e8       	ldi	r26, 0x80	; 128
    2002:	bf e3       	ldi	r27, 0x3F	; 63
    2004:	8d ab       	std	Y+53, r24	; 0x35
    2006:	9e ab       	std	Y+54, r25	; 0x36
    2008:	af ab       	std	Y+55, r26	; 0x37
    200a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200c:	6d a9       	ldd	r22, Y+53	; 0x35
    200e:	7e a9       	ldd	r23, Y+54	; 0x36
    2010:	8f a9       	ldd	r24, Y+55	; 0x37
    2012:	98 ad       	ldd	r25, Y+56	; 0x38
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a ef       	ldi	r20, 0xFA	; 250
    201a:	54 e4       	ldi	r21, 0x44	; 68
    201c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	89 ab       	std	Y+49, r24	; 0x31
    2026:	9a ab       	std	Y+50, r25	; 0x32
    2028:	ab ab       	std	Y+51, r26	; 0x33
    202a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    202c:	69 a9       	ldd	r22, Y+49	; 0x31
    202e:	7a a9       	ldd	r23, Y+50	; 0x32
    2030:	8b a9       	ldd	r24, Y+51	; 0x33
    2032:	9c a9       	ldd	r25, Y+52	; 0x34
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	2c f4       	brge	.+10     	; 0x204e <LCD_displayCharacter+0x518>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	98 ab       	std	Y+48, r25	; 0x30
    204a:	8f a7       	std	Y+47, r24	; 0x2f
    204c:	3f c0       	rjmp	.+126    	; 0x20cc <LCD_displayCharacter+0x596>
	else if (__tmp > 65535)
    204e:	69 a9       	ldd	r22, Y+49	; 0x31
    2050:	7a a9       	ldd	r23, Y+50	; 0x32
    2052:	8b a9       	ldd	r24, Y+51	; 0x33
    2054:	9c a9       	ldd	r25, Y+52	; 0x34
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	3f ef       	ldi	r19, 0xFF	; 255
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	57 e4       	ldi	r21, 0x47	; 71
    205e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	4c f5       	brge	.+82     	; 0x20b8 <LCD_displayCharacter+0x582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2066:	6d a9       	ldd	r22, Y+53	; 0x35
    2068:	7e a9       	ldd	r23, Y+54	; 0x36
    206a:	8f a9       	ldd	r24, Y+55	; 0x37
    206c:	98 ad       	ldd	r25, Y+56	; 0x38
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	98 ab       	std	Y+48, r25	; 0x30
    208c:	8f a7       	std	Y+47, r24	; 0x2f
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <LCD_displayCharacter+0x578>
    2090:	88 ec       	ldi	r24, 0xC8	; 200
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9e a7       	std	Y+46, r25	; 0x2e
    2096:	8d a7       	std	Y+45, r24	; 0x2d
    2098:	8d a5       	ldd	r24, Y+45	; 0x2d
    209a:	9e a5       	ldd	r25, Y+46	; 0x2e
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_displayCharacter+0x566>
    20a0:	9e a7       	std	Y+46, r25	; 0x2e
    20a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a6:	98 a9       	ldd	r25, Y+48	; 0x30
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	98 ab       	std	Y+48, r25	; 0x30
    20ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b0:	98 a9       	ldd	r25, Y+48	; 0x30
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	69 f7       	brne	.-38     	; 0x2090 <LCD_displayCharacter+0x55a>
    20b6:	14 c0       	rjmp	.+40     	; 0x20e0 <LCD_displayCharacter+0x5aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b8:	69 a9       	ldd	r22, Y+49	; 0x31
    20ba:	7a a9       	ldd	r23, Y+50	; 0x32
    20bc:	8b a9       	ldd	r24, Y+51	; 0x33
    20be:	9c a9       	ldd	r25, Y+52	; 0x34
    20c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	98 ab       	std	Y+48, r25	; 0x30
    20ca:	8f a7       	std	Y+47, r24	; 0x2f
    20cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ce:	98 a9       	ldd	r25, Y+48	; 0x30
    20d0:	9c a7       	std	Y+44, r25	; 0x2c
    20d2:	8b a7       	std	Y+43, r24	; 0x2b
    20d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    20d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <LCD_displayCharacter+0x5a2>
    20dc:	9c a7       	std	Y+44, r25	; 0x2c
    20de:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    20e0:	89 e3       	ldi	r24, 0x39	; 57
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	64 e0       	ldi	r22, 0x04	; 4
    20e6:	41 e0       	ldi	r20, 0x01	; 1
    20e8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	a0 e8       	ldi	r26, 0x80	; 128
    20f2:	bf e3       	ldi	r27, 0x3F	; 63
    20f4:	8f a3       	std	Y+39, r24	; 0x27
    20f6:	98 a7       	std	Y+40, r25	; 0x28
    20f8:	a9 a7       	std	Y+41, r26	; 0x29
    20fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fc:	6f a1       	ldd	r22, Y+39	; 0x27
    20fe:	78 a5       	ldd	r23, Y+40	; 0x28
    2100:	89 a5       	ldd	r24, Y+41	; 0x29
    2102:	9a a5       	ldd	r25, Y+42	; 0x2a
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	4a ef       	ldi	r20, 0xFA	; 250
    210a:	54 e4       	ldi	r21, 0x44	; 68
    210c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	8b a3       	std	Y+35, r24	; 0x23
    2116:	9c a3       	std	Y+36, r25	; 0x24
    2118:	ad a3       	std	Y+37, r26	; 0x25
    211a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    211c:	6b a1       	ldd	r22, Y+35	; 0x23
    211e:	7c a1       	ldd	r23, Y+36	; 0x24
    2120:	8d a1       	ldd	r24, Y+37	; 0x25
    2122:	9e a1       	ldd	r25, Y+38	; 0x26
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e8       	ldi	r20, 0x80	; 128
    212a:	5f e3       	ldi	r21, 0x3F	; 63
    212c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2130:	88 23       	and	r24, r24
    2132:	2c f4       	brge	.+10     	; 0x213e <LCD_displayCharacter+0x608>
		__ticks = 1;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	9a a3       	std	Y+34, r25	; 0x22
    213a:	89 a3       	std	Y+33, r24	; 0x21
    213c:	3f c0       	rjmp	.+126    	; 0x21bc <LCD_displayCharacter+0x686>
	else if (__tmp > 65535)
    213e:	6b a1       	ldd	r22, Y+35	; 0x23
    2140:	7c a1       	ldd	r23, Y+36	; 0x24
    2142:	8d a1       	ldd	r24, Y+37	; 0x25
    2144:	9e a1       	ldd	r25, Y+38	; 0x26
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	3f ef       	ldi	r19, 0xFF	; 255
    214a:	4f e7       	ldi	r20, 0x7F	; 127
    214c:	57 e4       	ldi	r21, 0x47	; 71
    214e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2152:	18 16       	cp	r1, r24
    2154:	4c f5       	brge	.+82     	; 0x21a8 <LCD_displayCharacter+0x672>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2156:	6f a1       	ldd	r22, Y+39	; 0x27
    2158:	78 a5       	ldd	r23, Y+40	; 0x28
    215a:	89 a5       	ldd	r24, Y+41	; 0x29
    215c:	9a a5       	ldd	r25, Y+42	; 0x2a
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e2       	ldi	r20, 0x20	; 32
    2164:	51 e4       	ldi	r21, 0x41	; 65
    2166:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	9a a3       	std	Y+34, r25	; 0x22
    217c:	89 a3       	std	Y+33, r24	; 0x21
    217e:	0f c0       	rjmp	.+30     	; 0x219e <LCD_displayCharacter+0x668>
    2180:	88 ec       	ldi	r24, 0xC8	; 200
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	98 a3       	std	Y+32, r25	; 0x20
    2186:	8f 8f       	std	Y+31, r24	; 0x1f
    2188:	8f 8d       	ldd	r24, Y+31	; 0x1f
    218a:	98 a1       	ldd	r25, Y+32	; 0x20
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <LCD_displayCharacter+0x656>
    2190:	98 a3       	std	Y+32, r25	; 0x20
    2192:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2194:	89 a1       	ldd	r24, Y+33	; 0x21
    2196:	9a a1       	ldd	r25, Y+34	; 0x22
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	9a a3       	std	Y+34, r25	; 0x22
    219c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219e:	89 a1       	ldd	r24, Y+33	; 0x21
    21a0:	9a a1       	ldd	r25, Y+34	; 0x22
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	69 f7       	brne	.-38     	; 0x2180 <LCD_displayCharacter+0x64a>
    21a6:	14 c0       	rjmp	.+40     	; 0x21d0 <LCD_displayCharacter+0x69a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a8:	6b a1       	ldd	r22, Y+35	; 0x23
    21aa:	7c a1       	ldd	r23, Y+36	; 0x24
    21ac:	8d a1       	ldd	r24, Y+37	; 0x25
    21ae:	9e a1       	ldd	r25, Y+38	; 0x26
    21b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9a a3       	std	Y+34, r25	; 0x22
    21ba:	89 a3       	std	Y+33, r24	; 0x21
    21bc:	89 a1       	ldd	r24, Y+33	; 0x21
    21be:	9a a1       	ldd	r25, Y+34	; 0x22
    21c0:	9e 8f       	std	Y+30, r25	; 0x1e
    21c2:	8d 8f       	std	Y+29, r24	; 0x1d
    21c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <LCD_displayCharacter+0x692>
    21cc:	9e 8f       	std	Y+30, r25	; 0x1e
    21ce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN, GET_BIT(data, 0));
    21d0:	fe 01       	movw	r30, r28
    21d2:	ed 59       	subi	r30, 0x9D	; 157
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	80 81       	ld	r24, Z
    21d8:	28 2f       	mov	r18, r24
    21da:	21 70       	andi	r18, 0x01	; 1
    21dc:	89 e3       	ldi	r24, 0x39	; 57
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	68 e0       	ldi	r22, 0x08	; 8
    21e2:	42 2f       	mov	r20, r18
    21e4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 1,
    21e8:	fe 01       	movw	r30, r28
    21ea:	ed 59       	subi	r30, 0x9D	; 157
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	80 81       	ld	r24, Z
    21f0:	88 2f       	mov	r24, r24
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	82 70       	andi	r24, 0x02	; 2
    21f6:	90 70       	andi	r25, 0x00	; 0
    21f8:	95 95       	asr	r25
    21fa:	87 95       	ror	r24
    21fc:	28 2f       	mov	r18, r24
    21fe:	89 e3       	ldi	r24, 0x39	; 57
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	60 e1       	ldi	r22, 0x10	; 16
    2204:	42 2f       	mov	r20, r18
    2206:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
			GET_BIT(data, 1));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 2,
    220a:	fe 01       	movw	r30, r28
    220c:	ed 59       	subi	r30, 0x9D	; 157
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	80 81       	ld	r24, Z
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	84 70       	andi	r24, 0x04	; 4
    2218:	90 70       	andi	r25, 0x00	; 0
    221a:	95 95       	asr	r25
    221c:	87 95       	ror	r24
    221e:	95 95       	asr	r25
    2220:	87 95       	ror	r24
    2222:	28 2f       	mov	r18, r24
    2224:	89 e3       	ldi	r24, 0x39	; 57
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	60 e2       	ldi	r22, 0x20	; 32
    222a:	42 2f       	mov	r20, r18
    222c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
			GET_BIT(data, 2));
	MCAL_GPIO_writePin(LCD_DATA_PORT, LCD_DATA_START_PIN << 3,
    2230:	fe 01       	movw	r30, r28
    2232:	ed 59       	subi	r30, 0x9D	; 157
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 81       	ld	r24, Z
    2238:	88 2f       	mov	r24, r24
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	88 70       	andi	r24, 0x08	; 8
    223e:	90 70       	andi	r25, 0x00	; 0
    2240:	95 95       	asr	r25
    2242:	87 95       	ror	r24
    2244:	95 95       	asr	r25
    2246:	87 95       	ror	r24
    2248:	95 95       	asr	r25
    224a:	87 95       	ror	r24
    224c:	28 2f       	mov	r18, r24
    224e:	89 e3       	ldi	r24, 0x39	; 57
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	60 e4       	ldi	r22, 0x40	; 64
    2254:	42 2f       	mov	r20, r18
    2256:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	a0 e8       	ldi	r26, 0x80	; 128
    2260:	bf e3       	ldi	r27, 0x3F	; 63
    2262:	89 8f       	std	Y+25, r24	; 0x19
    2264:	9a 8f       	std	Y+26, r25	; 0x1a
    2266:	ab 8f       	std	Y+27, r26	; 0x1b
    2268:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226a:	69 8d       	ldd	r22, Y+25	; 0x19
    226c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    226e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2270:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	4a ef       	ldi	r20, 0xFA	; 250
    2278:	54 e4       	ldi	r21, 0x44	; 68
    227a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	8d 8b       	std	Y+21, r24	; 0x15
    2284:	9e 8b       	std	Y+22, r25	; 0x16
    2286:	af 8b       	std	Y+23, r26	; 0x17
    2288:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    228a:	6d 89       	ldd	r22, Y+21	; 0x15
    228c:	7e 89       	ldd	r23, Y+22	; 0x16
    228e:	8f 89       	ldd	r24, Y+23	; 0x17
    2290:	98 8d       	ldd	r25, Y+24	; 0x18
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e8       	ldi	r20, 0x80	; 128
    2298:	5f e3       	ldi	r21, 0x3F	; 63
    229a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    229e:	88 23       	and	r24, r24
    22a0:	2c f4       	brge	.+10     	; 0x22ac <LCD_displayCharacter+0x776>
		__ticks = 1;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	9c 8b       	std	Y+20, r25	; 0x14
    22a8:	8b 8b       	std	Y+19, r24	; 0x13
    22aa:	3f c0       	rjmp	.+126    	; 0x232a <LCD_displayCharacter+0x7f4>
	else if (__tmp > 65535)
    22ac:	6d 89       	ldd	r22, Y+21	; 0x15
    22ae:	7e 89       	ldd	r23, Y+22	; 0x16
    22b0:	8f 89       	ldd	r24, Y+23	; 0x17
    22b2:	98 8d       	ldd	r25, Y+24	; 0x18
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	3f ef       	ldi	r19, 0xFF	; 255
    22b8:	4f e7       	ldi	r20, 0x7F	; 127
    22ba:	57 e4       	ldi	r21, 0x47	; 71
    22bc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22c0:	18 16       	cp	r1, r24
    22c2:	4c f5       	brge	.+82     	; 0x2316 <LCD_displayCharacter+0x7e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c4:	69 8d       	ldd	r22, Y+25	; 0x19
    22c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e2       	ldi	r20, 0x20	; 32
    22d2:	51 e4       	ldi	r21, 0x41	; 65
    22d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9c 8b       	std	Y+20, r25	; 0x14
    22ea:	8b 8b       	std	Y+19, r24	; 0x13
    22ec:	0f c0       	rjmp	.+30     	; 0x230c <LCD_displayCharacter+0x7d6>
    22ee:	88 ec       	ldi	r24, 0xC8	; 200
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9a 8b       	std	Y+18, r25	; 0x12
    22f4:	89 8b       	std	Y+17, r24	; 0x11
    22f6:	89 89       	ldd	r24, Y+17	; 0x11
    22f8:	9a 89       	ldd	r25, Y+18	; 0x12
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <LCD_displayCharacter+0x7c4>
    22fe:	9a 8b       	std	Y+18, r25	; 0x12
    2300:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2302:	8b 89       	ldd	r24, Y+19	; 0x13
    2304:	9c 89       	ldd	r25, Y+20	; 0x14
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	9c 8b       	std	Y+20, r25	; 0x14
    230a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230c:	8b 89       	ldd	r24, Y+19	; 0x13
    230e:	9c 89       	ldd	r25, Y+20	; 0x14
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	69 f7       	brne	.-38     	; 0x22ee <LCD_displayCharacter+0x7b8>
    2314:	14 c0       	rjmp	.+40     	; 0x233e <LCD_displayCharacter+0x808>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2316:	6d 89       	ldd	r22, Y+21	; 0x15
    2318:	7e 89       	ldd	r23, Y+22	; 0x16
    231a:	8f 89       	ldd	r24, Y+23	; 0x17
    231c:	98 8d       	ldd	r25, Y+24	; 0x18
    231e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9c 8b       	std	Y+20, r25	; 0x14
    2328:	8b 8b       	std	Y+19, r24	; 0x13
    232a:	8b 89       	ldd	r24, Y+19	; 0x13
    232c:	9c 89       	ldd	r25, Y+20	; 0x14
    232e:	98 8b       	std	Y+16, r25	; 0x10
    2330:	8f 87       	std	Y+15, r24	; 0x0f
    2332:	8f 85       	ldd	r24, Y+15	; 0x0f
    2334:	98 89       	ldd	r25, Y+16	; 0x10
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <LCD_displayCharacter+0x800>
    233a:	98 8b       	std	Y+16, r25	; 0x10
    233c:	8f 87       	std	Y+15, r24	; 0x0f
			GET_BIT(data, 3));
#endif
	_delay_ms(1);
	MCAL_GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    233e:	89 e3       	ldi	r24, 0x39	; 57
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	64 e0       	ldi	r22, 0x04	; 4
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MCAL_GPIO_writePin>
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	a0 e8       	ldi	r26, 0x80	; 128
    2350:	bf e3       	ldi	r27, 0x3F	; 63
    2352:	8b 87       	std	Y+11, r24	; 0x0b
    2354:	9c 87       	std	Y+12, r25	; 0x0c
    2356:	ad 87       	std	Y+13, r26	; 0x0d
    2358:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235a:	6b 85       	ldd	r22, Y+11	; 0x0b
    235c:	7c 85       	ldd	r23, Y+12	; 0x0c
    235e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2360:	9e 85       	ldd	r25, Y+14	; 0x0e
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4a ef       	ldi	r20, 0xFA	; 250
    2368:	54 e4       	ldi	r21, 0x44	; 68
    236a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	8f 83       	std	Y+7, r24	; 0x07
    2374:	98 87       	std	Y+8, r25	; 0x08
    2376:	a9 87       	std	Y+9, r26	; 0x09
    2378:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    237a:	6f 81       	ldd	r22, Y+7	; 0x07
    237c:	78 85       	ldd	r23, Y+8	; 0x08
    237e:	89 85       	ldd	r24, Y+9	; 0x09
    2380:	9a 85       	ldd	r25, Y+10	; 0x0a
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    238e:	88 23       	and	r24, r24
    2390:	2c f4       	brge	.+10     	; 0x239c <LCD_displayCharacter+0x866>
		__ticks = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9e 83       	std	Y+6, r25	; 0x06
    2398:	8d 83       	std	Y+5, r24	; 0x05
    239a:	3f c0       	rjmp	.+126    	; 0x241a <LCD_displayCharacter+0x8e4>
	else if (__tmp > 65535)
    239c:	6f 81       	ldd	r22, Y+7	; 0x07
    239e:	78 85       	ldd	r23, Y+8	; 0x08
    23a0:	89 85       	ldd	r24, Y+9	; 0x09
    23a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	3f ef       	ldi	r19, 0xFF	; 255
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	57 e4       	ldi	r21, 0x47	; 71
    23ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23b0:	18 16       	cp	r1, r24
    23b2:	4c f5       	brge	.+82     	; 0x2406 <LCD_displayCharacter+0x8d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e2       	ldi	r20, 0x20	; 32
    23c2:	51 e4       	ldi	r21, 0x41	; 65
    23c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	9e 83       	std	Y+6, r25	; 0x06
    23da:	8d 83       	std	Y+5, r24	; 0x05
    23dc:	0f c0       	rjmp	.+30     	; 0x23fc <LCD_displayCharacter+0x8c6>
    23de:	88 ec       	ldi	r24, 0xC8	; 200
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	9c 83       	std	Y+4, r25	; 0x04
    23e4:	8b 83       	std	Y+3, r24	; 0x03
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_displayCharacter+0x8b4>
    23ee:	9c 83       	std	Y+4, r25	; 0x04
    23f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	9e 83       	std	Y+6, r25	; 0x06
    23fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	69 f7       	brne	.-38     	; 0x23de <LCD_displayCharacter+0x8a8>
    2404:	14 c0       	rjmp	.+40     	; 0x242e <LCD_displayCharacter+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2406:	6f 81       	ldd	r22, Y+7	; 0x07
    2408:	78 85       	ldd	r23, Y+8	; 0x08
    240a:	89 85       	ldd	r24, Y+9	; 0x09
    240c:	9a 85       	ldd	r25, Y+10	; 0x0a
    240e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9e 83       	std	Y+6, r25	; 0x06
    2418:	8d 83       	std	Y+5, r24	; 0x05
    241a:	8d 81       	ldd	r24, Y+5	; 0x05
    241c:	9e 81       	ldd	r25, Y+6	; 0x06
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	9a 81       	ldd	r25, Y+2	; 0x02
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_displayCharacter+0x8f0>
    242a:	9a 83       	std	Y+2, r25	; 0x02
    242c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    242e:	cd 59       	subi	r28, 0x9D	; 157
    2430:	df 4f       	sbci	r29, 0xFF	; 255
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	1f 91       	pop	r17
    2442:	0f 91       	pop	r16
    2444:	08 95       	ret

00002446 <LCD_displayString>:

// @brief Display the required string on the screen
// @param[in]  Str  The string to get displayed. 
void LCD_displayString(const uint8 *Str) {
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	00 d0       	rcall	.+0      	; 0x244c <LCD_displayString+0x6>
    244c:	0f 92       	push	r0
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	9b 83       	std	Y+3, r25	; 0x03
    2454:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2456:	19 82       	std	Y+1, r1	; 0x01
    2458:	0e c0       	rjmp	.+28     	; 0x2476 <LCD_displayString+0x30>
	while (Str[i] != '\0') {
		LCD_displayCharacter(Str[i]);
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	28 2f       	mov	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	9b 81       	ldd	r25, Y+3	; 0x03
    2464:	fc 01       	movw	r30, r24
    2466:	e2 0f       	add	r30, r18
    2468:	f3 1f       	adc	r31, r19
    246a:	80 81       	ld	r24, Z
    246c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <LCD_displayCharacter>
		i++;
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	8f 5f       	subi	r24, 0xFF	; 255
    2474:	89 83       	std	Y+1, r24	; 0x01

// @brief Display the required string on the screen
// @param[in]  Str  The string to get displayed. 
void LCD_displayString(const uint8 *Str) {
	uint8 i = 0;
	while (Str[i] != '\0') {
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	28 2f       	mov	r18, r24
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	9b 81       	ldd	r25, Y+3	; 0x03
    2480:	fc 01       	movw	r30, r24
    2482:	e2 0f       	add	r30, r18
    2484:	f3 1f       	adc	r31, r19
    2486:	80 81       	ld	r24, Z
    2488:	88 23       	and	r24, r24
    248a:	39 f7       	brne	.-50     	; 0x245a <LCD_displayString+0x14>
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <LCD_moveCursor>:

// @brief Move the cursor to a specified row and column index on the screen
// @param[in]  row  The row index. 
// @param[in]  col  The column index. 
void LCD_moveCursor(uint8 row, uint8 col) {
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	00 d0       	rcall	.+0      	; 0x249e <LCD_moveCursor+0x6>
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <LCD_moveCursor+0x8>
    24a0:	0f 92       	push	r0
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	8a 83       	std	Y+2, r24	; 0x02
    24a8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	// Calculate the required address in the LCD DDRAM 
	switch (row) {
    24aa:	8a 81       	ldd	r24, Y+2	; 0x02
    24ac:	28 2f       	mov	r18, r24
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	3d 83       	std	Y+5, r19	; 0x05
    24b2:	2c 83       	std	Y+4, r18	; 0x04
    24b4:	8c 81       	ldd	r24, Y+4	; 0x04
    24b6:	9d 81       	ldd	r25, Y+5	; 0x05
    24b8:	81 30       	cpi	r24, 0x01	; 1
    24ba:	91 05       	cpc	r25, r1
    24bc:	c1 f0       	breq	.+48     	; 0x24ee <LCD_moveCursor+0x56>
    24be:	2c 81       	ldd	r18, Y+4	; 0x04
    24c0:	3d 81       	ldd	r19, Y+5	; 0x05
    24c2:	22 30       	cpi	r18, 0x02	; 2
    24c4:	31 05       	cpc	r19, r1
    24c6:	2c f4       	brge	.+10     	; 0x24d2 <LCD_moveCursor+0x3a>
    24c8:	8c 81       	ldd	r24, Y+4	; 0x04
    24ca:	9d 81       	ldd	r25, Y+5	; 0x05
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	61 f0       	breq	.+24     	; 0x24e8 <LCD_moveCursor+0x50>
    24d0:	19 c0       	rjmp	.+50     	; 0x2504 <LCD_moveCursor+0x6c>
    24d2:	2c 81       	ldd	r18, Y+4	; 0x04
    24d4:	3d 81       	ldd	r19, Y+5	; 0x05
    24d6:	22 30       	cpi	r18, 0x02	; 2
    24d8:	31 05       	cpc	r19, r1
    24da:	69 f0       	breq	.+26     	; 0x24f6 <LCD_moveCursor+0x5e>
    24dc:	8c 81       	ldd	r24, Y+4	; 0x04
    24de:	9d 81       	ldd	r25, Y+5	; 0x05
    24e0:	83 30       	cpi	r24, 0x03	; 3
    24e2:	91 05       	cpc	r25, r1
    24e4:	61 f0       	breq	.+24     	; 0x24fe <LCD_moveCursor+0x66>
    24e6:	0e c0       	rjmp	.+28     	; 0x2504 <LCD_moveCursor+0x6c>
	case 0:
		lcd_memory_address = col;
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	0b c0       	rjmp	.+22     	; 0x2504 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	80 5c       	subi	r24, 0xC0	; 192
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	07 c0       	rjmp	.+14     	; 0x2504 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	80 5f       	subi	r24, 0xF0	; 240
    24fa:	89 83       	std	Y+1, r24	; 0x01
    24fc:	03 c0       	rjmp	.+6      	; 0x2504 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	80 5b       	subi	r24, 0xB0	; 176
    2502:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	// Move the LCD cursor to this specific address 
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	80 68       	ori	r24, 0x80	; 128
    2508:	0e 94 13 09 	call	0x1226	; 0x1226 <LCD_sendCommand>
}
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <LCD_displayStringRowColumn>:

// @brief Display the required string in a specified row and column index on the screen
// @param[in]  row  The row index. 
// @param[in]  col  The column index. 
// @param[in]  Str  The string to get displayed. 
void LCD_displayStringRowColumn(uint8 row, uint8 col, const uint8 *Str) {
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	00 d0       	rcall	.+0      	; 0x2522 <LCD_displayStringRowColumn+0x6>
    2522:	00 d0       	rcall	.+0      	; 0x2524 <LCD_displayStringRowColumn+0x8>
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	6a 83       	std	Y+2, r22	; 0x02
    252c:	5c 83       	std	Y+4, r21	; 0x04
    252e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); // go to to the required LCD position 
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	6a 81       	ldd	r22, Y+2	; 0x02
    2534:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_moveCursor>
	LCD_displayString(Str); // display the string 
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	9c 81       	ldd	r25, Y+4	; 0x04
    253c:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_displayString>
}
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <LCD_shiftDisplayRight>:

// @brief Shift display content to the right.
void LCD_shiftDisplayRight(void) {
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_RIGHT);
    2556:	8c e1       	ldi	r24, 0x1C	; 28
    2558:	0e 94 13 09 	call	0x1226	; 0x1226 <LCD_sendCommand>
}
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <LCD_shiftDisplayLeft>:

// @brief Shift display content to the left.
void LCD_shiftDisplayLeft(void) {
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SHIFT_ENTIRE_DISPLAY_LEFT);
    256a:	88 e1       	ldi	r24, 0x18	; 24
    256c:	0e 94 13 09 	call	0x1226	; 0x1226 <LCD_sendCommand>
}
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <LCD_intgerToString>:

// @brief Display the required decimal value on the screen
// @param[in]  data  The int data to be displayed. 
void LCD_intgerToString(sint32 data) {
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	64 97       	sbiw	r28, 0x14	; 20
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	69 8b       	std	Y+17, r22	; 0x11
    258c:	7a 8b       	std	Y+18, r23	; 0x12
    258e:	8b 8b       	std	Y+19, r24	; 0x13
    2590:	9c 8b       	std	Y+20, r25	; 0x14
	uint8 buff[16]; // String to hold the ascii result 
	itoa(data, buff, 10); // Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal 
    2592:	89 89       	ldd	r24, Y+17	; 0x11
    2594:	9a 89       	ldd	r25, Y+18	; 0x12
    2596:	ab 89       	ldd	r26, Y+19	; 0x13
    2598:	bc 89       	ldd	r27, Y+20	; 0x14
    259a:	bc 01       	movw	r22, r24
    259c:	cd 01       	movw	r24, r26
    259e:	9e 01       	movw	r18, r28
    25a0:	2f 5f       	subi	r18, 0xFF	; 255
    25a2:	3f 4f       	sbci	r19, 0xFF	; 255
    25a4:	a9 01       	movw	r20, r18
    25a6:	2a e0       	ldi	r18, 0x0A	; 10
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	0e 94 b9 13 	call	0x2772	; 0x2772 <itoa>
	LCD_displayString(buff); // Display the string 
    25ae:	ce 01       	movw	r24, r28
    25b0:	01 96       	adiw	r24, 0x01	; 1
    25b2:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_displayString>
}
    25b6:	64 96       	adiw	r28, 0x14	; 20
    25b8:	0f b6       	in	r0, 0x3f	; 63
    25ba:	f8 94       	cli
    25bc:	de bf       	out	0x3e, r29	; 62
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	cd bf       	out	0x3d, r28	; 61
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <LCD_floatToString>:

// @brief Display the required float value on the screen
// @param[in]  data  The float data to be displayed. 
void LCD_floatToString(float data) {
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	2c 97       	sbiw	r28, 0x0c	; 12
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
    25dc:	69 87       	std	Y+9, r22	; 0x09
    25de:	7a 87       	std	Y+10, r23	; 0x0a
    25e0:	8b 87       	std	Y+11, r24	; 0x0b
    25e2:	9c 87       	std	Y+12, r25	; 0x0c
	sint32 decimalValue = (sint32) data;
    25e4:	69 85       	ldd	r22, Y+9	; 0x09
    25e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    25e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    25ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    25ec:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	8d 83       	std	Y+5, r24	; 0x05
    25f6:	9e 83       	std	Y+6, r25	; 0x06
    25f8:	af 83       	std	Y+7, r26	; 0x07
    25fa:	b8 87       	std	Y+8, r27	; 0x08
	sint32 floatValue = (data - decimalValue) * 100;
    25fc:	6d 81       	ldd	r22, Y+5	; 0x05
    25fe:	7e 81       	ldd	r23, Y+6	; 0x06
    2600:	8f 81       	ldd	r24, Y+7	; 0x07
    2602:	98 85       	ldd	r25, Y+8	; 0x08
    2604:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    2608:	9b 01       	movw	r18, r22
    260a:	ac 01       	movw	r20, r24
    260c:	69 85       	ldd	r22, Y+9	; 0x09
    260e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2610:	8b 85       	ldd	r24, Y+11	; 0x0b
    2612:	9c 85       	ldd	r25, Y+12	; 0x0c
    2614:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	48 ec       	ldi	r20, 0xC8	; 200
    2626:	52 e4       	ldi	r21, 0x42	; 66
    2628:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	bc 01       	movw	r22, r24
    2632:	cd 01       	movw	r24, r26
    2634:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	89 83       	std	Y+1, r24	; 0x01
    263e:	9a 83       	std	Y+2, r25	; 0x02
    2640:	ab 83       	std	Y+3, r26	; 0x03
    2642:	bc 83       	std	Y+4, r27	; 0x04
	LCD_intgerToString(decimalValue);
    2644:	8d 81       	ldd	r24, Y+5	; 0x05
    2646:	9e 81       	ldd	r25, Y+6	; 0x06
    2648:	af 81       	ldd	r26, Y+7	; 0x07
    264a:	b8 85       	ldd	r27, Y+8	; 0x08
    264c:	bc 01       	movw	r22, r24
    264e:	cd 01       	movw	r24, r26
    2650:	0e 94 bb 12 	call	0x2576	; 0x2576 <LCD_intgerToString>
	LCD_displayCharacter('.');
    2654:	8e e2       	ldi	r24, 0x2E	; 46
    2656:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <LCD_displayCharacter>
	LCD_intgerToString(floatValue);
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	9a 81       	ldd	r25, Y+2	; 0x02
    265e:	ab 81       	ldd	r26, Y+3	; 0x03
    2660:	bc 81       	ldd	r27, Y+4	; 0x04
    2662:	bc 01       	movw	r22, r24
    2664:	cd 01       	movw	r24, r26
    2666:	0e 94 bb 12 	call	0x2576	; 0x2576 <LCD_intgerToString>
}
    266a:	2c 96       	adiw	r28, 0x0c	; 12
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	08 95       	ret

0000267c <LCD_clearScreen>:

// @brief Send the clear screen command
void LCD_clearScreen(void) {
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY); // Send clear display command 
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	0e 94 13 09 	call	0x1226	; 0x1226 <LCD_sendCommand>
}
    268a:	cf 91       	pop	r28
    268c:	df 91       	pop	r29
    268e:	08 95       	ret

00002690 <main>:
#include "lcd.h"
#include "atmega32_uart.h"

int main(void) {
    2690:	df 93       	push	r29
    2692:	cf 93       	push	r28
    2694:	0f 92       	push	r0
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
	uint8 myChar = 0;
    269a:	19 82       	std	Y+1, r1	; 0x01
	LCD_init();
    269c:	0e 94 4d 08 	call	0x109a	; 0x109a <LCD_init>
	UART_init(9600);
    26a0:	60 e8       	ldi	r22, 0x80	; 128
    26a2:	75 e2       	ldi	r23, 0x25	; 37
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	0e 94 6f 07 	call	0xede	; 0xede <UART_init>

	for (;;){
		myChar = UART_recieveByte();
    26ac:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <UART_recieveByte>
    26b0:	89 83       	std	Y+1, r24	; 0x01
		UART_sendByte(myChar);
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	0e 94 bb 07 	call	0xf76	; 0xf76 <UART_sendByte>
		LCD_displayCharacter(myChar);
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <LCD_displayCharacter>
    26be:	f6 cf       	rjmp	.-20     	; 0x26ac <main+0x1c>

000026c0 <__udivmodsi4>:
    26c0:	a1 e2       	ldi	r26, 0x21	; 33
    26c2:	1a 2e       	mov	r1, r26
    26c4:	aa 1b       	sub	r26, r26
    26c6:	bb 1b       	sub	r27, r27
    26c8:	fd 01       	movw	r30, r26
    26ca:	0d c0       	rjmp	.+26     	; 0x26e6 <__udivmodsi4_ep>

000026cc <__udivmodsi4_loop>:
    26cc:	aa 1f       	adc	r26, r26
    26ce:	bb 1f       	adc	r27, r27
    26d0:	ee 1f       	adc	r30, r30
    26d2:	ff 1f       	adc	r31, r31
    26d4:	a2 17       	cp	r26, r18
    26d6:	b3 07       	cpc	r27, r19
    26d8:	e4 07       	cpc	r30, r20
    26da:	f5 07       	cpc	r31, r21
    26dc:	20 f0       	brcs	.+8      	; 0x26e6 <__udivmodsi4_ep>
    26de:	a2 1b       	sub	r26, r18
    26e0:	b3 0b       	sbc	r27, r19
    26e2:	e4 0b       	sbc	r30, r20
    26e4:	f5 0b       	sbc	r31, r21

000026e6 <__udivmodsi4_ep>:
    26e6:	66 1f       	adc	r22, r22
    26e8:	77 1f       	adc	r23, r23
    26ea:	88 1f       	adc	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	1a 94       	dec	r1
    26f0:	69 f7       	brne	.-38     	; 0x26cc <__udivmodsi4_loop>
    26f2:	60 95       	com	r22
    26f4:	70 95       	com	r23
    26f6:	80 95       	com	r24
    26f8:	90 95       	com	r25
    26fa:	9b 01       	movw	r18, r22
    26fc:	ac 01       	movw	r20, r24
    26fe:	bd 01       	movw	r22, r26
    2700:	cf 01       	movw	r24, r30
    2702:	08 95       	ret

00002704 <__prologue_saves__>:
    2704:	2f 92       	push	r2
    2706:	3f 92       	push	r3
    2708:	4f 92       	push	r4
    270a:	5f 92       	push	r5
    270c:	6f 92       	push	r6
    270e:	7f 92       	push	r7
    2710:	8f 92       	push	r8
    2712:	9f 92       	push	r9
    2714:	af 92       	push	r10
    2716:	bf 92       	push	r11
    2718:	cf 92       	push	r12
    271a:	df 92       	push	r13
    271c:	ef 92       	push	r14
    271e:	ff 92       	push	r15
    2720:	0f 93       	push	r16
    2722:	1f 93       	push	r17
    2724:	cf 93       	push	r28
    2726:	df 93       	push	r29
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
    272c:	ca 1b       	sub	r28, r26
    272e:	db 0b       	sbc	r29, r27
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	09 94       	ijmp

0000273c <__epilogue_restores__>:
    273c:	2a 88       	ldd	r2, Y+18	; 0x12
    273e:	39 88       	ldd	r3, Y+17	; 0x11
    2740:	48 88       	ldd	r4, Y+16	; 0x10
    2742:	5f 84       	ldd	r5, Y+15	; 0x0f
    2744:	6e 84       	ldd	r6, Y+14	; 0x0e
    2746:	7d 84       	ldd	r7, Y+13	; 0x0d
    2748:	8c 84       	ldd	r8, Y+12	; 0x0c
    274a:	9b 84       	ldd	r9, Y+11	; 0x0b
    274c:	aa 84       	ldd	r10, Y+10	; 0x0a
    274e:	b9 84       	ldd	r11, Y+9	; 0x09
    2750:	c8 84       	ldd	r12, Y+8	; 0x08
    2752:	df 80       	ldd	r13, Y+7	; 0x07
    2754:	ee 80       	ldd	r14, Y+6	; 0x06
    2756:	fd 80       	ldd	r15, Y+5	; 0x05
    2758:	0c 81       	ldd	r16, Y+4	; 0x04
    275a:	1b 81       	ldd	r17, Y+3	; 0x03
    275c:	aa 81       	ldd	r26, Y+2	; 0x02
    275e:	b9 81       	ldd	r27, Y+1	; 0x01
    2760:	ce 0f       	add	r28, r30
    2762:	d1 1d       	adc	r29, r1
    2764:	0f b6       	in	r0, 0x3f	; 63
    2766:	f8 94       	cli
    2768:	de bf       	out	0x3e, r29	; 62
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	cd bf       	out	0x3d, r28	; 61
    276e:	ed 01       	movw	r28, r26
    2770:	08 95       	ret

00002772 <itoa>:
    2772:	fb 01       	movw	r30, r22
    2774:	9f 01       	movw	r18, r30
    2776:	e8 94       	clt
    2778:	42 30       	cpi	r20, 0x02	; 2
    277a:	c4 f0       	brlt	.+48     	; 0x27ac <itoa+0x3a>
    277c:	45 32       	cpi	r20, 0x25	; 37
    277e:	b4 f4       	brge	.+44     	; 0x27ac <itoa+0x3a>
    2780:	4a 30       	cpi	r20, 0x0A	; 10
    2782:	29 f4       	brne	.+10     	; 0x278e <itoa+0x1c>
    2784:	97 fb       	bst	r25, 7
    2786:	1e f4       	brtc	.+6      	; 0x278e <itoa+0x1c>
    2788:	90 95       	com	r25
    278a:	81 95       	neg	r24
    278c:	9f 4f       	sbci	r25, 0xFF	; 255
    278e:	64 2f       	mov	r22, r20
    2790:	77 27       	eor	r23, r23
    2792:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__udivmodhi4>
    2796:	80 5d       	subi	r24, 0xD0	; 208
    2798:	8a 33       	cpi	r24, 0x3A	; 58
    279a:	0c f0       	brlt	.+2      	; 0x279e <itoa+0x2c>
    279c:	89 5d       	subi	r24, 0xD9	; 217
    279e:	81 93       	st	Z+, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	a1 f7       	brne	.-24     	; 0x278e <itoa+0x1c>
    27a6:	16 f4       	brtc	.+4      	; 0x27ac <itoa+0x3a>
    27a8:	5d e2       	ldi	r21, 0x2D	; 45
    27aa:	51 93       	st	Z+, r21
    27ac:	10 82       	st	Z, r1
    27ae:	c9 01       	movw	r24, r18
    27b0:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <strrev>

000027b4 <strrev>:
    27b4:	dc 01       	movw	r26, r24
    27b6:	fc 01       	movw	r30, r24
    27b8:	67 2f       	mov	r22, r23
    27ba:	71 91       	ld	r23, Z+
    27bc:	77 23       	and	r23, r23
    27be:	e1 f7       	brne	.-8      	; 0x27b8 <strrev+0x4>
    27c0:	32 97       	sbiw	r30, 0x02	; 2
    27c2:	04 c0       	rjmp	.+8      	; 0x27cc <strrev+0x18>
    27c4:	7c 91       	ld	r23, X
    27c6:	6d 93       	st	X+, r22
    27c8:	70 83       	st	Z, r23
    27ca:	62 91       	ld	r22, -Z
    27cc:	ae 17       	cp	r26, r30
    27ce:	bf 07       	cpc	r27, r31
    27d0:	c8 f3       	brcs	.-14     	; 0x27c4 <strrev+0x10>
    27d2:	08 95       	ret

000027d4 <__udivmodhi4>:
    27d4:	aa 1b       	sub	r26, r26
    27d6:	bb 1b       	sub	r27, r27
    27d8:	51 e1       	ldi	r21, 0x11	; 17
    27da:	07 c0       	rjmp	.+14     	; 0x27ea <__udivmodhi4_ep>

000027dc <__udivmodhi4_loop>:
    27dc:	aa 1f       	adc	r26, r26
    27de:	bb 1f       	adc	r27, r27
    27e0:	a6 17       	cp	r26, r22
    27e2:	b7 07       	cpc	r27, r23
    27e4:	10 f0       	brcs	.+4      	; 0x27ea <__udivmodhi4_ep>
    27e6:	a6 1b       	sub	r26, r22
    27e8:	b7 0b       	sbc	r27, r23

000027ea <__udivmodhi4_ep>:
    27ea:	88 1f       	adc	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	5a 95       	dec	r21
    27f0:	a9 f7       	brne	.-22     	; 0x27dc <__udivmodhi4_loop>
    27f2:	80 95       	com	r24
    27f4:	90 95       	com	r25
    27f6:	bc 01       	movw	r22, r24
    27f8:	cd 01       	movw	r24, r26
    27fa:	08 95       	ret

000027fc <_exit>:
    27fc:	f8 94       	cli

000027fe <__stop_program>:
    27fe:	ff cf       	rjmp	.-2      	; 0x27fe <__stop_program>
